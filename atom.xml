<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Misaka&#39;s blog</title>
  
  
  <link href="http://www.misaka-9982.com/atom.xml" rel="self"/>
  
  <link href="http://www.misaka-9982.com/"/>
  <updated>2023-06-27T16:13:53.511Z</updated>
  <id>http://www.misaka-9982.com/</id>
  
  <author>
    <name>Misaka</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Codewar 体验</title>
    <link href="http://www.misaka-9982.com/2023/06/28/Codewar-%E4%BD%93%E9%AA%8C/"/>
    <id>http://www.misaka-9982.com/2023/06/28/Codewar-%E4%BD%93%E9%AA%8C/</id>
    <published>2023-06-27T16:00:42.000Z</published>
    <updated>2023-06-27T16:13:53.511Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>先膜拜个大佬：</p><p>在Codewars上做JavaScript算法题是一种怎样的体验？ - 千里冰封二瓣之的回答 - 知乎 <a href="https://www.zhihu.com/question/53766913/answer/212285498">https://www.zhihu.com/question/53766913/answer/212285498</a></p></blockquote><p>之前阅读&quot;The Little Schemer&quot;和&quot;The Seasoned Schemer&quot;这两本书，感觉需要找一个地方来练习和提升我对Scheme语言的理解和技巧，而且刚好莎莎推荐了《Essentials of Compilation_ An Incremental Approach in Racket》这本书，就决定来练习Scheme的方言Racket。虽然目前LeetCode也能支持Racket，但是用Racket做Leetcode的题目总觉得有点别扭，而且LeetCode对于练习一个新语言来说并不是那么的友好，于是转到Codewar来做些练习，Codewar支持的语言就非常的多，在这里做语法题目练习就很方便，它提供了不少语言的测试框架和测试样例，在本地搭建好环境后，就可以实现在本地运行并进行测试，自己随意的打印字符串打印变量，添加测试样例这些东西来调试代码，这点就比Leetcode强很多，体验很棒。</p><p>个人体会，LeetCode更偏向于去应付面试和练习算法，而Codewar的题目更适合锻炼自己的工程编程能力，考察的东西除了算法之外还有很多，例如语言特性，框架原型，代码Debug等。难度较高的题目中有很多关于解析器（parser）和编译器子模块的题目，这些题目很有挑战性，但当题目通过的时候，又会觉得嘎嘎爽。</p><p>对于Codewar的题目难度，我觉得它分为8个等级还是比较合理的，尽管有些3kyu的题目让我感觉并不比2kyu的题目简单（比如这道<a href="https://www.codewars.com/kata/638c92b10e43cc000e615a07">Prime counting</a>)。从4kyu开始的题目就需要结合很多其他的知识来解题(比如编译原理)。我觉得5-8kyu的题目比较简单，适合熟悉一些比较基本的语法，3-4kyu的题目难度适中，非常适合锻炼编程能力。1 - 2 kyu 本人目前也没写过几道，而且好像不少编译器相关的题目，就暂时还没能力去解题</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>6.S081 Lab 3 page tables</title>
    <link href="http://www.misaka-9982.com/2023/03/15/6-S081-Lab-3-page-tables/"/>
    <id>http://www.misaka-9982.com/2023/03/15/6-S081-Lab-3-page-tables/</id>
    <published>2023-03-15T12:44:26.000Z</published>
    <updated>2023-03-16T02:40:43.301Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="kernel-memlayout-h"><code>kernel/memlayout.h</code></h3><p>这段代码是一个RISC-V处理器上的内存布局和地址映射相关的配置。RISC-V是一种开放的指令集架构（ISA），在很多领域得到了广泛应用。以下是这段代码的解释：</p><ol><li>这段代码首先定义了一些硬件寄存器的物理地址：<ul><li>UART0（0x10000000L）：串行通信接口UART的基地址。</li><li>VIRTIO0（0x10001000）：虚拟I/O设备的基地址。</li><li>CLINT（0x2000000L）：核心局部中断器（Core Local Interruptor）的基地址。</li><li>PLIC（0x0c000000L）：平台级中断控制器（Platform-Level Interrupt Controller）的基地址。</li></ul></li><li>之后，定义了与中断相关的寄存器地址和宏函数。</li><li>定义了内核使用的物理内存区域：<ul><li>KERNBASE（0x80000000L）：内核程序的起始地址。</li><li>PHYSTOP：内核使用的物理内存的结束地址。</li></ul></li><li>定义了内核栈和用户栈的内存布局。</li><li>用户内存布局定义如下：<ul><li>首先是文本段、原始数据段、BSS段。</li><li>固定大小的栈。</li><li>可扩展的堆。</li><li>用户系统调用（USYSCALL）区域。</li><li>中断帧（TRAPFRAME）区域，用于存储进程的中断帧。</li><li>跳板区域（TRAMPOLINE），与内核空间共享。</li></ul></li></ol><p>这些配置用于设置处理器上的内存布局和地址映射。在实际系统中，硬件组件的地址、中断号等可能根据具体实现而有所不同。这段代码为一个基于RISC-V的操作系统内核提供了一个内存布局的模板。</p><h3 id="kernel-vm-c"><code>kernel/vm.c</code></h3><p>给定的代码实现了在 RISC-V 架构上运行的 xv6 操作系统的页表管理。</p><p><code>kvminit</code> 函数通过创建内核直接映射页表并进行各种映射来初始化内核页表。它为 UART0 设备、virtio 磁盘接口、内核文本和数据段、陷阱入口/出口跳板、进程内核栈以及物理本地中断控制器 (PLIC) 分配和映射内存区域。</p><p><code>kvminithart</code> 函数将硬件页表寄存器切换到内核的页表，并启用分页机制。</p><p><code>walk</code> 函数返回与虚拟地址 va 对应的页面 pagetable 中 PTE 的地址。如果 alloc!=0，则会创建所需的页面表页面。</p><p><code>walkaddr</code> 函数查找虚拟地址，返回物理地址或 0（如果未映射）。此函数仅可用于查找用户页面。</p><p><code>mappages</code>函数为从va开始引用起始物理地址pa的虚拟地址创建PTE。va和size可能不是对齐的。成功时返回0，如果 <code>walk()</code> 无法分配所需的页面表页面，则返回-1。</p><p><code>uvmunmap</code>函数从va开始移除npages个映射。 va必须对齐页。 映射必须存在。 可选地，它释放物理内存。</p><p><code>uvmcreate</code>函数创建一个空的用户页表。 如果内存不足，则返回0。</p><p><code>uvmfirst</code>函数将用户initcode加载到第一个进程的pagetable地址0中。 sz必须小于一页。</p><p><code>uvmalloc</code>函数分配PTE和物理内存以使进程从oldsz增长到newsz，这不需要对齐页面大小。 它返回新大小或错误时返回0。</p><p><code>uvmdealloc</code>函数取消分配用户页面以将进程大小从oldsz调整为newsz. oldsz和newsz无需对齐页面大小，而且newsz无需小于oldsz. oldsz可以大于实际进程大小。 它返回新的进程大小。</p><p><code>freewalk</code>函数递归释放页表页面。所有叶映射必须已经被删除。</p><p><code>uvmfree</code>函数先释放用户内存页面，然后再释放页表页面。</p><p><code>uvmcopy</code>函数将父进程的页表中的内存复制到子进程的页表中。它同时复制了页表和物理内存。成功返回0，失败返回-1。在失败时会释放任何分配的页面。</p><p><code>uvmclear</code>函数标记一个PTE对于用户访问无效。它由exec用于用户堆栈保护页面。</p><p><code>copyout</code>函数从内核向用户空间复制内存。它将长度为len字节的数据从src复制到给定页表中虚拟地址dstva处。成功返回0，错误返回-1.</p><p><code>copyin</code>函数从用户空间向内核复制内存。它将长度为len字节的数据从给定页表中虚拟地址srcva处复制到dst中。成功返回0，错误返回-1.</p><p><code>copyinstr</code>函数从用户空间向内核复制以null结尾字符串（即C风格字符串）。它将最多max个字节或直到遇到’\0’停止，并将其从给定页表中虚拟地址srcva处开始进行操作并写入dst缓冲区中 。成功则返回0，否则返回-1.</p><h3 id="kernel-kalloc-c"><code>kernel/kalloc.c</code></h3><p>这段代码实现了一个物理内存分配器，用于分配给用户进程、内核栈、页表页面和管道缓冲区。分配器使用 4096 字节（4KB）的整数倍页面。</p><p>代码中包含的主要结构和函数如下：</p><ol><li>结构 <code>run</code>：表示一个可用的内存块，包含一个指向下一个可用内存块的指针。</li><li>结构 <code>kmem</code>：管理可用内存块链表的结构，包含一个自旋锁和一个指向可用内存块链表的指针。</li><li>函数 <code>kinit()</code>：初始化内存分配器。设置 kmem 结构的自旋锁，然后调用 <code>freerange()</code> 函数，将内核结束地址（<code>end</code>）到物理内存结束地址（<code>PHYSTOP</code>）之间的内存空间初始化为可用内存块。</li><li>函数 <code>freerange(void *pa_start, void *pa_end)</code>：将给定范围内的物理内存地址空间初始化为可用内存块，并将它们添加到 kmem 的可用内存块链表中。</li><li>函数 <code>kfree(void *pa)</code>：释放由 <code>kalloc()</code> 分配的物理内存页面。将要释放的内存页面填充为特定值（这里是 1），以捕获悬空引用。然后将页面添加回 kmem 的可用内存块链表中。</li><li>函数 <code>kalloc(void)</code>：分配一个 4096 字节（4KB）的物理内存页面。从 kmem 的可用内存块链表中取一个内存块，并将其从链表中移除。如果成功分配到内存块，则将其填充为特定值（这里是 5），并将指针返回给内核。</li></ol><p>这段代码提供了一个简单的物理内存管理功能，以满足内核和用户进程的内存分配需求。</p><h2 id="Speed-up-system-calls-easy">Speed up system calls (<a href="https://pdos.csail.mit.edu/6.S081/2022/labs/guidance.html">easy</a>)</h2><p>一些操作系统（例如Linux）通过在用户空间和内核之间共享只读区域中的数据来加速某些系统调用。这消除了执行这些系统调用时需要进行内核交叉的需求。为了帮助您学习如何将映射插入到页表中，您的第一个任务是为xv6实现<code>getpid()</code>系统调用的此优化。<br>当创建每个进程时，在 <code>USYSCALL</code> 处映射一个只读页面（在<code>memlayout.h</code>中定义的虚拟地址）。在该页面开头存储一个 <code>struct usyscall</code>(也在 <code>memlayout.h</code> 中定义)，并将其初始化以存储当前进程的PID。对于本实验室，已经提供了用户空间上的 <code>ugetpid()</code> 并且会自动使用 USYSCALL 映射。如果运行 <code>pgtbltest</code> 时 <code>ugetpid</code> 测试案例通过，则您将获得此实验室部分积分。<br>一些建议：</p><ul><li>您可以在 <code>kernel/proc.c</code> 的 <code>proc_pagetable()</code> 中执行映射。</li><li>选择允许用户空间仅读取页面的权限位。</li><li>您可能会发现 <code>mappages()</code> 是有用工具。</li><li>不要忘记在 <code>allocproc()</code> 中分配和初始化页面。</li><li>确保在 <code>freeproc()</code> 中释放该页。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="OS" scheme="http://www.misaka-9982.com/tags/OS/"/>
    
    <category term="6.S081" scheme="http://www.misaka-9982.com/tags/6-S081/"/>
    
  </entry>
  
  <entry>
    <title>6.S081-Lab 2: System Calls</title>
    <link href="http://www.misaka-9982.com/2023/03/14/6-S081-Lab-2-System-Calls/"/>
    <id>http://www.misaka-9982.com/2023/03/14/6-S081-Lab-2-System-Calls/</id>
    <published>2023-03-14T09:46:30.000Z</published>
    <updated>2023-03-15T07:21:34.489Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul><li>官方材料：<a href="https://pdos.csail.mit.edu/6.S081/2021/labs/syscall.html">https://pdos.csail.mit.edu/6.S081/2021/labs/syscall.html</a></li><li>参考材料：<ul><li><a href="https://th0ar.gitbooks.io/xv6-chinese/content/">https://th0ar.gitbooks.io/xv6-chinese/content/</a></li><li><a href="https://mit-public-courses-cn-translatio.gitbook.io/mit6-s081/">https://mit-public-courses-cn-translatio.gitbook.io/mit6-s081/</a></li></ul></li></ul><blockquote><p>在开始编码之前，请阅读xv6书籍的第2章、第4章的4.3和4.4节以及相关的源文件:<br>将系统调用路由到内核的用户空间“stubs”位于 <code>user/usys.S</code>，在运行make时由 <code>user/usys.pl</code>生成。声明在 <code>user/user.h</code> 中<br>将系统调用路由到实现它的内核函数的内核空间代码位于 <code>kernel/syscall.c</code> 和 <code>kernel/syscall.h</code> 中。<br>与进程相关的代码是 <code>kernel/proc.h</code> 和 <code>kernel/proc.c</code> 。</p></blockquote><p>要向xv6添加新的系统调用，您需要修改几个文件：<br>在 <code>kernel/syscall.h</code>中定义系统调用号。在xv6中的惯例是给每个系统调用一个以<code>SYS_</code> 开头并以小写字母表示该系统调用名称结尾的数字。例如，获取进程ID的系统调用被定义为 <code>SYS_getpid</code>。<br>在 <code>kernel/syscall.c</code> 中添加一个新的内核函数来实现该系统调用。此函数使用<code>copyin()</code> 函数从用户空间获取参数，并使用 <code>copyout()</code> 函数将结果返回到用户空间。请注意验证用户指针并在无效时返回错误。<br>在 <code>user/usys.S</code> 中添加一个用户空间存根（stub）。存根应将系统调用号推送到堆栈上，然后使用ecall指令转换到内核模式。参数数量和类型取决于所需的系统调用。<br>在<code>user/user.h</code>中声明该系统调用。此声明应与内核函数原型匹配，并包括该系统调用号。<br>最后，在 <code>user/user.c</code> 中添加一个用户空间包装器(wrapper)函数，它使用在<code>user/usys.S</code> 中定义的包装器(wrapper) 函数来 调  用 系 统 调  试 。 此 包 装 器 (wrapper) 函 数 应 按 相 同 的 订 单 接 受 内 核 函 数 的 参数 并 返回 结 果。<br>进行这些更改后，您需要运行 make 重新构建内核和用户空间二进制文件。完成之后，您可以编写一个测试程序来调用您新创建的 系统 调 试 ， 并 在 xv6 中 运 行 它 。</p><h2 id="System-call-tracing-moderate">System call tracing (<a href="https://pdos.csail.mit.edu/6.S081/2021/labs/guidance.html">moderate</a>)</h2><blockquote><p>In this assignment you will add a system call tracing feature that may help you when debugging later labs. You’ll create a new <code>trace</code> system call that will control tracing. It should take one argument, an integer “mask”, whose bits specify which system calls to trace. For example, to trace the fork system call, a program calls <code>trace(1 &lt;&lt; SYS_fork)</code>, where <code>SYS_fork</code> is a syscall number from <code>kernel/syscall.h</code>. You have to modify the xv6 kernel to print out a line when each system call is about to return, if the system call’s number is set in the mask. The line should contain the process id, the name of the system call and the return value; you don’t need to print the system call arguments. The <code>trace</code> system call should enable tracing for the process that calls it and any children that it subsequently forks, but should not affect other processes.</p></blockquote><p>由于 xv6 内核是一个操作系统，因此它包含内核代码和用户级代码。用户级代码通常编写为用户级进程，使用系统调用来与内核进行通信。</p><p>在本次任务中，您需要修改 xv6 内核来实现一个新的系统调用，以及一个用户级程序来调用该系统调用。下面是一些提示，以帮助您完成此任务：</p><ol><li><p>在 Makefile 中添加 <code>$U/_trace</code> 到 <code>UPROGS</code>，以便编译 trace 程序。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">UPROGS=\</span><br><span class="line">$U/_cat\</span><br><span class="line">$U/_echo\</span><br><span class="line">$U/_forktest\</span><br><span class="line">$U/_grep\</span><br><span class="line">$U/_init\</span><br><span class="line">$U/_kill\</span><br><span class="line">$U/_ln\</span><br><span class="line">$U/_ls\</span><br><span class="line">$U/_mkdir\</span><br><span class="line">$U/_rm\</span><br><span class="line">$U/_sh\</span><br><span class="line">$U/_stressfs\</span><br><span class="line">$U/_usertests\</span><br><span class="line">$U/_wc\</span><br><span class="line">$U/_zombie\</span><br><span class="line">$U/_trace</span><br></pre></td></tr></table></figure></li><li><p>修改 <code>user/user.h</code>，添加 trace 系统调用的函数原型。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// system calls</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fork</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">exit</span><span class="params">(<span class="keyword">int</span>)</span> __<span class="title">attribute__</span><span class="params">((noreturn))</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">wait</span><span class="params">(<span class="keyword">int</span>*)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pipe</span><span class="params">(<span class="keyword">int</span>*)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">const</span> <span class="keyword">void</span>*, <span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">void</span>*, <span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">close</span><span class="params">(<span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">kill</span><span class="params">(<span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">exec</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>*, <span class="keyword">char</span>**)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">open</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>*, <span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mknod</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>*, <span class="keyword">short</span>, <span class="keyword">short</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">unlink</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>*)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fstat</span><span class="params">(<span class="keyword">int</span> fd, struct stat*)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">link</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>*, <span class="keyword">const</span> <span class="keyword">char</span>*)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mkdir</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>*)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">chdir</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>*)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dup</span><span class="params">(<span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getpid</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">char</span>* <span class="title">sbrk</span><span class="params">(<span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sleep</span><span class="params">(<span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">uptime</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">trace</span><span class="params">(<span class="keyword">int</span>)</span></span>; <span class="comment">// &lt;--- Here!</span></span><br></pre></td></tr></table></figure></li><li><p>在 <code>user/usys.pl</code> 中添加对 trace 系统调用的支持。</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">entry(<span class="string">&quot;fork&quot;</span>);</span><br><span class="line">entry(<span class="string">&quot;exit&quot;</span>);</span><br><span class="line">entry(<span class="string">&quot;wait&quot;</span>);</span><br><span class="line">entry(<span class="string">&quot;pipe&quot;</span>);</span><br><span class="line">entry(<span class="string">&quot;read&quot;</span>);</span><br><span class="line">entry(<span class="string">&quot;write&quot;</span>);</span><br><span class="line">entry(<span class="string">&quot;close&quot;</span>);</span><br><span class="line">entry(<span class="string">&quot;kill&quot;</span>);</span><br><span class="line">entry(<span class="string">&quot;exec&quot;</span>);</span><br><span class="line">entry(<span class="string">&quot;open&quot;</span>);</span><br><span class="line">entry(<span class="string">&quot;mknod&quot;</span>);</span><br><span class="line">entry(<span class="string">&quot;unlink&quot;</span>);</span><br><span class="line">entry(<span class="string">&quot;fstat&quot;</span>);</span><br><span class="line">entry(<span class="string">&quot;link&quot;</span>);</span><br><span class="line">entry(<span class="string">&quot;mkdir&quot;</span>);</span><br><span class="line">entry(<span class="string">&quot;chdir&quot;</span>);</span><br><span class="line">entry(<span class="string">&quot;dup&quot;</span>);</span><br><span class="line">entry(<span class="string">&quot;getpid&quot;</span>);</span><br><span class="line">entry(<span class="string">&quot;sbrk&quot;</span>);</span><br><span class="line">entry(<span class="string">&quot;sleep&quot;</span>);</span><br><span class="line">entry(<span class="string">&quot;uptime&quot;</span>);</span><br><span class="line">entry(<span class="string">&quot;trace&quot;</span>); <span class="regexp">//</span> &lt;--- Here!</span><br></pre></td></tr></table></figure><p>运行后会生成汇编文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">.global trace</span><br><span class="line">trace:</span><br><span class="line"> li a7, SYS_trace</span><br><span class="line"> ecall</span><br><span class="line"> ret</span><br></pre></td></tr></table></figure></li><li><p>在 <code>kernel/syscall.h</code> 中添加 trace 系统调用的号码。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// System call numbers</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SYS_fork    1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SYS_exit    2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SYS_wait    3</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SYS_pipe    4</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SYS_read    5</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SYS_kill    6</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SYS_exec    7</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SYS_fstat   8</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SYS_chdir   9</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SYS_dup    10</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SYS_getpid 11</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SYS_sbrk   12</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SYS_sleep  13</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SYS_uptime 14</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SYS_open   15</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SYS_write  16</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SYS_mknod  17</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SYS_unlink 18</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SYS_link   19</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SYS_mkdir  20</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SYS_close  21</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SYS_trace  22 <span class="comment">// &lt;--- Here</span></span></span><br></pre></td></tr></table></figure></li><li><p>在 <code>kernel/syscall.c</code> 中添加一个数组，用于将系统调用号码映射到名称。例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">char</span>* syscalls_name[] = &#123;</span><br><span class="line">[SYS_fork]    <span class="string">&quot;syscall fork&quot;</span>,</span><br><span class="line">[SYS_exit]    <span class="string">&quot;syscall exit&quot;</span>,</span><br><span class="line">[SYS_wait]    <span class="string">&quot;syscall wait&quot;</span>,</span><br><span class="line">[SYS_pipe]    <span class="string">&quot;syscall pipe&quot;</span>,</span><br><span class="line">[SYS_read]    <span class="string">&quot;syscall read&quot;</span>,</span><br><span class="line">[SYS_kill]    <span class="string">&quot;syscall kill&quot;</span>,</span><br><span class="line">[SYS_exec]    <span class="string">&quot;syscall exec&quot;</span>,</span><br><span class="line">[SYS_fstat]   <span class="string">&quot;syscall fstat&quot;</span>,</span><br><span class="line">[SYS_chdir]   <span class="string">&quot;syscall chdir&quot;</span>,</span><br><span class="line">[SYS_dup]     <span class="string">&quot;syscall dup&quot;</span>,</span><br><span class="line">[SYS_getpid]  <span class="string">&quot;syscall getpid&quot;</span>,</span><br><span class="line">[SYS_sbrk]    <span class="string">&quot;syscall sbrk&quot;</span>,</span><br><span class="line">[SYS_sleep]   <span class="string">&quot;syscall sleep&quot;</span>,</span><br><span class="line">[SYS_uptime]  <span class="string">&quot;syscall uptime&quot;</span>,</span><br><span class="line">[SYS_open]    <span class="string">&quot;syscall open&quot;</span>,</span><br><span class="line">[SYS_write]   <span class="string">&quot;syscall write&quot;</span>,</span><br><span class="line">[SYS_mknod]   <span class="string">&quot;syscall mknod&quot;</span>,</span><br><span class="line">[SYS_unlink]  <span class="string">&quot;syscall unlink&quot;</span>,</span><br><span class="line">[SYS_link]    <span class="string">&quot;syscall link&quot;</span>,</span><br><span class="line">[SYS_mkdir]   <span class="string">&quot;syscall mkdir&quot;</span>,</span><br><span class="line">[SYS_close]   <span class="string">&quot;syscall close&quot;</span>,</span><br><span class="line">[SYS_trace]   <span class="string">&quot;syscall trace&quot;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>用 extern 全局声明新的内核调用函数，并且在 syscalls 映射表中，加入从前面定义的编号到系统调用函数指针的映射</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// Prototypes for the functions that handle system calls.</span></span><br><span class="line"><span class="function"><span class="keyword">extern</span> uint64 <span class="title">sys_fork</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">extern</span> uint64 <span class="title">sys_exit</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">extern</span> uint64 <span class="title">sys_wait</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">extern</span> uint64 <span class="title">sys_pipe</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">extern</span> uint64 <span class="title">sys_read</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">extern</span> uint64 <span class="title">sys_kill</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">extern</span> uint64 <span class="title">sys_exec</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">extern</span> uint64 <span class="title">sys_fstat</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">extern</span> uint64 <span class="title">sys_chdir</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">extern</span> uint64 <span class="title">sys_dup</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">extern</span> uint64 <span class="title">sys_getpid</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">extern</span> uint64 <span class="title">sys_sbrk</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">extern</span> uint64 <span class="title">sys_sleep</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">extern</span> uint64 <span class="title">sys_uptime</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">extern</span> uint64 <span class="title">sys_open</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">extern</span> uint64 <span class="title">sys_write</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">extern</span> uint64 <span class="title">sys_mknod</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">extern</span> uint64 <span class="title">sys_unlink</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">extern</span> uint64 <span class="title">sys_link</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">extern</span> uint64 <span class="title">sys_mkdir</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">extern</span> uint64 <span class="title">sys_close</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">extern</span> uint64 <span class="title">sys_trace</span><span class="params">(<span class="keyword">void</span>)</span></span>; <span class="comment">// &lt;--- Here</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// An array mapping syscall numbers from syscall.h</span></span><br><span class="line"><span class="comment">// to the function that handles the system call.</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="title">uint64</span> <span class="params">(*syscalls[])</span><span class="params">(<span class="keyword">void</span>)</span> </span>= &#123;</span><br><span class="line">[SYS_fork]    sys_fork,</span><br><span class="line">[SYS_exit]    sys_exit,</span><br><span class="line">[SYS_wait]    sys_wait,</span><br><span class="line">[SYS_pipe]    sys_pipe,</span><br><span class="line">[SYS_read]    sys_read,</span><br><span class="line">[SYS_kill]    sys_kill,</span><br><span class="line">[SYS_exec]    sys_exec,</span><br><span class="line">[SYS_fstat]   sys_fstat,</span><br><span class="line">[SYS_chdir]   sys_chdir,</span><br><span class="line">[SYS_dup]     sys_dup,</span><br><span class="line">[SYS_getpid]  sys_getpid,</span><br><span class="line">[SYS_sbrk]    sys_sbrk,</span><br><span class="line">[SYS_sleep]   sys_sleep,</span><br><span class="line">[SYS_uptime]  sys_uptime,</span><br><span class="line">[SYS_open]    sys_open,</span><br><span class="line">[SYS_write]   sys_write,</span><br><span class="line">[SYS_mknod]   sys_mknod,</span><br><span class="line">[SYS_unlink]  sys_unlink,</span><br><span class="line">[SYS_link]    sys_link,</span><br><span class="line">[SYS_mkdir]   sys_mkdir,</span><br><span class="line">[SYS_close]   sys_close,</span><br><span class="line">[SYS_trace]   sys_trace, <span class="comment">// &lt;--- Here</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>在 <code>kernel/proc.h</code> 中給<code>proc</code> 结构体添加 <code>mask</code> 字段</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uint64 mask;</span><br></pre></td></tr></table></figure></li><li><p>在 <code>kernel/sysproc.c</code> 中添加 <code>sys_trace()</code> 函数，该函数用于实现新的 trace 系统调用。在该函数中，将传递给 trace 系统调用的参数保存到进程的 proc 结构中。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">uint64</span></span><br><span class="line"><span class="function"><span class="title">sys_trace</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> mask;</span><br><span class="line">  argint(<span class="number">0</span>, &amp;mask);</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">proc</span> *<span class="title">p</span> =</span> myproc();</span><br><span class="line">  p-&gt;mask = mask;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>修改 <code>kernel/proc.c</code> 中的 <code>fork()</code> 函数，以便将父进程的跟踪掩码复制到子进程中。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Create a new process, copying the parent.</span></span><br><span class="line"><span class="comment">// Sets up child kernel stack to return as if from fork() system call.</span></span><br><span class="line"><span class="function"><span class="keyword">int</span></span></span><br><span class="line"><span class="function"><span class="title">fork</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i, pid;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">proc</span> *<span class="title">np</span>;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">proc</span> *<span class="title">p</span> =</span> myproc();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Allocate process.</span></span><br><span class="line">  <span class="keyword">if</span>((np = allocproc()) == <span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Copy user memory from parent to child.</span></span><br><span class="line">  <span class="keyword">if</span>(uvmcopy(p-&gt;pagetable, np-&gt;pagetable, p-&gt;sz) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">    freeproc(np);</span><br><span class="line">    release(&amp;np-&gt;lock);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  np-&gt;sz = p-&gt;sz;</span><br><span class="line"></span><br><span class="line">  np-&gt;mask = p-&gt;mask;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// copy saved user registers.</span></span><br><span class="line">  *(np-&gt;trapframe) = *(p-&gt;trapframe);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Cause fork to return 0 in the child.</span></span><br><span class="line">  np-&gt;trapframe-&gt;a0 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// increment reference counts on open file descriptors.</span></span><br><span class="line">  <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; NOFILE; i++)</span><br><span class="line">    <span class="keyword">if</span>(p-&gt;ofile[i])</span><br><span class="line">      np-&gt;ofile[i] = filedup(p-&gt;ofile[i]);</span><br><span class="line">  np-&gt;cwd = idup(p-&gt;cwd);</span><br><span class="line"></span><br><span class="line">  safestrcpy(np-&gt;name, p-&gt;name, <span class="keyword">sizeof</span>(p-&gt;name));</span><br><span class="line"></span><br><span class="line">  pid = np-&gt;pid;</span><br><span class="line"></span><br><span class="line">  release(&amp;np-&gt;lock);</span><br><span class="line"></span><br><span class="line">  acquire(&amp;wait_lock);</span><br><span class="line">  np-&gt;parent = p;</span><br><span class="line">  release(&amp;wait_lock);</span><br><span class="line"></span><br><span class="line">  acquire(&amp;np-&gt;lock);</span><br><span class="line">  np-&gt;state = RUNNABLE;</span><br><span class="line">  release(&amp;np-&gt;lock);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> pid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>修改 <code>kernel/syscall.c</code> 中的 <code>syscall()</code> 函数，以在需要时输出跟踪信息。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span></span></span><br><span class="line"><span class="function"><span class="title">syscall</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> num;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">proc</span> *<span class="title">p</span> =</span> myproc();</span><br><span class="line"></span><br><span class="line">  num = p-&gt;trapframe-&gt;a7;</span><br><span class="line">  <span class="keyword">if</span>(num &gt; <span class="number">0</span> &amp;&amp; num &lt; NELEM(syscalls) &amp;&amp; syscalls[num]) &#123;</span><br><span class="line">    <span class="comment">// Use num to lookup the system call function for num, call it,</span></span><br><span class="line">    <span class="comment">// and store its return value in p-&gt;trapframe-&gt;a0</span></span><br><span class="line">    p-&gt;trapframe-&gt;a0 = syscalls[num]();</span><br><span class="line">    <span class="keyword">if</span> ((p-&gt;mask &gt;&gt; num) &amp;<span class="number">0b1</span>) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d: %s -&gt; %d\n&quot;</span>, </span><br><span class="line">            p-&gt;pid, syscalls_name[num], p-&gt;trapframe-&gt;a0);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %s: unknown sys call %d\n&quot;</span>,</span><br><span class="line">            p-&gt;pid, p-&gt;name, num);</span><br><span class="line">    p-&gt;trapframe-&gt;a0 = <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>实现 <code>user/trace.c</code> 程序。该程序应该在新的进程中调用 trace 系统调用，然后运行另一个程序，以便跟踪指定的系统调用。在实现 <code>user/trace.c</code> 时，您需要使用 <code>fork()</code> 和 <code>exec()</code> 系统调用来运行其他程序。</p></li></ol><h3 id="Answer">Answer</h3><ul><li>代码改动见 <a href="https://github.com/Misaka-9982-coder/6.S081-fa22/commit/ae04ca710cffb55e2b8cd217df1c6c15328cab44">commit</a></li></ul><h2 id="Sysinfo-moderate">Sysinfo (<a href="https://pdos.csail.mit.edu/6.S081/2022/labs/guidance.html">moderate</a>)</h2><blockquote><p>In this assignment you will add a system call, <code>sysinfo</code>, that collects information about the running system. The system call takes one argument: a pointer to a <code>struct sysinfo</code> (see <code>kernel/sysinfo.h</code>). The kernel should fill out the fields of this struct: the <code>freemem</code> field should be set to the number of bytes of free memory, and the <code>nproc</code> field should be set to the number of processes whose <code>state</code> is not <code>UNUSED</code>. We provide a test program <code>sysinfotest</code>; you pass this assignment if it prints “sysinfotest: OK”.</p></blockquote><ol><li><p>在 <code>kernel/sysinfo.h</code> 中声明 <code>struct sysinfo</code> 结构体，并包含两个字段： <code>uint64_t freemem</code> 和 <code>uint64_t nproc</code>.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sysinfo</span> &#123;</span></span><br><span class="line">  uint64 freemem;   <span class="comment">// amount of free memory (bytes)</span></span><br><span class="line">  uint64 nproc;     <span class="comment">// number of process</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p><code>usys.pl</code></p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">entry(<span class="string">&quot;fork&quot;</span>);</span><br><span class="line">entry(<span class="string">&quot;exit&quot;</span>);</span><br><span class="line">entry(<span class="string">&quot;wait&quot;</span>);</span><br><span class="line">entry(<span class="string">&quot;pipe&quot;</span>);</span><br><span class="line">entry(<span class="string">&quot;read&quot;</span>);</span><br><span class="line">entry(<span class="string">&quot;write&quot;</span>);</span><br><span class="line">entry(<span class="string">&quot;close&quot;</span>);</span><br><span class="line">entry(<span class="string">&quot;kill&quot;</span>);</span><br><span class="line">entry(<span class="string">&quot;exec&quot;</span>);</span><br><span class="line">entry(<span class="string">&quot;open&quot;</span>);</span><br><span class="line">entry(<span class="string">&quot;mknod&quot;</span>);</span><br><span class="line">entry(<span class="string">&quot;unlink&quot;</span>);</span><br><span class="line">entry(<span class="string">&quot;fstat&quot;</span>);</span><br><span class="line">entry(<span class="string">&quot;link&quot;</span>);</span><br><span class="line">entry(<span class="string">&quot;mkdir&quot;</span>);</span><br><span class="line">entry(<span class="string">&quot;chdir&quot;</span>);</span><br><span class="line">entry(<span class="string">&quot;dup&quot;</span>);</span><br><span class="line">entry(<span class="string">&quot;getpid&quot;</span>);</span><br><span class="line">entry(<span class="string">&quot;sbrk&quot;</span>);</span><br><span class="line">entry(<span class="string">&quot;sleep&quot;</span>);</span><br><span class="line">entry(<span class="string">&quot;uptime&quot;</span>);</span><br><span class="line">entry(<span class="string">&quot;trace&quot;</span>);</span><br><span class="line">entry(<span class="string">&quot;sysinfo&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p><code>user.h</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// system calls</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fork</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">exit</span><span class="params">(<span class="keyword">int</span>)</span> __<span class="title">attribute__</span><span class="params">((noreturn))</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">wait</span><span class="params">(<span class="keyword">int</span>*)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pipe</span><span class="params">(<span class="keyword">int</span>*)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">const</span> <span class="keyword">void</span>*, <span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">void</span>*, <span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">close</span><span class="params">(<span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">kill</span><span class="params">(<span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">exec</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>*, <span class="keyword">char</span>**)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">open</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>*, <span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mknod</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>*, <span class="keyword">short</span>, <span class="keyword">short</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">unlink</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>*)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fstat</span><span class="params">(<span class="keyword">int</span> fd, struct stat*)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">link</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>*, <span class="keyword">const</span> <span class="keyword">char</span>*)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mkdir</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>*)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">chdir</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>*)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dup</span><span class="params">(<span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getpid</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">char</span>* <span class="title">sbrk</span><span class="params">(<span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sleep</span><span class="params">(<span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">uptime</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">trace</span><span class="params">(<span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sysinfo</span>;</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sysinfo</span><span class="params">(struct sysinfo *)</span></span>;</span><br></pre></td></tr></table></figure></li><li><p>在 <code>kernel/syscall.h</code> 中添加一个名为 <code>sysinfo()</code> 的原型和一个新的系统调用号。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// System call numbers</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SYS_fork    1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SYS_exit    2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SYS_wait    3</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SYS_pipe    4</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SYS_read    5</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SYS_kill    6</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SYS_exec    7</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SYS_fstat   8</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SYS_chdir   9</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SYS_dup    10</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SYS_getpid 11</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SYS_sbrk   12</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SYS_sleep  13</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SYS_uptime 14</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SYS_open   15</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SYS_write  16</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SYS_mknod  17</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SYS_unlink 18</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SYS_link   19</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SYS_mkdir  20</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SYS_close  21</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SYS_trace  22</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SYS_sysinfo  23</span></span><br></pre></td></tr></table></figure></li><li><p>在 <code>kernel/sysproc.c</code> 中实现 <code>sys_sysinfo()</code> 函数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function">uint64</span></span><br><span class="line"><span class="function"><span class="title">sys_sysinfo</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">// user pointer to struct sysinfo</span></span><br><span class="line">  uint64 si_addr;</span><br><span class="line"></span><br><span class="line">  argaddr(<span class="number">0</span>, &amp;si_addr);</span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">sysinfo</span> <span class="title">sysinfo</span>;</span></span><br><span class="line">  sysinfo.freemem = free_mem_num();</span><br><span class="line">  sysinfo.nproc = num_of_processes();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (copyout(myproc()-&gt;pagetable, si_addr, (<span class="keyword">char</span> *)&amp;sysinfo, <span class="keyword">sizeof</span>(sysinfo)) &lt; <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>添加一个名为  <code>free_mem_num()</code> 的函数到  <code>kernel/kalloc.c</code>, 返回系统中空闲内存的字节数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 统计未使用内存</span></span><br><span class="line"><span class="comment">// 一页等于 4096 bytes</span></span><br><span class="line"><span class="function">uint64</span></span><br><span class="line"><span class="function"><span class="title">free_mem_num</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">run</span> *<span class="title">r</span>;</span></span><br><span class="line">  uint64 free_num = <span class="number">0</span>;</span><br><span class="line">  acquire(&amp;kmem.lock);</span><br><span class="line">  r = kmem.freelist;</span><br><span class="line">  <span class="keyword">while</span> (r) &#123;</span><br><span class="line">    free_num++;</span><br><span class="line">    r = r-&gt;next;</span><br><span class="line">  &#125;</span><br><span class="line">  release(&amp;kmem.lock);</span><br><span class="line">  <span class="keyword">return</span> free_num * PGSIZE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>添加一个名为  <code>num_of_processes()</code> 的函数到  <code>kernel/proc.c</code>, 返回状态不是 UNUSED 的进程数量。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// used by sysinfo</span></span><br><span class="line"><span class="function"><span class="keyword">int</span></span></span><br><span class="line"><span class="function"><span class="title">num_of_processes</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> nproc = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (struct proc *p = proc; p &lt; &amp;proc[NPROC]; p++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (p-&gt;state != UNUSED)</span><br><span class="line">      nproc++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> nproc;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在 <code>sysinfo()</code> 函数中，分别调用 <code>free_mem_num()</code> 和 <code>num_of_processes()</code> 函数来填充结构体 sysinfo 中的 freemem 和 nproc 字段。</p></li><li><p>使用 <code>copyout()</code> 函数将结构体 sysinfo 复制回用户空间。</p></li></ol><h3 id="Answer-2">Answer</h3><ul><li>代码改动见 <a href="https://github.com/Misaka-9982-coder/6.S081-fa22/commit/79a0f715798707c9a23f131d2fad2006b2c3a848">commit</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="OS" scheme="http://www.misaka-9982.com/tags/OS/"/>
    
    <category term="6.S081" scheme="http://www.misaka-9982.com/tags/6-S081/"/>
    
  </entry>
  
  <entry>
    <title>6.S081-Lab 1: Xv6 and Unix utilities</title>
    <link href="http://www.misaka-9982.com/2023/03/10/6-S081-Lab-1-Xv6-and-Unix-utilities/"/>
    <id>http://www.misaka-9982.com/2023/03/10/6-S081-Lab-1-Xv6-and-Unix-utilities/</id>
    <published>2023-03-09T16:06:35.000Z</published>
    <updated>2023-03-14T08:53:27.463Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul><li><p>官方材料：<a href="https://pdos.csail.mit.edu/6.S081/2021/labs/util.html">https://pdos.csail.mit.edu/6.S081/2021/labs/util.html</a></p></li><li><p>参考资料：</p><ul><li><p><a href="https://mit-public-courses-cn-translatio.gitbook.io/mit6-s081/">https://mit-public-courses-cn-translatio.gitbook.io/mit6-s081/</a></p></li><li><p><a href="https://th0ar.gitbooks.io/xv6-chinese/content/">https://th0ar.gitbooks.io/xv6-chinese/content/</a></p></li><li><p><a href="https://blog.miigon.net/posts/s081-ending/">https://blog.miigon.net/posts/s081-ending/</a></p></li><li><p><a href="https://wangchujiang.com/linux-command/">https://wangchujiang.com/linux-command/</a></p></li></ul></li></ul><h2 id="Boot-xv6-easy">Boot xv6 (<a href="https://pdos.csail.mit.edu/6.S081/2021/labs/guidance.html">easy</a>)</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> git://g.csail.mit.edu/xv6-labs-2021</span><br><span class="line">Cloning into <span class="string">&#x27;xv6-labs-2021&#x27;</span>...</span><br><span class="line">...</span><br><span class="line">$ <span class="built_in">cd</span> xv6-labs-2021</span><br><span class="line">$ git checkout util</span><br><span class="line">Branch <span class="string">&#x27;util&#x27;</span> <span class="built_in">set</span> up to track remote branch <span class="string">&#x27;util&#x27;</span> from <span class="string">&#x27;origin&#x27;</span>.</span><br><span class="line">Switched to a new branch <span class="string">&#x27;util&#x27;</span></span><br></pre></td></tr></table></figure><p>Build and run xv6:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$ make qemu</span><br><span class="line">riscv64-unknown-elf-gcc    -c -o kernel/entry.o kernel/entry.S</span><br><span class="line">riscv64-unknown-elf-gcc -Wall -Werror -O -fno-omit-frame-pointer -ggdb -DSOL_UTIL -MD -mcmodel=medany -ffreestanding -fno-common -nostdlib -mno-relax -I. -fno-stack-protector -fno-pie -no-pie   -c -o kernel/start.o kernel/start.c</span><br><span class="line">...  </span><br><span class="line">riscv64-unknown-elf-ld -z max-page-size=4096 -N -e main -Ttext 0 -o user/_zombie user/zombie.o user/ulib.o user/usys.o user/printf.o user/umalloc.o</span><br><span class="line">riscv64-unknown-elf-objdump -S user/_zombie &gt; user/zombie.asm</span><br><span class="line">riscv64-unknown-elf-objdump -t user/_zombie | sed <span class="string">&#x27;1,/SYMBOL TABLE/d; s/ .* / /; /^$/d&#x27;</span> &gt; user/zombie.sym</span><br><span class="line">mkfs/mkfs fs.img README  user/xargstest.sh user/_cat user/_echo user/_forktest user/_grep user/_init user/_kill user/_ln user/_ls user/_mkdir user/_rm user/_sh user/_stressfs user/_usertests user/_grind user/_wc user/_zombie </span><br><span class="line">nmeta 46 (boot, super, <span class="built_in">log</span> blocks 30 inode blocks 13, bitmap blocks 1) blocks 954 total 1000</span><br><span class="line">balloc: first 591 blocks have been allocated</span><br><span class="line">balloc: write bitmap block at sector 45</span><br><span class="line">qemu-system-riscv64 -machine virt -bios none -kernel kernel/kernel -m 128M -smp 3 -nographic -drive file=fs.img,<span class="keyword">if</span>=none,format=raw,id=x0 -device virtio-blk-device,drive=x0,bus=virtio-mmio-bus.0</span><br><span class="line"></span><br><span class="line">xv6 kernel is booting</span><br><span class="line"></span><br><span class="line">hart 2 starting</span><br><span class="line">hart 1 starting</span><br><span class="line">init: starting sh</span><br><span class="line">$ </span><br></pre></td></tr></table></figure><p><code>ls</code> 命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">$ ls</span><br><span class="line">.              1 1 1024</span><br><span class="line">..             1 1 1024</span><br><span class="line">README         2 2 2059</span><br><span class="line">xargstest.sh   2 3 93</span><br><span class="line">cat            2 4 24256</span><br><span class="line"><span class="built_in">echo</span>           2 5 23080</span><br><span class="line">forktest       2 6 13272</span><br><span class="line">grep           2 7 27560</span><br><span class="line">init           2 8 23816</span><br><span class="line"><span class="built_in">kill</span>           2 9 23024</span><br><span class="line">ln             2 10 22880</span><br><span class="line">ls             2 11 26448</span><br><span class="line">mkdir          2 12 23176</span><br><span class="line">rm             2 13 23160</span><br><span class="line">sh             2 14 41976</span><br><span class="line">stressfs       2 15 24016</span><br><span class="line">usertests      2 16 148456</span><br><span class="line">grind          2 17 38144</span><br><span class="line">wc             2 18 25344</span><br><span class="line">zombie         2 19 22408</span><br><span class="line">console        3 20 0</span><br></pre></td></tr></table></figure><p>xv6没有<code>ps</code>命令，<code>Ctrl-p</code>命令可以让kernel打印每个进程的信息</p><p>退出 <code>qemu </code>: <code>Ctrl-a x</code>.</p><h2 id="编程样例">编程样例</h2><p>在实现对应功能后，需要更新Makefile的UPROGS部分，例如实现了sleep.c后，要在UPROGS处追加：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$U/_sleep\</span><br></pre></td></tr></table></figure><ol><li><code>copy.c</code>:</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;kernel/types.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;kernel/stat.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;user/user.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span></span></span><br><span class="line"><span class="function"><span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> buf[<span class="number">64</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> n = read(<span class="number">0</span>, buf, <span class="keyword">sizeof</span>(buf));</span><br><span class="line">        <span class="keyword">if</span>(n &lt;= <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        write(<span class="number">1</span>, buf, n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>第一个参数是文件描述符，指向一个之前打开的文件。Shell会确保默认情况下，当一个程序启动时，文件描述符0连接到console的输入，文件描述符1连接到了console的输出。所以我可以通过这个程序看到console打印我的输入。当然，这里的程序会预期文件描述符已经被Shell打开并设置好。这里的0，1文件描述符是非常普遍的Unix风格，许多的Unix系统都会从文件描述符0读取数据，然后向文件描述符1写入数据。</p></li><li><p>read的第二个参数是指向某段内存的指针，程序可以通过指针对应的地址读取内存中的数据，这里的指针就是代码中的buf参数。在代码第10行，程序在栈里面申请了64字节的内存，并将指针保存在buf中，这样read可以将数据保存在这64字节中。</p></li><li><p>read的第三个参数是代码想读取的最大长度，sizeof(buf)表示，最多读取64字节的数据，所以这里的read最多只能从连接到文件描述符0的设备，也就是console中，读取64字节的数据。</p></li></ul><ol start="2"><li><code>open.c</code>:</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;kernel/types.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;user/user.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;kernel/fcntl.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span></span></span><br><span class="line"><span class="function"><span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> fd = open(<span class="string">&quot;output.txt&quot;</span>, O_WRONLY | O_CREATE);</span><br><span class="line">    write(fd, <span class="string">&quot;ooo\n&quot;</span>, <span class="number">4</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>代码中的第8行，执行了open系统调用，将文件名output.txt作为参数传入，第二个参数是一些标志位，用来告诉open系统调用在内核中的实现：我们将要创建并写入一个文件。open系统调用会返回一个新分配的文件描述符，这里的文件描述符是一个小的数字，可能是2，3，4或者其他的数字。</p></li><li><p>之后，这个文件描述符作为第一个参数被传到了write，write的第二个参数是数据的指针，第三个参数是要写入的字节数。数据被写入到了文件描述符对应的文件中。</p></li><li><p>文件描述符本质上对应了内核中的一个表单数据。内核维护了每个运行进程的状态，内核会为每一个运行进程保存一个表单，表单的key是文件描述符。这个表单让内核知道，每个文件描述符对应的实际内容是什么。这里比较关键的点是，每个进程都有自己独立的文件描述符空间，所以如果运行了两个不同的程序，对应两个不同的进程，如果它们都打开一个文件，它们或许可以得到相同数字的文件描述符，但是因为内核为每个进程都维护了一个独立的文件描述符空间，这里相同数字的文件描述符可能会对应到不同的文件。</p></li></ul><ol start="3"><li><code>fork.c</code>:</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;kernel/types.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;user/user.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span></span></span><br><span class="line"><span class="function"><span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pid;</span><br><span class="line">    pid = fork();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;fork() returned %d\n&quot;</span>, pid);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(pid == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;child\n&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;parent\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>fork会拷贝当前进程的内存，并创建一个新的进程，这里的内存包含了进程的指令和数据。之后，我们就有了两个拥有完全一样内存的进程。fork系统调用在两个进程中都会返回，在原始的进程中，fork系统调用会返回大于0的整数，这个是新创建进程的ID。而在新创建的进程中，fork系统调用会返回0。所以即使两个进程的内存是完全一样的，我们还是可以通过fork的返回值区分旧进程和新进程。</p></li><li><p>在第11行，你可以看到代码检查pid。如果pid等于0，那么这必然是子进程。在我们的例子中，调用进程通常称为父进程，父进程看到的pid必然大于0。所以父进程会打印“parent”，子进程会打印“child”。之后两个进程都会退出。</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ fork</span><br><span class="line">fork() returned 5</span><br><span class="line">parent</span><br><span class="line">$ fork() returned 0</span><br><span class="line">child</span><br></pre></td></tr></table></figure><ol start="4"><li><code>redirected.c</code>:</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;kernel/types.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;kernel/fcntl.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;user/user.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pid;</span><br><span class="line">    pid = fork();</span><br><span class="line">    <span class="keyword">if</span>(pid == <span class="number">0</span>) &#123;</span><br><span class="line">        close(<span class="number">1</span>);</span><br><span class="line">        open(<span class="string">&quot;output.txt&quot;</span>, O_WRONLY|O_CREATE);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">char</span> *argv[] = &#123;<span class="string">&quot;echo&quot;</span>, <span class="string">&quot;this&quot;</span>, <span class="string">&quot;is&quot;</span>, <span class="string">&quot;redirected&quot;</span>, <span class="string">&quot;echo&quot;</span>, <span class="number">0</span>&#125;;</span><br><span class="line">        exec(<span class="string">&quot;echo&quot;</span>, argv);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;exec failed!\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        wait((<span class="keyword">int</span>*) <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ redirected</span><br><span class="line">$ cat output.txt</span><br><span class="line">this is redirected <span class="built_in">echo</span></span><br></pre></td></tr></table></figure><h2 id="sleep-easy">sleep (<a href="https://pdos.csail.mit.edu/6.S081/2021/labs/guidance.html">easy</a>)</h2><blockquote><p>Implement the UNIX program <code>sleep</code> for xv6; your <code>sleep</code> should pause for a user-specified number of ticks. A tick is a notion of time defined by the xv6 kernel, namely the time between two interrupts from the timer chip. Your solution should be in the file <code>user/sleep.c</code>.</p></blockquote><p>Some hints:</p><ul><li>Before you start coding, read Chapter 1 of the <a href="https://pdos.csail.mit.edu/6.S081/2021/xv6/book-riscv-rev2.pdf">xv6 book</a>.</li><li>Look at some of the other programs in <code>user/</code> (e.g., <code>user/echo.c</code>, <code>user/grep.c</code>, and <code>user/rm.c</code>) to see how you can obtain the command-line arguments passed to a program.</li><li>If the user forgets to pass an argument, sleep should print an error message.</li><li>The command-line argument is passed as a string; you can convert it to an integer using <code>atoi</code> (see user/ulib.c).</li><li>Use the system call <code>sleep</code>.</li><li>See <code>kernel/sysproc.c</code> for the xv6 kernel code that implements the <code>sleep</code> system call (look for <code>sys_sleep</code>), <code>user/user.h</code> for the C definition of <code>sleep</code> callable from a user program, and <code>user/usys.S</code> for the assembler code that jumps from user code into the kernel for <code>sleep</code>.</li><li>Make sure <code>main</code> calls <code>exit()</code> in order to exit your program.</li><li>Add your <code>sleep</code> program to <code>UPROGS</code> in Makefile; once you’ve done that, <code>make qemu</code> will compile your program and you’ll be able to run it from the xv6 shell.</li><li>Look at Kernighan and Ritchie’s book <em>The C programming language (second edition)</em> (K&amp;R) to learn about C.</li></ul><p><code>sleep.c</code>:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;kernel/types.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;kernel/stat.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;user/user.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span></span></span><br><span class="line"><span class="function"><span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(argc &lt; <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="number">2</span>, <span class="string">&quot;Please enter a number!\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> time = atoi(argv[<span class="number">1</span>]);</span><br><span class="line">    sleep(time);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ sudo ./grade-lab-util sleep</span><br><span class="line">make: “kernel/kernel”已是最新。</span><br><span class="line">== Test sleep, no arguments == sleep, no arguments: OK (1.5s) </span><br><span class="line">== Test sleep, returns == sleep, returns: OK (0.9s) </span><br><span class="line">== Test sleep, makes syscall == sleep, makes syscall: OK (0.9s) </span><br></pre></td></tr></table></figure><h2 id="pingpong-easy">pingpong (<a href="https://pdos.csail.mit.edu/6.S081/2021/labs/guidance.html">easy</a>)</h2><blockquote><p>Write a program that uses UNIX system calls to ‘‘ping-pong’’ a byte between two processes over a pair of pipes, one for each direction. The parent should send a byte to the child; the child should print “<pid>: received ping”, where <pid> is its process ID, write the byte on the pipe to the parent, and exit; the parent should read the byte from the child, print “<pid>: received pong”, and exit. Your solution should be in the file <code>user/pingpong.c</code>.</p></blockquote><p>Some hints:</p><ul><li>Use <code>pipe</code> to create a pipe.</li><li>Use <code>fork</code> to create a child.</li><li>Use <code>read</code> to read from the pipe, and <code>write</code> to write to the pipe.</li><li>Use <code>getpid</code> to find the process ID of the calling process.</li><li>Add the program to <code>UPROGS</code> in Makefile.</li><li>User programs on xv6 have a limited set of library functions available to them. You can see the list in <code>user/user.h</code>; the source (other than for system calls) is in <code>user/ulib.c</code>, <code>user/printf.c</code>, and <code>user/umalloc.c</code>.</li></ul><p>管道参考资料：</p><ul><li><a href="https://blog.csdn.net/qq_42914528/article/details/82023408">https://blog.csdn.net/qq_42914528/article/details/82023408</a></li></ul><p>pipe 输入为长度为2的 int 数组 p， 其中 p[0] 为对应的输入文件描述符，p[1] 为对应的输出文件描述符</p><p>样例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> p[<span class="number">2</span>];</span><br><span class="line"><span class="keyword">char</span> *argv[<span class="number">2</span>];</span><br><span class="line">argv[<span class="number">0</span>] = <span class="string">&quot;wc&quot;</span>;</span><br><span class="line">argv[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">pipe(p);</span><br><span class="line"><span class="keyword">if</span>(fork() == <span class="number">0</span>) &#123;</span><br><span class="line">    close(<span class="number">0</span>);</span><br><span class="line">    dup(p[<span class="number">0</span>]);</span><br><span class="line">    close(p[<span class="number">0</span>]);</span><br><span class="line">    close(p[<span class="number">1</span>]);</span><br><span class="line">    exec(<span class="string">&quot;/bin/wc&quot;</span>, argv);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    close(p[<span class="number">0</span>]);</span><br><span class="line">    write(p[<span class="number">1</span>], <span class="string">&quot;hello world\n&quot;</span>, <span class="number">12</span>);</span><br><span class="line">    close(p[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>pingpong.c</code>:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;kernel/types.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;kernel/stat.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;user/user.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> END_READ   0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> END_WRITE  1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span></span></span><br><span class="line"><span class="function"><span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> p2c[<span class="number">2</span>], c2p[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">  pipe(p2c);  <span class="comment">// 创建用于 父进程 -&gt; 子进程 的管道</span></span><br><span class="line">  pipe(c2p);  <span class="comment">// 创建用于 子进程 -&gt; 父进程 的管道</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(fork() != <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">char</span> buf[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. 父进程 首先向 子进程 发送字节</span></span><br><span class="line">    <span class="keyword">if</span>(write(p2c[END_WRITE], <span class="string">&quot;!&quot;</span>, <span class="number">1</span>) != <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="built_in">fprintf</span>(<span class="number">2</span>, <span class="string">&quot;failed to write in parent\n&quot;</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    close(p2c[END_WRITE]);</span><br><span class="line">    wait(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 父进程 发送完成后，开始等待 子进程 的回复</span></span><br><span class="line">    <span class="keyword">if</span>(read(c2p[END_READ], buf, <span class="number">1</span>) != <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="number">2</span>, <span class="string">&quot;failed to read in parent&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5. 子进程 收到数据， read 返回， 输出 pong</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d: received pong\n&quot;</span>, getpid());</span><br><span class="line">    close(p2c[END_READ]);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">char</span> buf[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 子进程 读取管道， 收到 父进程 发送的字节数据</span></span><br><span class="line">    <span class="keyword">if</span>(read(p2c[END_READ], buf, <span class="number">1</span>) != <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="built_in">fprintf</span>(<span class="number">2</span>, <span class="string">&quot;failed to read in child\n&quot;</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    close(c2p[END_READ]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d: received ping\n&quot;</span>, getpid());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. 子进程 通过 子-&gt;父 管道，将字节送回 父进程</span></span><br><span class="line">    <span class="keyword">if</span>(write(c2p[END_WRITE], buf, <span class="number">1</span>) != <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="built_in">fprintf</span>(<span class="number">2</span>, <span class="string">&quot;failed to write in child\n&quot;</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    close(c2p[END_WRITE]);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该程序是一个基于进程间通信机制的简单 ping-pong 程序，实现了一个父进程向子进程发送 “!” 字节，子进程读取并输出 “received ping”，然后将同样的字节回送给父进程，最后父进程读取回送的字节并输出 “received pong”。</p><ol><li>父进程 首先向 子进程 发送字节</li><li>父进程 发送完成后，开始等待 子进程 的回复</li><li>子进程 读取管道， 收到 父进程 发送的字节数据</li><li>子进程 通过 子-&gt;父 管道，将字节送回 父进程</li><li>子进程 收到数据， read 返回， 输出 pong</li></ol><p>其中，使用 <code>pipe</code> 系统调用创建管道，使用 <code>fork</code> 系统调用创建子进程，<code>close</code> 系统调用关闭不需要的管道端口，<code>read</code> 系统调用从管道中读取字节，<code>write</code> 系统调用向管道中写入字节，使用 <code>wait</code> 系统调用等待子进程结束。</p><p>测试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo ./grade-lab-util pingpong</span><br><span class="line">make: “kernel/kernel”已是最新。</span><br><span class="line">== Test pingpong == pingpong: OK (1.0s) </span><br></pre></td></tr></table></figure><h2 id="primes-moderate-hard">primes (<a href="https://pdos.csail.mit.edu/6.S081/2021/labs/guidance.html">moderate</a>)/(<a href="https://pdos.csail.mit.edu/6.S081/2021/labs/guidance.html">hard</a>)</h2><blockquote><p>Write a concurrent version of prime sieve using pipes. This idea is due to Doug McIlroy, inventor of Unix pipes. The picture halfway down <a href="http://swtch.com/~rsc/thread/">this page</a> and the surrounding text explain how to do it. Your solution should be in the file <code>user/primes.c</code>.</p></blockquote><p>Your goal is to use <code>pipe</code> and <code>fork</code> to set up the pipeline. The first process feeds the numbers 2 through 35 into the pipeline. For each prime number, you will arrange to create one process that reads from its left neighbor over a pipe and writes to its right neighbor over another pipe. Since xv6 has limited number of file descriptors and processes, the first process can stop at 35.</p><p>Some hints:</p><ul><li>Be careful to close file descriptors that a process doesn’t need, because otherwise your program will run xv6 out of resources before the first process reaches 35.</li><li>Once the first process reaches 35, it should wait until the entire pipeline terminates, including all children, grandchildren, &amp;c. Thus the main primes process should only exit after all the output has been printed, and after all the other primes processes have exited.</li><li>Hint: <code>read</code> returns zero when the write-side of a pipe is closed.</li><li>It’s simplest to directly write 32-bit (4-byte) <code>int</code>s to the pipes, rather than using formatted ASCII I/O.</li><li>You should create the processes in the pipeline only as they are needed.</li><li>Add the program to <code>UPROGS</code> in Makefile.</li></ul><p>文档链接：<a href="https://swtch.com/~rsc/thread/">https://swtch.com/~rsc/thread/</a></p><p>多线程埃氏筛</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">p = get a number from left neighbor</span><br><span class="line">print p</span><br><span class="line">loop:</span><br><span class="line">    n = get a number from left neighbor</span><br><span class="line">    if (p does not divide n)</span><br><span class="line">        send n to right neighbor</span><br></pre></td></tr></table></figure><p>单线程埃氏筛CPP实现：</p><ul><li><code>primes</code>数组记录素数</li><li><code>st</code>数组标记数字是否为素数</li><li>每次遇到素数 <code>i</code> 则将范围 $[2 * i, n]$ 的 <code>i</code> 的倍数全部标记</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> primes[N], cnt;</span><br><span class="line"><span class="keyword">bool</span> st[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_primes</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i ++ )</span><br><span class="line">        <span class="keyword">if</span>(!st[i]) &#123;</span><br><span class="line">            primes[cnt ++ ] = i;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i + i; j &lt;= n; j += i)</span><br><span class="line">                st[j] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="built_in">get_primes</span>(n);</span><br><span class="line">    cout &lt;&lt; cnt &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cnt; i ++ ) cout &lt;&lt; primes[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>primes.c</code>:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;kernel/types.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;user/user.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> END_READ   0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> END_WRITE  1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span></span></span><br><span class="line"><span class="function"><span class="title">sieve</span><span class="params">(<span class="keyword">int</span> pipe_l[<span class="number">2</span>])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> prime, cur;</span><br><span class="line">  <span class="keyword">if</span>(read(pipe_l[END_READ], &amp;prime, <span class="keyword">sizeof</span>(prime)) != <span class="keyword">sizeof</span>(prime)) &#123;</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="number">2</span>, <span class="string">&quot;failed to read from the pipe_l\n&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;prime %d\n&quot;</span>, prime);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(read(pipe_l[END_READ], &amp;cur, <span class="keyword">sizeof</span>(cur)) == <span class="keyword">sizeof</span>(cur)) &#123;</span><br><span class="line">    <span class="keyword">int</span> pipe_r[<span class="number">2</span>];</span><br><span class="line">    pipe(pipe_r);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(fork() != <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(cur % prime == <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(write(pipe_r[END_WRITE], &amp;cur, <span class="keyword">sizeof</span>(cur)) != <span class="keyword">sizeof</span>(cur)) &#123;</span><br><span class="line">          <span class="built_in">fprintf</span>(<span class="number">2</span>, <span class="string">&quot;failed to write into the pipe_r&quot;</span>);</span><br><span class="line">          <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">while</span>(read(pipe_l[END_READ], &amp;cur, <span class="keyword">sizeof</span>(cur)) == <span class="keyword">sizeof</span>(cur));</span><br><span class="line"></span><br><span class="line">      close(pipe_r[END_WRITE]);</span><br><span class="line">      close(pipe_l[END_READ]);</span><br><span class="line"></span><br><span class="line">      wait(<span class="number">0</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      close(pipe_r[END_WRITE]);</span><br><span class="line">      close(pipe_l[END_READ]);</span><br><span class="line">      sieve(pipe_r);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span></span></span><br><span class="line"><span class="function"><span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> input[<span class="number">2</span>];</span><br><span class="line">  pipe(input);</span><br><span class="line">  <span class="keyword">int</span> start = <span class="number">2</span>, end = <span class="number">35</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(fork() != <span class="number">0</span>) &#123;</span><br><span class="line">    close(input[END_READ]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = start; i &lt;= end; i ++ ) &#123;</span><br><span class="line">      <span class="keyword">if</span>(write(input[END_WRITE], &amp;i, <span class="keyword">sizeof</span>(i)) != <span class="keyword">sizeof</span>(i)) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="number">2</span>, <span class="string">&quot;failed to write %d into the pipe in the parent&quot;</span>, i);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    close(input[END_WRITE]);</span><br><span class="line">    wait(<span class="number">0</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    close(input[END_WRITE]);</span><br><span class="line">    sieve(input);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码实现了一个简单的 Eratosthenes 筛法，用于找出一定范围内的所有素数。</p><p>在该程序中，使用了 <code>kernel/types.h</code> 和 <code>user/user.h</code> 两个头文件，其中 <code>types.h</code> 定义了一些基本的数据类型，<code>user.h</code> 定义了一些系统调用。</p><p>在 <code>main</code> 函数中，首先使用 <code>pipe</code> 系统调用创建一个管道，用于父子进程之间的通信。然后使用 <code>fork</code> 系统调用创建一个新的进程。在父进程中，关闭管道的读端，然后向管道写入一段整数序列（从 start 到 end）。在子进程中，关闭管道的写端，然后调用 <code>sieve</code> 函数，开始执行筛法。</p><p>在 <code>sieve</code> 函数中，首先从管道读入第一个质数 prime，并输出其值。然后在循环中读入管道中的下一个整数 cur，如果 cur 不是 prime 的倍数，则将其写入一个新的管道 pipe_r 中。然后继续从管道中读入下一个整数，直到读完所有整数。当读完所有整数后，关闭新的管道的写端和原管道的读端，等待子进程结束。</p><p>整个程序的逻辑比较简单，主要是父进程向管道中写入整数序列，子进程读取管道中的整数并执行筛法。在筛法过程中，每次从管道中读入一个质数，然后将不是质数的整数写入一个新的管道中。最后，当读完所有整数后，关闭管道并等待子进程结束。</p><p>测试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo ./grade-lab-util primes</span><br><span class="line">make: “kernel/kernel”已是最新。</span><br><span class="line">== Test primes == primes: OK (0.8s) </span><br></pre></td></tr></table></figure><h2 id="find-moderate">find (<a href="https://pdos.csail.mit.edu/6.S081/2021/labs/guidance.html">moderate</a>)</h2><blockquote><p>Write a simple version of the UNIX find program: find all the files in a directory tree with a specific name. Your solution should be in the file <code>user/find.c</code>.</p></blockquote><p>Some hints:</p><ul><li>Look at user/ls.c to see how to read directories.</li><li>Use recursion to allow find to descend into sub-directories.</li><li>Don’t recurse into “.” and “…”.</li><li>Changes to the file system persist across runs of qemu; to get a clean file system run make clean and then make qemu.</li><li>You’ll need to use C strings. Have a look at K&amp;R (the C book), for example Section 5.5.</li><li>Note that == does not compare strings like in Python. Use strcmp() instead.</li><li>Add the program to <code>UPROGS</code> in Makefile.</li></ul><p><code>stat.h</code>:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> T_DIR     1   <span class="comment">// Directory</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> T_FILE    2   <span class="comment">// File</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> T_DEVICE  3   <span class="comment">// Device</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stat</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> dev;     <span class="comment">// File system&#x27;s disk device//文件系统设备号</span></span><br><span class="line">  uint ino;    <span class="comment">// Inode number//Inode 值</span></span><br><span class="line">  <span class="keyword">short</span> type;  <span class="comment">// Type of file//文件类型</span></span><br><span class="line">  <span class="keyword">short</span> nlink; <span class="comment">// Number of links to file//文件被链接数</span></span><br><span class="line">  uint64 size; <span class="comment">// Size of file in bytes//文件大小</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>dirent</code>结构体:</p><p><code>inum</code>是说这个文件占了几个<code>inode</code>,<code>name</code>是这个文件的名字。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Directory is a file containing a sequence of dirent structures.</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DIRSIZ 14</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">dirent</span> &#123;</span></span><br><span class="line">  ushort inum;</span><br><span class="line">  <span class="keyword">char</span> name[DIRSIZ];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>ls.c</code>:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;kernel/types.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;kernel/stat.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;user/user.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;kernel/fs.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回 path 最后一个 ‘/’ 后的 字符串</span></span><br><span class="line"><span class="function"><span class="keyword">char</span> *</span></span><br><span class="line"><span class="function"><span class="title">fmtname</span><span class="params">(<span class="keyword">char</span> *path)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">char</span> buf[DIRSIZ + <span class="number">1</span>];</span><br><span class="line"><span class="keyword">char</span> *p;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Find first character after last slash.</span></span><br><span class="line"><span class="keyword">for</span> (p = path + <span class="built_in">strlen</span>(path); p &gt;= path &amp;&amp; *p != <span class="string">&#x27;/&#x27;</span>; p--)</span><br><span class="line">;</span><br><span class="line">p++;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Return blank-padded name.</span></span><br><span class="line"><span class="comment">// 多余空间用空格填充</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strlen</span>(p) &gt;= DIRSIZ)</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">memmove(buf, p, <span class="built_in">strlen</span>(p));</span><br><span class="line"><span class="built_in">memset</span>(buf + <span class="built_in">strlen</span>(p), <span class="string">&#x27; &#x27;</span>, DIRSIZ - <span class="built_in">strlen</span>(p));</span><br><span class="line"><span class="keyword">return</span> buf;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ls</span><span class="params">(<span class="keyword">char</span> *path)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">512</span>], *p;</span><br><span class="line"><span class="keyword">int</span> fd;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">dirent</span> <span class="title">de</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stat</span> <span class="title">st</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 打开 path 文件</span></span><br><span class="line"><span class="keyword">if</span> ((fd = open(path, <span class="number">0</span>)) &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="number">2</span>, <span class="string">&quot;ls: cannot open %s\n&quot;</span>, path);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回文件信息</span></span><br><span class="line"><span class="keyword">if</span> (fstat(fd, &amp;st) &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="number">2</span>, <span class="string">&quot;ls: cannot stat %s\n&quot;</span>, path);</span><br><span class="line">close(fd);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (st.type)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 文件</span></span><br><span class="line"><span class="keyword">case</span> T_FILE:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s %d %d %l\n&quot;</span>, fmtname(path), st.type, st.ino, st.size);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 目录</span></span><br><span class="line"><span class="keyword">case</span> T_DIR:</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strlen</span>(path) + <span class="number">1</span> + DIRSIZ + <span class="number">1</span> &gt; <span class="keyword">sizeof</span> buf)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;ls: path too long\n&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">strcpy</span>(buf, path);</span><br><span class="line">p = buf + <span class="built_in">strlen</span>(buf);</span><br><span class="line">*p++ = <span class="string">&#x27;/&#x27;</span>;</span><br><span class="line"><span class="keyword">while</span> (read(fd, &amp;de, <span class="keyword">sizeof</span>(de)) == <span class="keyword">sizeof</span>(de))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (de.inum == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">memmove(p, de.name, DIRSIZ);</span><br><span class="line">p[DIRSIZ] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (stat(buf, &amp;st) &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;ls: cannot stat %s\n&quot;</span>, buf);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s %d %d %d\n&quot;</span>, fmtname(buf), st.type, st.ino, st.size);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">close(fd);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (argc &lt; <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">ls(<span class="string">&quot;.&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; argc; i++)</span><br><span class="line">ls(argv[i]);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>ls 命令用于列出指定目录下的文件和子目录信息。该代码实现了一个简化版本的 ls 命令，能够列出指定目录下的文件和子目录信息，并打印文件的类型、inode 号和大小等信息。</p><p>该程序接受一个或多个参数，每个参数表示要列出信息的目录或文件路径。如果没有传递参数，则默认列出当前目录下的文件和子目录信息。</p><p>在程序中，ls() 函数用于列出指定路径下的文件和子目录信息，具体实现如下：</p><ol><li><p>首先使用 open() 函数打开指定路径的文件或目录，获取文件描述符。</p></li><li><p>使用 fstat() 函数获取文件或目录的元信息（包括类型、inode 号和大小等）。</p></li><li><p>根据文件或目录的类型分别处理：</p></li></ol><ul><li>如果是文件或设备，则打印文件名、类型、inode 号和大小等信息。</li><li>如果是目录，则递归读取目录中的子目录和文件，并对其进行处理。对于每个子目录或文件，也会打印文件名、类型、inode 号和大小等信息。</li></ul><ol start="4"><li>使用 close() 函数关闭文件描述符。</li></ol><p>另外，fmtname() 函数用于从完整路径中获取文件名，以便在输出信息中使用。该函数的实现过程是找到路径中最后一个斜线后面的字符，并将其复制到一个缓冲区中。</p><p>main() 函数用于解析命令行参数，调用 ls() 函数列出指定路径下的文件和子目录信息。</p><p><code>find.c</code>:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;kernel/types.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;kernel/stat.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;user/user.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;kernel/fs.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span></span></span><br><span class="line"><span class="function"><span class="title">find</span><span class="params">(<span class="keyword">char</span> *path, <span class="keyword">char</span> *file)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> buf[<span class="number">512</span>], *p;</span><br><span class="line">  <span class="keyword">int</span> fd;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">dirent</span> <span class="title">de</span>;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">stat</span> <span class="title">st</span>;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ((fd = open(path, <span class="number">0</span>)) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="number">2</span>, <span class="string">&quot;find: cannot open %s\n&quot;</span>, path);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (fstat(fd, &amp;st) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="number">2</span>, <span class="string">&quot;find: cannot stat %s\n&quot;</span>, path);</span><br><span class="line">    close(fd);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(<span class="built_in">strlen</span>(path) + <span class="number">1</span> + DIRSIZ + <span class="number">1</span> &gt; <span class="keyword">sizeof</span> buf)&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;find: path too long\n&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">strcpy</span>(buf, path);</span><br><span class="line">  p = buf+<span class="built_in">strlen</span>(buf);</span><br><span class="line">  *p++ = <span class="string">&#x27;/&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span>(read(fd, &amp;de, <span class="keyword">sizeof</span>(de)) == <span class="keyword">sizeof</span>(de))&#123;</span><br><span class="line">    <span class="keyword">if</span>(de.inum == <span class="number">0</span> || <span class="built_in">strcmp</span>(de.name, <span class="string">&quot;.&quot;</span>) == <span class="number">0</span> || <span class="built_in">strcmp</span>(de.name, <span class="string">&quot;..&quot;</span>) == <span class="number">0</span>)</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    memmove(p, de.name, DIRSIZ);</span><br><span class="line">    p[DIRSIZ] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(stat(buf, &amp;st) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;find: cannot stat %s\n&quot;</span>, buf);</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(st.type == T_DIR)&#123;</span><br><span class="line">      find(buf, file);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (st.type == T_FILE)&#123;</span><br><span class="line">      <span class="keyword">if</span>(<span class="built_in">strcmp</span>(de.name, file) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, buf);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  close(fd);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span></span></span><br><span class="line"><span class="function"><span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (argc != <span class="number">3</span>)&#123;</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="number">2</span>, <span class="string">&quot;Usage: find &lt;dir&gt; &lt;file&gt;...\n&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  find(argv[<span class="number">1</span>], argv[<span class="number">2</span>]);</span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码实现了一个命令行工具 <code>find</code>，用于在指定目录下查找指定文件。</p><p>首先，包含了四个头文件 <code>kernel/types.h</code>、<code>kernel/stat.h</code>、<code>user/user.h</code> 和 <code>kernel/fs.h</code>，分别定义了一些基本数据类型、文件状态、系统调用和文件系统相关的结构体和宏。其中 <code>find</code> 函数通过递归实现了对目录的遍历，并通过调用 <code>stat</code> 系统调用获取文件状态信息。</p><p>在 <code>main</code> 函数中，首先判断命令行参数数量是否正确。如果不正确，则输出错误信息并退出；否则调用 <code>find</code> 函数进行查找。</p><p>在 <code>find</code> 函数中，首先通过调用 <code>open</code> 和 <code>fstat</code> 系统调用打开目录并获取其状态信息。然后通过循环遍历目录中的所有文件，对于每一个文件，首先判断是否为当前目录或父目录，如果不是，则获取其完整路径，并通过调用 <code>stat</code> 系统调用获取其状态信息。如果是目录，则递归调用 <code>find</code> 函数继续查找；如果是指定的文件，则输出其完整路径。</p><p>整个程序的逻辑比较复杂，通过系统调用和文件操作实现了一个较为复杂的命令行工具。这个例子也展示了如何使用文件系统相关的结构体和宏，以及如何通过递归遍历目录来实现文件查找功能。</p><p>测试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ sudo ./grade-lab-util find </span><br><span class="line">make: “kernel/kernel”已是最新。</span><br><span class="line">== Test find, <span class="keyword">in</span> current directory == find, <span class="keyword">in</span> current directory: OK (1.3s) </span><br><span class="line">== Test find, recursive == find, recursive: OK (1.1s) </span><br></pre></td></tr></table></figure><h2 id="xargs-moderate">xargs (<a href="https://pdos.csail.mit.edu/6.S081/2021/labs/guidance.html">moderate</a>)</h2><blockquote><p>Write a simple version of the UNIX xargs program: read lines from the standard input and run a command for each line, supplying the line as arguments to the command. Your solution should be in the file <code>user/xargs.c</code>.</p></blockquote><p>Some hints:</p><ul><li>Use <code>fork</code> and <code>exec</code> to invoke the command on each line of input. Use <code>wait</code> in the parent to wait for the child to complete the command.</li><li>To read individual lines of input, read a character at a time until a newline (‘\n’) appears.</li><li>kernel/param.h declares MAXARG, which may be useful if you need to declare an argv array.</li><li>Add the program to <code>UPROGS</code> in Makefile.</li><li>Changes to the file system persist across runs of qemu; to get a clean file system run make clean and then make qemu.</li></ul><p><code>xargs</code>效果示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> hello too | xargs <span class="built_in">echo</span> <span class="built_in">bye</span></span><br><span class="line"><span class="built_in">bye</span> hello too</span><br><span class="line">$</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;1\n2&quot;</span> | xargs -n 1 <span class="built_in">echo</span> line</span><br><span class="line">line 1</span><br><span class="line">line 2</span><br><span class="line">$</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ find . b | xargs grep hello</span><br></pre></td></tr></table></figure><p><code>xargs</code>命令介绍：</p><ul><li><a href="https://wangchujiang.com/linux-command/c/xargs.html">https://wangchujiang.com/linux-command/c/xargs.html</a></li><li><a href="http://www.ruanyifeng.com/blog/2019/08/xargs-tutorial.html">http://www.ruanyifeng.com/blog/2019/08/xargs-tutorial.html</a></li></ul><p>整体思路：</p><ul><li>将 <code>xargs</code> 命令传入的参数保存至数组，形式为<code>cmd, arg[0], … , arg[k - 1]</code>；</li><li>解析输入参数，根据 <code>\n</code> 将参数划分至多行；</li><li>对每行参数根据空格划分，更新参数数组为 <code>cmd, arg[0], … , arg[k - 1], arg[k], … , arg[k + l - 1]</code>；</li><li>利用 <code>exec</code> 调用函数；</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;kernel/types.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;kernel/stat.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;user/user.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;kernel/param.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span></span></span><br><span class="line"><span class="function"><span class="title">readline</span><span class="params">(<span class="keyword">char</span> *new_argv[MAXARG], <span class="keyword">int</span> cur)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> buf[<span class="number">1024</span>];</span><br><span class="line">  <span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span>(read(<span class="number">0</span>, buf + n, <span class="number">1</span>)) &#123;</span><br><span class="line">    <span class="keyword">if</span>(n == <span class="number">1023</span>) &#123;</span><br><span class="line">      <span class="built_in">fprintf</span>(<span class="number">2</span>, <span class="string">&quot;the argument is too long...\n&quot;</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(buf[n] == <span class="string">&#x27;\n&#x27;</span>) <span class="keyword">break</span>;</span><br><span class="line">    n ++ ;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  buf[n] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">  <span class="keyword">if</span>(n == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> offset = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span>(offset &lt; n) &#123;</span><br><span class="line">    new_argv[cur ++ ] = buf + offset;</span><br><span class="line">    <span class="keyword">while</span>(buf[offset] != <span class="string">&#x27; &#x27;</span> &amp;&amp; offset &lt; n) &#123;</span><br><span class="line">      offset ++ ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(buf[offset] == <span class="string">&#x27; &#x27;</span> &amp;&amp; offset &lt; n) &#123;</span><br><span class="line">      buf[offset ++ ] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> cur;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span></span></span><br><span class="line"><span class="function"><span class="title">run</span><span class="params">(<span class="keyword">char</span> *cmd, <span class="keyword">char</span> *new_argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(fork() == <span class="number">0</span>) &#123;</span><br><span class="line">exec(cmd, new_argv);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span></span></span><br><span class="line"><span class="function"><span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (argc &lt; <span class="number">2</span>) &#123;</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="number">2</span>, <span class="string">&quot;Usage: xargs command (arg ...)\n&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">char</span> *cmd = <span class="built_in">malloc</span>(<span class="built_in">strlen</span>(argv[<span class="number">1</span>]) + <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">char</span> *new_argv[MAXARG];</span><br><span class="line">  <span class="built_in">strcpy</span>(cmd, argv[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; argc; i ++ ) &#123;</span><br><span class="line">    new_argv[i - <span class="number">1</span>] = <span class="built_in">malloc</span>(<span class="built_in">strlen</span>(argv[i]) + <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">strcpy</span>(new_argv[i - <span class="number">1</span>], argv[i]);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> cur = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span>((cur = readline(new_argv, argc - <span class="number">1</span>)) != <span class="number">0</span>) &#123;</span><br><span class="line">    new_argv[cur] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    run(cmd, new_argv);</span><br><span class="line"></span><br><span class="line">    wait(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码实现了一个类似于 Linux 命令 xargs 的工具，用于将输入作为命令行参数传递给指定的命令。</p><p>在该程序中，使用了 <code>kernel/types.h</code>、<code>kernel/stat.h</code>、<code>user/user.h</code> 和 <code>kernel/param.h</code> 四个头文件，其中 <code>types.h</code> 和 <code>stat.h</code> 定义了一些基本的数据类型和文件状态相关的结构体，<code>user.h</code> 定义了一些系统调用，<code>param.h</code> 定义了一些系统参数。</p><p>在 <code>main</code> 函数中，首先判断命令行参数数量是否正确。如果参数数量不正确，则输出错误信息并退出。然后，根据命令行参数分配相应的内存空间，分别存储命令和参数，然后循环读取标准输入，并将输入作为参数传递给命令。</p><p>在 <code>readline</code> 函数中，通过循环读取标准输入，逐字符读入命令行参数，当读入到换行符时停止读取。读取完成后，将读入的参数分割成一个个独立的字符串，并存储在 <code>new_argv</code> 数组中，然后返回当前参数个数。</p><p>在 <code>run</code> 函数中，使用 <code>fork</code> 系统调用创建一个新的进程，并在子进程中执行指定的命令，并将参数传递给命令。然后在父进程中等待子进程执行完毕。</p><p>整个程序的逻辑比较简单，主要是读取标准输入并将输入作为命令行参数传递给指定的命令。</p><p>测试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo ./grade-lab-util xargs</span><br><span class="line">make: “kernel/kernel”已是最新。</span><br><span class="line">== Test xargs == xargs: OK (0.7s) </span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">$ vim time.txt <span class="comment"># 写上自己花在这个 Lab 多少个小时的时间</span></span><br><span class="line">$ make grade</span><br><span class="line">== Test sleep, no arguments == </span><br><span class="line">$ make qemu-gdb</span><br><span class="line">sleep, no arguments: OK (2.5s) </span><br><span class="line">== Test sleep, returns == </span><br><span class="line">$ make qemu-gdb</span><br><span class="line">sleep, returns: OK (0.4s) </span><br><span class="line">== Test sleep, makes syscall == </span><br><span class="line">$ make qemu-gdb</span><br><span class="line">sleep, makes syscall: OK (1.1s) </span><br><span class="line">== Test pingpong == </span><br><span class="line">$ make qemu-gdb</span><br><span class="line">pingpong: OK (0.9s) </span><br><span class="line">== Test primes == </span><br><span class="line">$ make qemu-gdb</span><br><span class="line">primes: OK (1.1s) </span><br><span class="line">== Test find, <span class="keyword">in</span> current directory == </span><br><span class="line">$ make qemu-gdb</span><br><span class="line">find, <span class="keyword">in</span> current directory: OK (1.0s) </span><br><span class="line">== Test find, recursive == </span><br><span class="line">$ make qemu-gdb</span><br><span class="line">find, recursive: OK (1.1s) </span><br><span class="line">== Test xargs == </span><br><span class="line">$ make qemu-gdb</span><br><span class="line">xargs: OK (1.1s) </span><br><span class="line">== Test time == </span><br><span class="line">time: OK </span><br><span class="line">Score: 100/100</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="OS" scheme="http://www.misaka-9982.com/tags/OS/"/>
    
    <category term="6.S081" scheme="http://www.misaka-9982.com/tags/6-S081/"/>
    
  </entry>
  
  <entry>
    <title>6.S081环境配置及参考资料</title>
    <link href="http://www.misaka-9982.com/2023/03/09/6-S081%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E5%8F%8A%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/"/>
    <id>http://www.misaka-9982.com/2023/03/09/6-S081%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E5%8F%8A%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/</id>
    <published>2023-03-09T10:55:59.000Z</published>
    <updated>2023-03-16T15:26:47.225Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="参考资料">参考资料</h2><ul><li><p>官方文档：<a href="https://pdos.csail.mit.edu/6.828/2020/schedule.html">https://pdos.csail.mit.edu/6.828/2020/schedule.html</a></p></li><li><p>官方指导：<a href="https://pdos.csail.mit.edu/6.S081/2021/labs/guidance.html">https://pdos.csail.mit.edu/6.S081/2021/labs/guidance.html</a></p></li><li><p>中文文档：<a href="https://mit-public-courses-cn-translatio.gitbook.io/mit6-s081/">https://mit-public-courses-cn-translatio.gitbook.io/mit6-s081/</a></p></li><li><p><a href="http://doraemonzzz.com/tags/6-S081/">doraemonzzz</a></p></li><li><p><a href="http://xv6.dgs.zone/">http://xv6.dgs.zone/</a></p></li><li><p><a href="https://ithelp.ithome.com.tw/m/users/20138181/ironman/5395">https://ithelp.ithome.com.tw/m/users/20138181/ironman/5395</a></p></li><li><p><a href="https://www.zaom.cc/public-class/mit-6s081/">https://www.zaom.cc/public-class/mit-6s081/</a></p></li><li><p><a href="https://blog.miigon.net/tags/operating-system/">Miigon’s blog</a></p></li><li><p><a href="https://www.bilibili.com/video/BV1mK411S7N9/">HITSZ操作系统课程组讲解XV6（一）启动过程</a></p></li><li><p><a href="https://www.bilibili.com/video/BV1ge4y1J7Je/">HITSZ操作系统课程组讲解XV6（二）进程管理</a></p></li><li><p><a href="https://www.bilibili.com/video/BV1Te4y1i77z/">HITSZ操作系统课程组讲解XV6（三）内存管理</a></p></li></ul><h2 id="安装XV6">安装XV6</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt-get update</span><br><span class="line">sudo apt-get install git build-essential gdb-multiarch qemu-system-misc gcc-riscv64-linux-gnu binutils-riscv64-linux-gnu </span><br></pre></td></tr></table></figure><blockquote><p>The latest xv6 source and text are available via</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;git <span class="built_in">clone</span> git://github.com/mit-pdos/xv6-riscv.git</span><br></pre></td></tr></table></figure><p>and</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;git <span class="built_in">clone</span> git://github.com/mit-pdos/xv6-riscv-book.git</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> xv6-riscv</span><br><span class="line">make qemu</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/62c76a52328448d5a76448a1fe4c5675.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATUlOR2dvUw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt=""></p><p>安装成功</p><h2 id="指针预备知识">指针预备知识</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">4</span>];</span><br><span class="line">    <span class="keyword">int</span> *b = <span class="built_in">malloc</span>(<span class="number">16</span>);</span><br><span class="line">    <span class="keyword">int</span> *c;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;1: a = %p, b = %p, c = %p\n&quot;</span>, a, b, c);</span><br><span class="line"></span><br><span class="line">    c = a;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">a[i] = <span class="number">100</span> + i;</span><br><span class="line">    c[<span class="number">0</span>] = <span class="number">200</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;2: a[0] = %d, a[1] = %d, a[2] = %d, a[3] = %d\n&quot;</span>,</span><br><span class="line">   a[<span class="number">0</span>], a[<span class="number">1</span>], a[<span class="number">2</span>], a[<span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line">    c[<span class="number">1</span>] = <span class="number">300</span>;</span><br><span class="line">    *(c + <span class="number">2</span>) = <span class="number">301</span>;</span><br><span class="line">    <span class="number">3</span>[c] = <span class="number">302</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;3: a[0] = %d, a[1] = %d, a[2] = %d, a[3] = %d\n&quot;</span>,</span><br><span class="line">   a[<span class="number">0</span>], a[<span class="number">1</span>], a[<span class="number">2</span>], a[<span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line">    c = c + <span class="number">1</span>;</span><br><span class="line">    *c = <span class="number">400</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;4: a[0] = %d, a[1] = %d, a[2] = %d, a[3] = %d\n&quot;</span>,</span><br><span class="line">   a[<span class="number">0</span>], a[<span class="number">1</span>], a[<span class="number">2</span>], a[<span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line">    c = (<span class="keyword">int</span> *) ((<span class="keyword">char</span> *) c + <span class="number">1</span>);</span><br><span class="line">    *c = <span class="number">500</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;5: a[0] = %d, a[1] = %d, a[2] = %d, a[3] = %d\n&quot;</span>,</span><br><span class="line">   a[<span class="number">0</span>], a[<span class="number">1</span>], a[<span class="number">2</span>], a[<span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line">    b = (<span class="keyword">int</span> *) a + <span class="number">1</span>;</span><br><span class="line">    c = (<span class="keyword">int</span> *) ((<span class="keyword">char</span> *) a + <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;6: a = %p, b = %p, c = %p\n&quot;</span>, a, b, c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> ac, <span class="keyword">char</span> **av)</span> </span>&#123;</span><br><span class="line">    f();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="GDB-调试">GDB 调试</h2><ol><li><p>打开两个终端窗口</p></li><li><p>在第一个窗口中输入<code>make qemu-gdb</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*** Now run <span class="string">&#x27;gdb&#x27;</span> <span class="keyword">in</span> another window. qemu-system-riscv64 -machine virt -bios none -kernel kernel/kernel -m 128M -smp 3 -nographic -drive file=fs.img,<span class="keyword">if</span>=none,format=raw,id=x0 -device virtio-blk-device,drive=x0,bus=virtio-mmio-bus.0 -S -gdb tcp::25500</span><br></pre></td></tr></table></figure></li><li><p>在第二个窗口中，修改自己 <code>home</code> 目录下的 <code>.gdbinit</code> 文件，允许 <code>gdb</code> 在<code>xv6-riscv</code>这个目录启动的时候，加载该文件夹下的 <code>.gdbinit</code> 文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;add-auto-load-safe-path YOUR_PATH/xv6-riscv/.gdbinit &quot;</span> &gt;&gt; ~/.gdbinit</span><br></pre></td></tr></table></figure></li><li><p>输入<code>gdb-multiarch</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;add-auto-load-safe-path /home/ubuntu/xv6-riscv/.gdbinit &quot;</span> &gt;&gt; ~/.gdbinit</span><br><span class="line">$ gdb-multiarch                                                                                             </span><br><span class="line">GNU gdb (Ubuntu 9.2-0ubuntu1~20.04) 9.2</span><br><span class="line">Copyright (C) 2020 Free Software Foundation, Inc.</span><br><span class="line">License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.ht</span><br><span class="line">ml&gt;</span><br><span class="line">This is free software: you are free to change and redistribute it.</span><br><span class="line">There is NO WARRANTY, to the extent permitted by law.</span><br><span class="line">Type <span class="string">&quot;show copying&quot;</span> and <span class="string">&quot;show warranty&quot;</span> <span class="keyword">for</span> details.</span><br><span class="line">This GDB was configured as <span class="string">&quot;x86_64-linux-gnu&quot;</span>.</span><br><span class="line">Type <span class="string">&quot;show configuration&quot;</span> <span class="keyword">for</span> configuration details.</span><br><span class="line">For bug reporting instructions, please see:</span><br><span class="line">&lt;http://www.gnu.org/software/gdb/bugs/&gt;.</span><br><span class="line">Find the GDB manual and other documentation resources online at:</span><br><span class="line">    &lt;http://www.gnu.org/software/gdb/documentation/&gt;.</span><br><span class="line"></span><br><span class="line">For <span class="built_in">help</span>, <span class="built_in">type</span> <span class="string">&quot;help&quot;</span>.</span><br><span class="line">Type <span class="string">&quot;apropos word&quot;</span> to search <span class="keyword">for</span> commands related to <span class="string">&quot;word&quot;</span>.</span><br><span class="line">The target architecture is assumed to be riscv:rv64</span><br><span class="line">warning: No executable has been specified and target does not support</span><br><span class="line">determining executable automatically.  Try using the <span class="string">&quot;file&quot;</span> <span class="built_in">command</span>.</span><br><span class="line">0x0000000000001000 <span class="keyword">in</span> ?? ()</span><br><span class="line">(gdb)</span><br></pre></td></tr></table></figure></li></ol><ul><li><strong>给代码打断点</strong> 简单来说，就是以下几步：</li></ul><ol><li><code>file user/_ls</code></li><li><code>b main</code></li><li><code>c</code></li><li>之后就是正常的<code>GDB</code> 使用流程了</li></ol><p>FINALLY：</p><p><strong>第二个窗口：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">(gdb) file user/_ls</span><br><span class="line">Reading symbols from user/_ls...</span><br><span class="line">(gdb) b main</span><br><span class="line">Breakpoint 1 at 0x27a: file user/ls.c, line 75.</span><br><span class="line">(gdb) c</span><br><span class="line">Continuing.</span><br><span class="line">[Switching to Thread 1.3]</span><br><span class="line"></span><br><span class="line">Thread 3 hit Breakpoint 1, main (argc=0, argv=0x6c &lt;fmtname+108&gt;)</span><br><span class="line">    at user/ls.c:75</span><br><span class="line">75      &#123;</span><br><span class="line">(gdb)</span><br></pre></td></tr></table></figure><p><strong>第一个窗口</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(......)</span><br><span class="line">xv6 kernel is booting                                        </span><br><span class="line"></span><br><span class="line">hart 1 starting                                                  </span><br><span class="line">hart 2 starting                                                  </span><br><span class="line">init: starting sh                                                </span><br><span class="line">$ ls</span><br><span class="line">(等待 gdb 发送 <span class="built_in">continue</span> 信号)</span><br></pre></td></tr></table></figure><ol start="4"><li>之后我们就可以正常地通过 <code>GDB</code> 调试程序啦~</li></ol><p><img src="https://img-blog.csdnimg.cn/904a64086a9b42f3a72b7be439c9ea53.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATUlOR2dvUw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt=""></p><h2 id="VSCode-调试">VSCode 调试</h2><ul><li><a href="https://www.515code.com/posts/r1eiw7kt/#1-4-VSCode%E8%B0%83%E8%AF%95">https://www.515code.com/posts/r1eiw7kt/#1-4-VSCode调试</a></li></ul><p>比较推荐，功能更全。</p><p>首先在xv6-labs-2021目录下创建.vscode文件夹，在这个文件夹下新建launch.json、tasks.json，内容分别如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// launch.json</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;0.2.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;configurations&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;xv6debug&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;cppdbg&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;request&quot;</span>: <span class="string">&quot;launch&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;program&quot;</span>: <span class="string">&quot;$&#123;workspaceFolder&#125;/kernel/kernel&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;stopAtEntry&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;cwd&quot;</span>: <span class="string">&quot;$&#123;workspaceFolder&#125;&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;miDebuggerServerAddress&quot;</span>: <span class="string">&quot;127.0.0.1:25000&quot;</span>, <span class="comment">//见.gdbinit 中 target remote xxxx:xx</span></span><br><span class="line">            <span class="attr">&quot;miDebuggerPath&quot;</span>: <span class="string">&quot;/usr/bin/gdb-multiarch&quot;</span>, <span class="comment">// which gdb-multiarch</span></span><br><span class="line">            <span class="attr">&quot;MIMode&quot;</span>: <span class="string">&quot;gdb&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;preLaunchTask&quot;</span>: <span class="string">&quot;xv6build&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// tasks.json</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;2.0.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;options&quot;</span>: &#123; <span class="comment">//指定make qemu的执行位置</span></span><br><span class="line">        <span class="attr">&quot;cwd&quot;</span>: <span class="string">&quot;$&#123;workspaceFolder&#125;&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;tasks&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;label&quot;</span>: <span class="string">&quot;xv6build&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;shell&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;isBackground&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;command&quot;</span>: <span class="string">&quot;make qemu-gdb&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;problemMatcher&quot;</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">&quot;pattern&quot;</span>: [</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="attr">&quot;regexp&quot;</span>: <span class="string">&quot;.&quot;</span>,</span><br><span class="line">                            <span class="attr">&quot;file&quot;</span>: <span class="number">1</span>,</span><br><span class="line">                            <span class="attr">&quot;location&quot;</span>: <span class="number">2</span>,</span><br><span class="line">                            <span class="attr">&quot;message&quot;</span>: <span class="number">3</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    ],</span><br><span class="line">                    <span class="attr">&quot;background&quot;</span>: &#123;</span><br><span class="line">                        <span class="attr">&quot;beginsPattern&quot;</span>: <span class="string">&quot;.*Now run &#x27;gdb&#x27; in another window.&quot;</span>,</span><br><span class="line">                        <span class="attr">&quot;endsPattern&quot;</span>: <span class="string">&quot;.&quot;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">&quot;group&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;kind&quot;</span>: <span class="string">&quot;build&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;isDefault&quot;</span>: <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后进行调试测试，我们可以找到 kernel/main.c 下的第13行，打一个断点，然后按F5。</p><p>错误1：如果出现 /Program path ‘xv6-labs-2021/kernel/kernel’ is missing or invalid 错误，先不用管，等待终端的gdb跑起来。</p><p>错误2：如果出现 Unexpected GDB output from command “-target-select remote 127.0.0.1:25000”. Remote communication error. Target disconnected.: Connection reset by peer. 错误，需要在xv6-labs-2021下找到.gdbinit文件，注释掉target remote这行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">set confirm off</span><br><span class="line">set architecture riscv:rv64</span><br><span class="line"># target remote 127.0.0.1:25000</span><br><span class="line">symbol-file kernel/kernel</span><br><span class="line">set disassemble-next-line auto</span><br><span class="line">set riscv use-compressed-breakpoints yes</span><br></pre></td></tr></table></figure><p>注意1：如果make clean后再按F5（它会执行make qemu-gdb），.gdbinit这个文件会被刷新，所以我们又要去注释掉target remote那行，然后再按F5，目前我还没找到更好的解决方法。</p><p>注意2：由于xv6默认多核运行，所以调试代码的时候可能会有点混乱，可以通过修改tasks.json中command字段为make qemu-gdb CPUS=1，即单核运行。这仅供调试使用，因为正常情况下代码要通过多核的运行。</p><h2 id="系统调用">系统调用</h2><table><thead><tr><th style="text-align:center">系统调用</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">fork()</td><td style="text-align:center">创建进程</td></tr><tr><td style="text-align:center">exit()</td><td style="text-align:center">结束当前进程</td></tr><tr><td style="text-align:center">wait()</td><td style="text-align:center">等待子进程结束</td></tr><tr><td style="text-align:center">kill(pid)</td><td style="text-align:center">结束 pid 所指进程</td></tr><tr><td style="text-align:center">getpid()</td><td style="text-align:center">获得当前进程 pid</td></tr><tr><td style="text-align:center">sleep(n)</td><td style="text-align:center">睡眠 n 秒</td></tr><tr><td style="text-align:center">exec(filename, *argv)</td><td style="text-align:center">加载并执行一个文件</td></tr><tr><td style="text-align:center">sbrk(n)</td><td style="text-align:center">为进程内存空间增加 n 字节</td></tr><tr><td style="text-align:center">open(filename, flags)</td><td style="text-align:center">打开文件，flags 指定读/写模式</td></tr><tr><td style="text-align:center">read(fd, buf, n)</td><td style="text-align:center">从文件中读 n 个字节到 buf</td></tr><tr><td style="text-align:center">write(fd, buf, n)</td><td style="text-align:center">从 buf 中写 n 个字节到文件</td></tr><tr><td style="text-align:center">close(fd)</td><td style="text-align:center">关闭打开的 fd</td></tr><tr><td style="text-align:center">dup(fd)</td><td style="text-align:center">复制 fd</td></tr><tr><td style="text-align:center">pipe( p)</td><td style="text-align:center">创建管道， 并把读和写的 fd 返回到p</td></tr><tr><td style="text-align:center">chdir(dirname)</td><td style="text-align:center">改变当前目录</td></tr><tr><td style="text-align:center">mkdir(dirname)</td><td style="text-align:center">创建新的目录</td></tr><tr><td style="text-align:center">mknod(name, major, minor)</td><td style="text-align:center">创建设备文件</td></tr><tr><td style="text-align:center">fstat(fd)</td><td style="text-align:center">返回文件信息</td></tr><tr><td style="text-align:center">link(f1, f2)</td><td style="text-align:center">给 f1 创建一个新名字(f2)</td></tr><tr><td style="text-align:center">unlink(filename)</td><td style="text-align:center">删除文件</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="OS" scheme="http://www.misaka-9982.com/tags/OS/"/>
    
    <category term="6.S081" scheme="http://www.misaka-9982.com/tags/6-S081/"/>
    
  </entry>
  
  <entry>
    <title>CS144-Lab7</title>
    <link href="http://www.misaka-9982.com/2023/02/25/CS144-Lab7/"/>
    <id>http://www.misaka-9982.com/2023/02/25/CS144-Lab7/</id>
    <published>2023-02-25T08:26:59.000Z</published>
    <updated>2023-02-25T08:33:44.958Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="概述-4">概述</h2><p>到此为止，您已经实现了Internet基础设施的很大一部分。从Lab0(一个可靠的字节流)，到Labs 1-4(传输控制协议)，Lab 5(一个IP /以太网网络接口)和 Lab 6(一个IP路由器)，你已经做了大量的编码工作!</p><p>在这个实验室中，您不需要做任何编码(假设您之前的实验室处于合理的工作状态)。相反，为了结束你的成就，你将使用你之前的所有实验来创建一个真实的网络，其中包括你的网络堆栈(主机和路由器)与课堂上另一个学生实现的网络堆栈通信。</p><p>这个实验是两人一组做的。你需要和一个实验伙伴(班上的另一个学生)一起工作。请使用实验环节寻找实验伙伴，如果你不能参加实验环节，请使用广场。如果有必要，同一个学生可以多次担任“实验搭档”。</p><h2 id="网络">网络</h2><p>在本实验中，您将创建一个真实的网络，将您的网络堆栈与课堂上另一个学生实现的网络堆栈结合起来。每个人贡献一台主机(包括可靠的字节流、TCP实现和networkinterface)和一台路由器:</p><p><img src="https://cdn.jsdelivr.net/gh/Misaka-9982-coder/img_hosting/img/image-20230225160938571.png" alt="image-20230225160938571"></p><p>第一个窗口：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./apps/lab7 server cs144.keithw.org 3000</span><br></pre></td></tr></table></figure><p>第二个窗口：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./apps/lab7 server cs144.keithw.org 3000</span><br></pre></td></tr></table></figure><p><code>make check</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br></pre></td><td class="code"><pre><span class="line">[100%] Testing libsponge...</span><br><span class="line">Test project /home/misaka/sponge/build</span><br><span class="line">        Start   1: t_wrapping_ints_cmp</span><br><span class="line">  1/164 Test   <span class="comment">#1: t_wrapping_ints_cmp ..............   Passed    0.00 sec</span></span><br><span class="line">        Start   2: t_wrapping_ints_unwrap</span><br><span class="line">  2/164 Test   <span class="comment">#2: t_wrapping_ints_unwrap ...........   Passed    0.00 sec</span></span><br><span class="line">        Start   3: t_wrapping_ints_wrap</span><br><span class="line">  3/164 Test   <span class="comment">#3: t_wrapping_ints_wrap .............   Passed    0.00 sec</span></span><br><span class="line">        Start   4: t_wrapping_ints_roundtrip</span><br><span class="line">  4/164 Test   <span class="comment">#4: t_wrapping_ints_roundtrip ........   Passed    0.08 sec</span></span><br><span class="line">        Start   5: t_recv_connect</span><br><span class="line">  5/164 Test   <span class="comment">#5: t_recv_connect ...................   Passed    0.00 sec</span></span><br><span class="line">        Start   6: t_recv_transmit</span><br><span class="line">  6/164 Test   <span class="comment">#6: t_recv_transmit ..................   Passed    0.03 sec</span></span><br><span class="line">        Start   7: t_recv_window</span><br><span class="line">  7/164 Test   <span class="comment">#7: t_recv_window ....................   Passed    0.00 sec</span></span><br><span class="line">        Start   8: t_recv_reorder</span><br><span class="line">  8/164 Test   <span class="comment">#8: t_recv_reorder ...................   Passed    0.00 sec</span></span><br><span class="line">        Start   9: t_recv_close</span><br><span class="line">  9/164 Test   <span class="comment">#9: t_recv_close .....................   Passed    0.00 sec</span></span><br><span class="line">        Start  10: t_recv_special</span><br><span class="line"> 10/164 Test  <span class="comment">#10: t_recv_special ...................   Passed    0.00 sec</span></span><br><span class="line">        Start  11: t_send_connect</span><br><span class="line"> 11/164 Test  <span class="comment">#11: t_send_connect ...................   Passed    0.00 sec</span></span><br><span class="line">        Start  12: t_send_transmit</span><br><span class="line"> 12/164 Test  <span class="comment">#12: t_send_transmit ..................   Passed    0.02 sec</span></span><br><span class="line">        Start  13: t_send_retx</span><br><span class="line"> 13/164 Test  <span class="comment">#13: t_send_retx ......................   Passed    0.00 sec</span></span><br><span class="line">        Start  14: t_send_window</span><br><span class="line"> 14/164 Test  <span class="comment">#14: t_send_window ....................   Passed    0.01 sec</span></span><br><span class="line">        Start  15: t_send_ack</span><br><span class="line"> 15/164 Test  <span class="comment">#15: t_send_ack .......................   Passed    0.00 sec</span></span><br><span class="line">        Start  16: t_send_close</span><br><span class="line"> 16/164 Test  <span class="comment">#16: t_send_close .....................   Passed    0.00 sec</span></span><br><span class="line">        Start  17: t_send_extra</span><br><span class="line"> 17/164 Test  <span class="comment">#17: t_send_extra .....................   Passed    0.00 sec</span></span><br><span class="line">        Start  18: t_strm_reassem_single</span><br><span class="line"> 18/164 Test  <span class="comment">#18: t_strm_reassem_single ............   Passed    0.00 sec</span></span><br><span class="line">        Start  19: t_strm_reassem_seq</span><br><span class="line"> 19/164 Test  <span class="comment">#19: t_strm_reassem_seq ...............   Passed    0.00 sec</span></span><br><span class="line">        Start  20: t_strm_reassem_dup</span><br><span class="line"> 20/164 Test  <span class="comment">#20: t_strm_reassem_dup ...............   Passed    0.00 sec</span></span><br><span class="line">        Start  21: t_strm_reassem_holes</span><br><span class="line"> 21/164 Test  <span class="comment">#21: t_strm_reassem_holes .............   Passed    0.00 sec</span></span><br><span class="line">        Start  22: t_strm_reassem_many</span><br><span class="line"> 22/164 Test  <span class="comment">#22: t_strm_reassem_many ..............   Passed    0.03 sec</span></span><br><span class="line">        Start  23: t_strm_reassem_overlapping</span><br><span class="line"> 23/164 Test  <span class="comment">#23: t_strm_reassem_overlapping .......   Passed    0.00 sec</span></span><br><span class="line">        Start  24: t_strm_reassem_win</span><br><span class="line"> 24/164 Test  <span class="comment">#24: t_strm_reassem_win ...............   Passed    0.03 sec</span></span><br><span class="line">        Start  25: t_strm_reassem_cap</span><br><span class="line"> 25/164 Test  <span class="comment">#25: t_strm_reassem_cap ...............   Passed    0.05 sec</span></span><br><span class="line">        Start  26: t_byte_stream_construction</span><br><span class="line"> 26/164 Test  <span class="comment">#26: t_byte_stream_construction .......   Passed    0.00 sec</span></span><br><span class="line">        Start  27: t_byte_stream_one_write</span><br><span class="line"> 27/164 Test  <span class="comment">#27: t_byte_stream_one_write ..........   Passed    0.00 sec</span></span><br><span class="line">        Start  28: t_byte_stream_two_writes</span><br><span class="line"> 28/164 Test  <span class="comment">#28: t_byte_stream_two_writes .........   Passed    0.00 sec</span></span><br><span class="line">        Start  29: t_byte_stream_capacity</span><br><span class="line"> 29/164 Test  <span class="comment">#29: t_byte_stream_capacity ...........   Passed    0.23 sec</span></span><br><span class="line">        Start  30: t_byte_stream_many_writes</span><br><span class="line"> 30/164 Test  <span class="comment">#30: t_byte_stream_many_writes ........   Passed    0.00 sec</span></span><br><span class="line">        Start  31: t_webget</span><br><span class="line"> 31/164 Test  <span class="comment">#31: t_webget .........................   Passed    1.24 sec</span></span><br><span class="line">        Start  32: arp_network_interface</span><br><span class="line"> 32/164 Test  <span class="comment">#32: arp_network_interface ............   Passed    0.00 sec</span></span><br><span class="line">        Start  33: router_test</span><br><span class="line"> 33/164 Test  <span class="comment">#33: router_test ......................   Passed    0.01 sec</span></span><br><span class="line">        Start  34: t_tcp_parser</span><br><span class="line"> 34/164 Test  <span class="comment">#34: t_tcp_parser .....................   Passed    0.00 sec</span></span><br><span class="line">        Start  35: t_ipv4_parser</span><br><span class="line"> 35/164 Test  <span class="comment">#35: t_ipv4_parser ....................   Passed    0.00 sec</span></span><br><span class="line">        Start  36: t_active_close</span><br><span class="line"> 36/164 Test  <span class="comment">#36: t_active_close ...................   Passed    0.00 sec</span></span><br><span class="line">        Start  37: t_passive_close</span><br><span class="line"> 37/164 Test  <span class="comment">#37: t_passive_close ..................   Passed    0.00 sec</span></span><br><span class="line">        Start  39: t_ack_rst</span><br><span class="line"> 38/164 Test  <span class="comment">#39: t_ack_rst ........................   Passed    0.00 sec</span></span><br><span class="line">        Start  41: t_ack_rst_win</span><br><span class="line"> 39/164 Test  <span class="comment">#41: t_ack_rst_win ....................   Passed    0.00 sec</span></span><br><span class="line">        Start  43: t_connect</span><br><span class="line"> 40/164 Test  <span class="comment">#43: t_connect ........................   Passed    0.00 sec</span></span><br><span class="line">        Start  45: t_listen</span><br><span class="line"> 41/164 Test  <span class="comment">#45: t_listen .........................   Passed    0.00 sec</span></span><br><span class="line">        Start  46: t_winsize</span><br><span class="line"> 42/164 Test  <span class="comment">#46: t_winsize ........................   Passed    0.03 sec</span></span><br><span class="line">        Start  48: t_retx</span><br><span class="line"> 43/164 Test  <span class="comment">#48: t_retx ...........................   Passed    0.00 sec</span></span><br><span class="line">        Start  49: t_retx_win</span><br><span class="line"> 44/164 Test  <span class="comment">#49: t_retx_win .......................   Passed    0.00 sec</span></span><br><span class="line">        Start  50: t_loopback</span><br><span class="line"> 45/164 Test  <span class="comment">#50: t_loopback .......................   Passed    0.10 sec</span></span><br><span class="line">        Start  51: t_loopback_win</span><br><span class="line"> 46/164 Test  <span class="comment">#51: t_loopback_win ...................   Passed    0.05 sec</span></span><br><span class="line">        Start  52: t_reorder</span><br><span class="line"> 47/164 Test  <span class="comment">#52: t_reorder ........................   Passed    0.07 sec</span></span><br><span class="line">        Start  53: t_address_dt</span><br><span class="line"> 48/164 Test  <span class="comment">#53: t_address_dt .....................   Passed    0.00 sec</span></span><br><span class="line">        Start  54: t_parser_dt</span><br><span class="line"> 49/164 Test  <span class="comment">#54: t_parser_dt ......................   Passed    0.00 sec</span></span><br><span class="line">        Start  55: t_socket_dt</span><br><span class="line"> 50/164 Test  <span class="comment">#55: t_socket_dt ......................   Passed    0.00 sec</span></span><br><span class="line">        Start  56: t_udp_client_send</span><br><span class="line"> 51/164 Test  <span class="comment">#56: t_udp_client_send ................   Passed    0.24 sec</span></span><br><span class="line">        Start  57: t_udp_server_send</span><br><span class="line"> 52/164 Test  <span class="comment">#57: t_udp_server_send ................   Passed    0.24 sec</span></span><br><span class="line">        Start  58: t_udp_client_recv</span><br><span class="line"> 53/164 Test  <span class="comment">#58: t_udp_client_recv ................   Passed    0.24 sec</span></span><br><span class="line">        Start  59: t_udp_server_recv</span><br><span class="line"> 54/164 Test  <span class="comment">#59: t_udp_server_recv ................   Passed    0.24 sec</span></span><br><span class="line">        Start  60: t_udp_client_dupl</span><br><span class="line"> 55/164 Test  <span class="comment">#60: t_udp_client_dupl ................   Passed    0.24 sec</span></span><br><span class="line">        Start  61: t_udp_server_dupl</span><br><span class="line"> 56/164 Test  <span class="comment">#61: t_udp_server_dupl ................   Passed    0.24 sec</span></span><br><span class="line">        Start  62: t_ucS_1M_32k</span><br><span class="line"> 57/164 Test  <span class="comment">#62: t_ucS_1M_32k .....................   Passed    0.27 sec</span></span><br><span class="line">        Start  63: t_ucS_128K_8K</span><br><span class="line"> 58/164 Test  <span class="comment">#63: t_ucS_128K_8K ....................   Passed    0.25 sec</span></span><br><span class="line">        Start  64: t_ucS_16_1</span><br><span class="line"> 59/164 Test  <span class="comment">#64: t_ucS_16_1 .......................   Passed    0.24 sec</span></span><br><span class="line">        Start  65: t_ucS_32K_d</span><br><span class="line"> 60/164 Test  <span class="comment">#65: t_ucS_32K_d ......................   Passed    0.24 sec</span></span><br><span class="line">        Start  66: t_ucR_1M_32k</span><br><span class="line"> 61/164 Test  <span class="comment">#66: t_ucR_1M_32k .....................   Passed    0.27 sec</span></span><br><span class="line">        Start  67: t_ucR_128K_8K</span><br><span class="line"> 62/164 Test  <span class="comment">#67: t_ucR_128K_8K ....................   Passed    0.24 sec</span></span><br><span class="line">        Start  68: t_ucR_16_1</span><br><span class="line"> 63/164 Test  <span class="comment">#68: t_ucR_16_1 .......................   Passed    0.24 sec</span></span><br><span class="line">        Start  69: t_ucR_32K_d</span><br><span class="line"> 64/164 Test  <span class="comment">#69: t_ucR_32K_d ......................   Passed    0.24 sec</span></span><br><span class="line">        Start  70: t_ucD_1M_32k</span><br><span class="line"> 65/164 Test  <span class="comment">#70: t_ucD_1M_32k .....................   Passed    0.28 sec</span></span><br><span class="line">        Start  71: t_ucD_128K_8K</span><br><span class="line"> 66/164 Test  <span class="comment">#71: t_ucD_128K_8K ....................   Passed    0.26 sec</span></span><br><span class="line">        Start  72: t_ucD_16_1</span><br><span class="line"> 67/164 Test  <span class="comment">#72: t_ucD_16_1 .......................   Passed    0.25 sec</span></span><br><span class="line">        Start  73: t_ucD_32K_d</span><br><span class="line"> 68/164 Test  <span class="comment">#73: t_ucD_32K_d ......................   Passed    0.24 sec</span></span><br><span class="line">        Start  74: t_usS_1M_32k</span><br><span class="line"> 69/164 Test  <span class="comment">#74: t_usS_1M_32k .....................   Passed    0.27 sec</span></span><br><span class="line">        Start  75: t_usS_128K_8K</span><br><span class="line"> 70/164 Test  <span class="comment">#75: t_usS_128K_8K ....................   Passed    0.24 sec</span></span><br><span class="line">        Start  76: t_usS_16_1</span><br><span class="line"> 71/164 Test  <span class="comment">#76: t_usS_16_1 .......................   Passed    0.24 sec</span></span><br><span class="line">        Start  77: t_usS_32K_d</span><br><span class="line"> 72/164 Test  <span class="comment">#77: t_usS_32K_d ......................   Passed    0.24 sec</span></span><br><span class="line">        Start  78: t_usR_1M_32k</span><br><span class="line"> 73/164 Test  <span class="comment">#78: t_usR_1M_32k .....................   Passed    0.26 sec</span></span><br><span class="line">        Start  79: t_usR_128K_8K</span><br><span class="line"> 74/164 Test  <span class="comment">#79: t_usR_128K_8K ....................   Passed    0.25 sec</span></span><br><span class="line">        Start  80: t_usR_16_1</span><br><span class="line"> 75/164 Test  <span class="comment">#80: t_usR_16_1 .......................   Passed    0.24 sec</span></span><br><span class="line">        Start  81: t_usR_32K_d</span><br><span class="line"> 76/164 Test  <span class="comment">#81: t_usR_32K_d ......................   Passed    0.24 sec</span></span><br><span class="line">        Start  82: t_usD_1M_32k</span><br><span class="line"> 77/164 Test  <span class="comment">#82: t_usD_1M_32k .....................   Passed    0.27 sec</span></span><br><span class="line">        Start  83: t_usD_128K_8K</span><br><span class="line"> 78/164 Test  <span class="comment">#83: t_usD_128K_8K ....................   Passed    0.25 sec</span></span><br><span class="line">        Start  84: t_usD_16_1</span><br><span class="line"> 79/164 Test  <span class="comment">#84: t_usD_16_1 .......................   Passed    0.25 sec</span></span><br><span class="line">        Start  85: t_usD_32K_d</span><br><span class="line"> 80/164 Test  <span class="comment">#85: t_usD_32K_d ......................   Passed    0.24 sec</span></span><br><span class="line">        Start  86: t_ucS_128K_8K_l</span><br><span class="line"> 81/164 Test  <span class="comment">#86: t_ucS_128K_8K_l ..................   Passed    0.24 sec</span></span><br><span class="line">        Start  87: t_ucS_128K_8K_L</span><br><span class="line"> 82/164 Test  <span class="comment">#87: t_ucS_128K_8K_L ..................   Passed    0.43 sec</span></span><br><span class="line">        Start  88: t_ucS_128K_8K_lL</span><br><span class="line"> 83/164 Test  <span class="comment">#88: t_ucS_128K_8K_lL .................   Passed    0.42 sec</span></span><br><span class="line">        Start  89: t_ucR_128K_8K_l</span><br><span class="line"> 84/164 Test  <span class="comment">#89: t_ucR_128K_8K_l ..................   Passed    0.50 sec</span></span><br><span class="line">        Start  90: t_ucR_128K_8K_L</span><br><span class="line"> 85/164 Test  <span class="comment">#90: t_ucR_128K_8K_L ..................   Passed    0.24 sec</span></span><br><span class="line">        Start  91: t_ucR_128K_8K_lL</span><br><span class="line"> 86/164 Test  <span class="comment">#91: t_ucR_128K_8K_lL .................   Passed    0.39 sec</span></span><br><span class="line">        Start  92: t_ucD_128K_8K_l</span><br><span class="line"> 87/164 Test  <span class="comment">#92: t_ucD_128K_8K_l ..................   Passed    0.35 sec</span></span><br><span class="line">        Start  93: t_ucD_128K_8K_L</span><br><span class="line"> 88/164 Test  <span class="comment">#93: t_ucD_128K_8K_L ..................   Passed    0.38 sec</span></span><br><span class="line">        Start  94: t_ucD_128K_8K_lL</span><br><span class="line"> 89/164 Test  <span class="comment">#94: t_ucD_128K_8K_lL .................   Passed    0.48 sec</span></span><br><span class="line">        Start  95: t_usS_128K_8K_l</span><br><span class="line"> 90/164 Test  <span class="comment">#95: t_usS_128K_8K_l ..................   Passed    0.26 sec</span></span><br><span class="line">        Start  96: t_usS_128K_8K_L</span><br><span class="line"> 91/164 Test  <span class="comment">#96: t_usS_128K_8K_L ..................   Passed    0.35 sec</span></span><br><span class="line">        Start  97: t_usS_128K_8K_lL</span><br><span class="line"> 92/164 Test  <span class="comment">#97: t_usS_128K_8K_lL .................   Passed    0.37 sec</span></span><br><span class="line">        Start  98: t_usR_128K_8K_l</span><br><span class="line"> 93/164 Test  <span class="comment">#98: t_usR_128K_8K_l ..................   Passed    0.39 sec</span></span><br><span class="line">        Start  99: t_usR_128K_8K_L</span><br><span class="line"> 94/164 Test  <span class="comment">#99: t_usR_128K_8K_L ..................   Passed    0.25 sec</span></span><br><span class="line">        Start 100: t_usR_128K_8K_lL</span><br><span class="line"> 95/164 Test <span class="comment">#100: t_usR_128K_8K_lL .................   Passed    0.56 sec</span></span><br><span class="line">        Start 101: t_usD_128K_8K_l</span><br><span class="line"> 96/164 Test <span class="comment">#101: t_usD_128K_8K_l ..................   Passed    0.40 sec</span></span><br><span class="line">        Start 102: t_usD_128K_8K_L</span><br><span class="line"> 97/164 Test <span class="comment">#102: t_usD_128K_8K_L ..................   Passed    0.32 sec</span></span><br><span class="line">        Start 103: t_usD_128K_8K_lL</span><br><span class="line"> 98/164 Test <span class="comment">#103: t_usD_128K_8K_lL .................   Passed    0.51 sec</span></span><br><span class="line">        Start 104: t_ipv4_client_send</span><br><span class="line"> 99/164 Test <span class="comment">#104: t_ipv4_client_send ...............   Passed    0.25 sec</span></span><br><span class="line">        Start 105: t_ipv4_server_send</span><br><span class="line">100/164 Test <span class="comment">#105: t_ipv4_server_send ...............   Passed    0.24 sec</span></span><br><span class="line">        Start 106: t_ipv4_client_recv</span><br><span class="line">101/164 Test <span class="comment">#106: t_ipv4_client_recv ...............   Passed    0.24 sec</span></span><br><span class="line">        Start 107: t_ipv4_server_recv</span><br><span class="line">102/164 Test <span class="comment">#107: t_ipv4_server_recv ...............   Passed    0.25 sec</span></span><br><span class="line">        Start 108: t_ipv4_client_dupl</span><br><span class="line">103/164 Test <span class="comment">#108: t_ipv4_client_dupl ...............   Passed    0.25 sec</span></span><br><span class="line">        Start 109: t_ipv4_server_dupl</span><br><span class="line">104/164 Test <span class="comment">#109: t_ipv4_server_dupl ...............   Passed    0.24 sec</span></span><br><span class="line">        Start 110: t_icS_1M_32k</span><br><span class="line">105/164 Test <span class="comment">#110: t_icS_1M_32k .....................   Passed    0.28 sec</span></span><br><span class="line">        Start 111: t_icS_128K_8K</span><br><span class="line">106/164 Test <span class="comment">#111: t_icS_128K_8K ....................   Passed    0.25 sec</span></span><br><span class="line">        Start 112: t_icS_16_1</span><br><span class="line">107/164 Test <span class="comment">#112: t_icS_16_1 .......................   Passed    0.24 sec</span></span><br><span class="line">        Start 113: t_icS_32K_d</span><br><span class="line">108/164 Test <span class="comment">#113: t_icS_32K_d ......................   Passed    0.25 sec</span></span><br><span class="line">        Start 114: t_icR_1M_32k</span><br><span class="line">109/164 Test <span class="comment">#114: t_icR_1M_32k .....................   Passed    0.29 sec</span></span><br><span class="line">        Start 115: t_icR_128K_8K</span><br><span class="line">110/164 Test <span class="comment">#115: t_icR_128K_8K ....................   Passed    0.25 sec</span></span><br><span class="line">        Start 116: t_icR_16_1</span><br><span class="line">111/164 Test <span class="comment">#116: t_icR_16_1 .......................   Passed    0.24 sec</span></span><br><span class="line">        Start 117: t_icR_32K_d</span><br><span class="line">112/164 Test <span class="comment">#117: t_icR_32K_d ......................   Passed    0.24 sec</span></span><br><span class="line">        Start 118: t_icD_1M_32k</span><br><span class="line">113/164 Test <span class="comment">#118: t_icD_1M_32k .....................   Passed    0.30 sec</span></span><br><span class="line">        Start 119: t_icD_128K_8K</span><br><span class="line">114/164 Test <span class="comment">#119: t_icD_128K_8K ....................   Passed    0.25 sec</span></span><br><span class="line">        Start 120: t_icD_16_1</span><br><span class="line">115/164 Test <span class="comment">#120: t_icD_16_1 .......................   Passed    0.26 sec</span></span><br><span class="line">        Start 121: t_icD_32K_d</span><br><span class="line">116/164 Test <span class="comment">#121: t_icD_32K_d ......................   Passed    0.24 sec</span></span><br><span class="line">        Start 122: t_isS_1M_32k</span><br><span class="line">117/164 Test <span class="comment">#122: t_isS_1M_32k .....................   Passed    0.28 sec</span></span><br><span class="line">        Start 123: t_isS_128K_8K</span><br><span class="line">118/164 Test <span class="comment">#123: t_isS_128K_8K ....................   Passed    0.26 sec</span></span><br><span class="line">        Start 124: t_isS_16_1</span><br><span class="line">119/164 Test <span class="comment">#124: t_isS_16_1 .......................   Passed    0.24 sec</span></span><br><span class="line">        Start 125: t_isS_32K_d</span><br><span class="line">120/164 Test <span class="comment">#125: t_isS_32K_d ......................   Passed    0.24 sec</span></span><br><span class="line">        Start 126: t_isR_1M_32k</span><br><span class="line">121/164 Test <span class="comment">#126: t_isR_1M_32k .....................   Passed    0.28 sec</span></span><br><span class="line">        Start 127: t_isR_128K_8K</span><br><span class="line">122/164 Test <span class="comment">#127: t_isR_128K_8K ....................   Passed    0.25 sec</span></span><br><span class="line">        Start 128: t_isR_16_1</span><br><span class="line">123/164 Test <span class="comment">#128: t_isR_16_1 .......................   Passed    0.25 sec</span></span><br><span class="line">        Start 129: t_isR_32K_d</span><br><span class="line">124/164 Test <span class="comment">#129: t_isR_32K_d ......................   Passed    0.25 sec</span></span><br><span class="line">        Start 130: t_isD_1M_32k</span><br><span class="line">125/164 Test <span class="comment">#130: t_isD_1M_32k .....................   Passed    0.30 sec</span></span><br><span class="line">        Start 131: t_isD_128K_8K</span><br><span class="line">126/164 Test <span class="comment">#131: t_isD_128K_8K ....................   Passed    0.25 sec</span></span><br><span class="line">        Start 132: t_isD_16_1</span><br><span class="line">127/164 Test <span class="comment">#132: t_isD_16_1 .......................   Passed    0.25 sec</span></span><br><span class="line">        Start 133: t_isD_32K_d</span><br><span class="line">128/164 Test <span class="comment">#133: t_isD_32K_d ......................   Passed    0.24 sec</span></span><br><span class="line">        Start 134: t_icS_128K_8K_l</span><br><span class="line">129/164 Test <span class="comment">#134: t_icS_128K_8K_l ..................   Passed    0.25 sec</span></span><br><span class="line">        Start 135: t_icS_128K_8K_L</span><br><span class="line">130/164 Test <span class="comment">#135: t_icS_128K_8K_L ..................   Passed    0.44 sec</span></span><br><span class="line">        Start 136: t_icS_128K_8K_lL</span><br><span class="line">131/164 Test <span class="comment">#136: t_icS_128K_8K_lL .................   Passed    0.32 sec</span></span><br><span class="line">        Start 137: t_icR_128K_8K_l</span><br><span class="line">132/164 Test <span class="comment">#137: t_icR_128K_8K_l ..................   Passed    0.38 sec</span></span><br><span class="line">        Start 138: t_icR_128K_8K_L</span><br><span class="line">133/164 Test <span class="comment">#138: t_icR_128K_8K_L ..................   Passed    0.26 sec</span></span><br><span class="line">        Start 139: t_icR_128K_8K_lL</span><br><span class="line">134/164 Test <span class="comment">#139: t_icR_128K_8K_lL .................   Passed    0.45 sec</span></span><br><span class="line">        Start 140: t_icD_128K_8K_l</span><br><span class="line">135/164 Test <span class="comment">#140: t_icD_128K_8K_l ..................   Passed    0.32 sec</span></span><br><span class="line">        Start 141: t_icD_128K_8K_L</span><br><span class="line">136/164 Test <span class="comment">#141: t_icD_128K_8K_L ..................   Passed    0.36 sec</span></span><br><span class="line">        Start 142: t_icD_128K_8K_lL</span><br><span class="line">137/164 Test <span class="comment">#142: t_icD_128K_8K_lL .................   Passed    0.47 sec</span></span><br><span class="line">        Start 143: t_isS_128K_8K_l</span><br><span class="line">138/164 Test <span class="comment">#143: t_isS_128K_8K_l ..................   Passed    0.29 sec</span></span><br><span class="line">        Start 144: t_isS_128K_8K_L</span><br><span class="line">139/164 Test <span class="comment">#144: t_isS_128K_8K_L ..................   Passed    0.38 sec</span></span><br><span class="line">        Start 145: t_isS_128K_8K_lL</span><br><span class="line">140/164 Test <span class="comment">#145: t_isS_128K_8K_lL .................   Passed    0.51 sec</span></span><br><span class="line">        Start 146: t_isR_128K_8K_l</span><br><span class="line">141/164 Test <span class="comment">#146: t_isR_128K_8K_l ..................   Passed    0.49 sec</span></span><br><span class="line">        Start 147: t_isR_128K_8K_L</span><br><span class="line">142/164 Test <span class="comment">#147: t_isR_128K_8K_L ..................   Passed    0.25 sec</span></span><br><span class="line">        Start 148: t_isR_128K_8K_lL</span><br><span class="line">143/164 Test <span class="comment">#148: t_isR_128K_8K_lL .................   Passed    0.42 sec</span></span><br><span class="line">        Start 149: t_isD_128K_8K_l</span><br><span class="line">144/164 Test <span class="comment">#149: t_isD_128K_8K_l ..................   Passed    0.42 sec</span></span><br><span class="line">        Start 150: t_isD_128K_8K_L</span><br><span class="line">145/164 Test <span class="comment">#150: t_isD_128K_8K_L ..................   Passed    0.52 sec</span></span><br><span class="line">        Start 151: t_isD_128K_8K_lL</span><br><span class="line">146/164 Test <span class="comment">#151: t_isD_128K_8K_lL .................   Passed    0.46 sec</span></span><br><span class="line">        Start 152: t_icnS_128K_8K_l</span><br><span class="line">147/164 Test <span class="comment">#152: t_icnS_128K_8K_l .................   Passed    0.30 sec</span></span><br><span class="line">        Start 153: t_icnS_128K_8K_L</span><br><span class="line">148/164 Test <span class="comment">#153: t_icnS_128K_8K_L .................   Passed    0.24 sec</span></span><br><span class="line">        Start 154: t_icnS_128K_8K_lL</span><br><span class="line">149/164 Test <span class="comment">#154: t_icnS_128K_8K_lL ................   Passed    0.23 sec</span></span><br><span class="line">        Start 155: t_icnR_128K_8K_l</span><br><span class="line">150/164 Test <span class="comment">#155: t_icnR_128K_8K_l .................   Passed    0.51 sec</span></span><br><span class="line">        Start 156: t_icnR_128K_8K_L</span><br><span class="line">151/164 Test <span class="comment">#156: t_icnR_128K_8K_L .................   Passed    0.25 sec</span></span><br><span class="line">        Start 157: t_icnR_128K_8K_lL</span><br><span class="line">152/164 Test <span class="comment">#157: t_icnR_128K_8K_lL ................   Passed    1.00 sec</span></span><br><span class="line">        Start 158: t_icnD_128K_8K_l</span><br><span class="line">153/164 Test <span class="comment">#158: t_icnD_128K_8K_l .................   Passed    0.64 sec</span></span><br><span class="line">        Start 159: t_icnD_128K_8K_L</span><br><span class="line">154/164 Test <span class="comment">#159: t_icnD_128K_8K_L .................   Passed    0.22 sec</span></span><br><span class="line">        Start 160: t_icnD_128K_8K_lL</span><br><span class="line">155/164 Test <span class="comment">#160: t_icnD_128K_8K_lL ................   Passed    0.65 sec</span></span><br><span class="line">        Start 161: t_isnS_128K_8K_l</span><br><span class="line">156/164 Test <span class="comment">#161: t_isnS_128K_8K_l .................   Passed    0.12 sec</span></span><br><span class="line">        Start 162: t_isnS_128K_8K_L</span><br><span class="line">157/164 Test <span class="comment">#162: t_isnS_128K_8K_L .................   Passed    0.24 sec</span></span><br><span class="line">        Start 163: t_isnS_128K_8K_lL</span><br><span class="line">158/164 Test <span class="comment">#163: t_isnS_128K_8K_lL ................   Passed    0.28 sec</span></span><br><span class="line">        Start 164: t_isnR_128K_8K_l</span><br><span class="line">159/164 Test <span class="comment">#164: t_isnR_128K_8K_l .................   Passed    0.61 sec</span></span><br><span class="line">        Start 165: t_isnR_128K_8K_L</span><br><span class="line">160/164 Test <span class="comment">#165: t_isnR_128K_8K_L .................   Passed    0.28 sec</span></span><br><span class="line">        Start 166: t_isnR_128K_8K_lL</span><br><span class="line">161/164 Test <span class="comment">#166: t_isnR_128K_8K_lL ................   Passed    0.72 sec</span></span><br><span class="line">        Start 167: t_isnD_128K_8K_l</span><br><span class="line">162/164 Test <span class="comment">#167: t_isnD_128K_8K_l .................   Passed    0.88 sec</span></span><br><span class="line">        Start 168: t_isnD_128K_8K_L</span><br><span class="line">163/164 Test <span class="comment">#168: t_isnD_128K_8K_L .................   Passed    0.24 sec</span></span><br><span class="line">        Start 169: t_isnD_128K_8K_lL</span><br><span class="line">164/164 Test <span class="comment">#169: t_isnD_128K_8K_lL ................   Passed    0.91 sec</span></span><br><span class="line"></span><br><span class="line">100% tests passed, 0 tests failed out of 164</span><br><span class="line"></span><br><span class="line">Total Test time (real) =  39.33 sec</span><br><span class="line">[100%] Built target check</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="CS144" scheme="http://www.misaka-9982.com/tags/CS144/"/>
    
    <category term="Network" scheme="http://www.misaka-9982.com/tags/Network/"/>
    
  </entry>
  
  <entry>
    <title>CS144-Lab6</title>
    <link href="http://www.misaka-9982.com/2023/02/25/CS144-Lab6/"/>
    <id>http://www.misaka-9982.com/2023/02/25/CS144-Lab6/</id>
    <published>2023-02-25T07:58:46.000Z</published>
    <updated>2023-02-25T08:32:48.360Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="概述-5">概述</h2><p>在本周的实验中，你将在现有的<code>NetworkInterface</code>基础上实现一个IP路由器，从而结束本课程。路由器有几个网络接口，可以在其中任何一个接口上接收互联网数据报。路由器的工作是根据<strong>路由表</strong>转发它得到的数据报：一个规则列表，它告诉路由器，对于任何给定的数据报：</p><ul><li>发送到哪个接口；</li><li>下一跳的IP地址 ；</li></ul><p>你的工作是实现一个路由器，它可以为任何给定的数据报计算出这两件事。(你不需要实现设置路由表的算法，例如RIP、OSPF、BGP或SDN控制器，只需要实现跟随路由表的算法)。</p><p>你对路由器的实现将使用带有新的<code>Router</code>类的Sponge库，以及在模拟网络中检查你的路由器功能的测试。实验6建立在你在实验5中对<code>NetworkInterface</code>的实现之上，但不使用你在实验0-4中实现的TCP栈。IP路由器不需要知道任何关于TCP、ARP或以太网的信息(仅限IP)。我们希望你的实现将需要大约25-30行的代码。</p><p><img src="https://cdn.jsdelivr.net/gh/Misaka-9982-coder/img_hosting/img/1-20230224183738464.jpg" alt=""></p><p>图1：路由器包含多个网络接口，可以在其中任何一个接口上接收IP数据报。路由器将接收到的任何数据报转发到相应出站接口上的下一跳，路由表告诉路由器如何做出这个决定。</p><h2 id="开始-4">开始</h2><ol><li>请确保你已经提交了你在实验5中的所有解决方案。请不要修改<code>libsponge</code>目录顶层以外的任何文件，或者<code>webget.cc</code>。(请不要添加代码所依赖的额外文件。)否则，你可能会在合并实验6的启动代码时遇到麻烦。</li><li>在实验作业的存储库中，运行<code>git fetch</code>来检索实验作业的最新版本。</li><li>通过运行<code>git merge origin/lab6-startercode</code>，下载实验6的启动代码。</li><li>在<code>build</code>目录中，编译源代码：<code>make</code>(编译时可以运行<code>make -j4</code>以使用四个处理器)。</li><li>在<code>build</code>目录外，打开并开始编辑<code>writeups/lab6.md</code>文件。这是你实验报告的模板，将包含在你提交的内容中。</li></ol><h2 id="实现路由器">实现路由器</h2><p>在本实验中，你将实现一个Router类，它可以：</p><ul><li>跟踪路由表(转发规则或路由列表)，并</li><li>转发它收到的每个数据报：<ul><li>转发到正确的下一跳</li><li>在正确的出站<code>NetworkInterface</code>上</li></ul></li></ul><p>你的实现将被添加到<a href="https://github.com/CS144/sponge/blob/lab6-startercode/libsponge/router.hh">router.hh</a>和<a href="https://github.com/CS144/sponge/blob/lab6-startercode/libsponge/router.cc">router.cc</a>骨架文件中。在你开始编码之前，请查看<a href="https://cs144.github.io/doc/lab6/class_router.html">新的Router类的文档</a>。</p><p>下面是你要实现的两个方法，以及我们对每个方法的期望：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_route</span><span class="params">(<span class="keyword">const</span> <span class="keyword">uint32_t</span> route_prefix,</span></span></span><br><span class="line"><span class="params"><span class="function">               <span class="keyword">const</span> <span class="keyword">uint8_t</span> prefix_length,</span></span></span><br><span class="line"><span class="params"><span class="function">               <span class="keyword">const</span> optional&lt;Address&gt; next_hop,</span></span></span><br><span class="line"><span class="params"><span class="function">               <span class="keyword">const</span> <span class="keyword">size_t</span> interface_num)</span></span>;</span><br></pre></td></tr></table></figure><p>这个方法将一条路由添加到路由表中。你要在Router类中添加一个数据结构作为私有成员来存储这些信息。这个方法所要做的就是保存路由，以供以后使用。</p><blockquote><p><strong>路由的各个部分是什么意思？</strong></p><p>路由是一个”匹配——行动”规则：它告诉路由器，如果一个数据报前往一个特定的网络(一个IP地址范围)，并且如果该路由被选为最具体的匹配路由，那么路由器应该把数据报转发到特定接口上的特定下一跳。</p><p><strong>“匹配”：数据报是前往这个网络的吗?</strong><code>route_prefix</code>和<code>prefix_length</code>共同指定了一个可能包括数据报目的地的IP地址范围(一个网络)。<code>route_prefix</code>是一个32位数字的IP地址。<code>prefix_length</code>是一个介于0和32(包括32)之间的数字；它告诉路由器路由前缀中有多少最高有效位是有效的。例如，要表达一个到网络”18.47.0.0/16”的路由(这与前两个字节为18和47的任何32位IP地址匹配)，路由前缀将是305070080(18×224+47×216)，前缀长度是16。任何以”18.47.x.y”为目的地的数据报都会匹配。</p><p>**“行动”：如果路由匹配并被选中，该怎么做。**如果路由器直接连接到有关的网络，<code>next_hop</code>将是一个空的可选项；在这种情况下，<code>next_hop</code>是数据报的目标地址。但如果路由器是通过其他路由器连接到有关网络的，则<code>next_hop</code>将包含路径中下一路由器的IP地址。<code>interface_num</code>给出了路由器<code>NetworkInterface</code>的索引，它用来将数据报发送到下一跳。你可以用<code>interface(interface_num)</code>方法访问这个接口。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">route_one_datagram</span><span class="params">(InternetDatagram &amp;dgram)</span></span>;</span><br></pre></td></tr></table></figure><p>这里是橡胶与道路的交汇处。这个方法需要将数据报路由到下一跳，从适当的接口传出。它需要实现IP路由器的”最长前缀匹配”逻辑，以找到最佳路由，这意味着：</p><ul><li>路由器搜索路由表，以找到与数据报的目的地址相匹配的路由。我们所说的”匹配”是指目的地址的最高有效<code>prefix_length</code>比特与<code>route_prefix</code>的最高有效<code>prefix_length</code>比特相同的。</li><li>在匹配的路由中，路由器选择具有最大<code>prefix_length</code>的路由，这就是<strong>最长前缀匹配</strong>路由。</li><li>如果没有匹配的路由，路由器会丢弃数据报。</li><li>路由器会递减数据报的TTL(生存时间)。如果TTL已经为零，或在递减后为零，路由器应该放弃该数据报。</li><li>否则，路由器将修改后的数据报通过适当的接口(<code>interface(interface_num).send_datagram()</code>)发送到适当的下一跳。</li></ul><blockquote><p>在这个互联网的设计中，有个优点(或至少是一种成功的抽象)：路由器从不考虑TCP、ARP或以太网帧。路由器甚至不知道链路层是什么样子的。路由器只考虑互联网数据包，并且只通过<code>NetworkInterface</code>抽象与链路层进行交互。当涉及到”链路层地址是如何解决的？”或”链路层是否有自己的不同于IP的寻址方案？”或”链路层帧的格式是什么？”或”数据报的有效载荷是什么意思？”等问题时，路由器根本不关心。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//! \brief A wrapper for NetworkInterface that makes the host-side</span></span><br><span class="line"><span class="comment">//! interface asynchronous: instead of returning received datagrams</span></span><br><span class="line"><span class="comment">//! immediately (from the `recv_frame` method), it stores them for</span></span><br><span class="line"><span class="comment">//! later retrieval. Otherwise, behaves identically to the underlying</span></span><br><span class="line"><span class="comment">//! implementation of NetworkInterface.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AsyncNetworkInterface</span> :</span> <span class="keyword">public</span> NetworkInterface &#123;</span><br><span class="line">    std::queue&lt;InternetDatagram&gt; _datagrams_out&#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">using</span> NetworkInterface::NetworkInterface;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//! Construct from a NetworkInterface</span></span><br><span class="line">    <span class="built_in">AsyncNetworkInterface</span>(NetworkInterface &amp;&amp;interface) : <span class="built_in">NetworkInterface</span>(interface) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//! \brief Receives and Ethernet frame and responds appropriately.</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//! - If type is IPv4, pushes to the `datagrams_out` queue for later retrieval by the owner.</span></span><br><span class="line">    <span class="comment">//! - If type is ARP request, learn a mapping from the &quot;sender&quot; fields, and send an ARP reply.</span></span><br><span class="line">    <span class="comment">//! - If type is ARP reply, learn a mapping from the &quot;target&quot; fields.</span></span><br><span class="line">    <span class="comment">//!</span></span><br><span class="line">    <span class="comment">//! \param[in] frame the incoming Ethernet frame</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">recv_frame</span><span class="params">(<span class="keyword">const</span> EthernetFrame &amp;frame)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">auto</span> optional_dgram = NetworkInterface::<span class="built_in">recv_frame</span>(frame);</span><br><span class="line">        <span class="keyword">if</span> (optional_dgram.<span class="built_in">has_value</span>()) &#123;</span><br><span class="line">            _datagrams_out.<span class="built_in">push</span>(std::<span class="built_in">move</span>(optional_dgram.<span class="built_in">value</span>()));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//! Access queue of Internet datagrams that have been received</span></span><br><span class="line">    <span class="function">std::queue&lt;InternetDatagram&gt; &amp;<span class="title">datagrams_out</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> _datagrams_out; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">route_rule</span>&#123;</span></span><br><span class="line">    <span class="keyword">uint32_t</span> route_prefix&#123;&#125;;</span><br><span class="line">    <span class="keyword">uint8_t</span> prefix_length&#123;&#125;;</span><br><span class="line">    std::optional&lt;Address&gt; next_hop;</span><br><span class="line">    <span class="keyword">size_t</span> interface_num&#123;&#125;;</span><br><span class="line">    <span class="built_in">route_rule</span>(<span class="keyword">const</span> <span class="keyword">uint32_t</span> _route_prefix,</span><br><span class="line">                <span class="keyword">const</span> <span class="keyword">uint8_t</span> _prefix_length,</span><br><span class="line">                <span class="keyword">const</span> std::optional&lt;Address&gt; _next_hop,</span><br><span class="line">                <span class="keyword">const</span> <span class="keyword">size_t</span> _interface_num)</span><br><span class="line">    :<span class="built_in">route_prefix</span>(_route_prefix),<span class="built_in">prefix_length</span>(_prefix_length)</span><br><span class="line">    ,<span class="built_in">next_hop</span>(_next_hop),<span class="built_in">interface_num</span>(_interface_num)</span><br><span class="line">    &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//! \brief A router that has multiple network interfaces and</span></span><br><span class="line"><span class="comment">//! performs longest-prefix-match routing between them.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Router</span> &#123;</span></span><br><span class="line">    <span class="comment">//! The router&#x27;s collection of network interfaces</span></span><br><span class="line">    std::vector&lt;AsyncNetworkInterface&gt; _interfaces&#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//! Send a single datagram from the appropriate outbound interface to the next hop,</span></span><br><span class="line">    <span class="comment">//! as specified by the route with the longest prefix_length that matches the</span></span><br><span class="line">    <span class="comment">//! datagram&#x27;s destination address.</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">route_one_datagram</span><span class="params">(InternetDatagram &amp;dgram)</span></span>;</span><br><span class="line"></span><br><span class="line">    std::vector&lt;route_rule&gt; _rules&#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//! Add an interface to the router</span></span><br><span class="line">    <span class="comment">//! \param[in] interface an already-constructed network interface</span></span><br><span class="line">    <span class="comment">//! \returns The index of the interface after it has been added to the router</span></span><br><span class="line">    <span class="function"><span class="keyword">size_t</span> <span class="title">add_interface</span><span class="params">(AsyncNetworkInterface &amp;&amp;interface)</span> </span>&#123;</span><br><span class="line">        _interfaces.<span class="built_in">push_back</span>(std::<span class="built_in">move</span>(interface));</span><br><span class="line">        <span class="keyword">return</span> _interfaces.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//! Access an interface by index</span></span><br><span class="line">    <span class="function">AsyncNetworkInterface &amp;<span class="title">interface</span><span class="params">(<span class="keyword">const</span> <span class="keyword">size_t</span> N)</span> </span>&#123; <span class="keyword">return</span> _interfaces.<span class="built_in">at</span>(N); &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//! Add a route (a forwarding rule)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add_route</span><span class="params">(<span class="keyword">const</span> <span class="keyword">uint32_t</span> route_prefix,</span></span></span><br><span class="line"><span class="params"><span class="function">                   <span class="keyword">const</span> <span class="keyword">uint8_t</span> prefix_length,</span></span></span><br><span class="line"><span class="params"><span class="function">                   <span class="keyword">const</span> std::optional&lt;Address&gt; next_hop,</span></span></span><br><span class="line"><span class="params"><span class="function">                   <span class="keyword">const</span> <span class="keyword">size_t</span> interface_num)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//! Route packets between the interfaces</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">route</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">prefix_equal</span><span class="params">(<span class="keyword">uint32_t</span> ip1, <span class="keyword">uint32_t</span> ip2, <span class="keyword">uint8_t</span> prefix_length)</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这段代码实现了一个多接口的路由器，其中每个接口都有一个异步接收数据报的队列。路由器的功能是根据最长前缀匹配算法对接收到的每个数据报进行路由，并将其发送到下一跳，以使其达到目标地址。</p><p><code>AsyncNetworkInterface</code>是一个对<code>NetworkInterface</code>的封装，它具有一个异步队列<code>_datagrams_out</code>，在接收到数据报后将其推送到队列中。它还覆盖了<code>NetworkInterface</code>的<code>recv_frame</code>方法，以便将数据报推送到队列中，以供稍后检索。</p><p><code>Router</code>类有一个包含所有网络接口的向量 <code>_interfaces</code>，一个包含所有路由表规则的向量 <code>_rules</code>，以及一个<code>add_interface</code>方法，用于添加接口。路由器还实现了一个<code>add_route</code>方法，该方法接受路由前缀、路由前缀长度、下一跳IP地址(可选)以及出站接口的索引。它将所有路由规则存储在一个向量中，以便在进行数据报路由时进行查找。此外，还实现了一个<code>route</code>方法，用于将路由器的所有接口一起轮询，处理每个接口上接收到的数据报，并调用<code>route_one_datagram</code>方法将其路由到下一跳。最后，还实现了一个<code>prefix_equal</code>方法，用于检查两个IP地址的前缀是否相同。</p><p>在路由表的最长前缀匹配算法中，对于目的地址，路由器从路由表中选择最具体的路由，该路由匹配前缀长度最长，而且其匹配的前缀位数与目标地址的前缀位数相同。<code>prefix_equal</code>方法用于比较两个IP地址的前缀。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//! \param[in] route_prefix The &quot;up-to-32-bit&quot; IPv4 address prefix to match the datagram&#x27;s destination address against</span></span><br><span class="line"><span class="comment">//! \param[in] prefix_length For this route to be applicable, how many high-order (most-significant) bits of the route_prefix will need to match the corresponding bits of the datagram&#x27;s destination address?</span></span><br><span class="line"><span class="comment">//! \param[in] next_hop The IP address of the next hop. Will be empty if the network is directly attached to the router (in which case, the next hop address should be the datagram&#x27;s final destination).</span></span><br><span class="line"><span class="comment">//! \param[in] interface_num The index of the interface to send the datagram out on.</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Router::add_route</span><span class="params">(<span class="keyword">const</span> <span class="keyword">uint32_t</span> route_prefix,</span></span></span><br><span class="line"><span class="params"><span class="function">                       <span class="keyword">const</span> <span class="keyword">uint8_t</span> prefix_length,</span></span></span><br><span class="line"><span class="params"><span class="function">                       <span class="keyword">const</span> optional&lt;Address&gt; next_hop,</span></span></span><br><span class="line"><span class="params"><span class="function">                       <span class="keyword">const</span> <span class="keyword">size_t</span> interface_num)</span> </span>&#123;</span><br><span class="line">    cerr &lt;&lt; <span class="string">&quot;DEBUG: adding route &quot;</span> &lt;&lt; Address::<span class="built_in">from_ipv4_numeric</span>(route_prefix).<span class="built_in">ip</span>() &lt;&lt; <span class="string">&quot;/&quot;</span> &lt;&lt; <span class="built_in"><span class="keyword">int</span></span>(prefix_length)</span><br><span class="line">         &lt;&lt; <span class="string">&quot; =&gt; &quot;</span> &lt;&lt; (next_hop.<span class="built_in">has_value</span>() ? next_hop-&gt;<span class="built_in">ip</span>() : <span class="string">&quot;(direct)&quot;</span>) &lt;&lt; <span class="string">&quot; on interface &quot;</span> &lt;&lt; interface_num &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    <span class="function">route_rule <span class="title">r</span><span class="params">(route_prefix,prefix_length,next_hop,interface_num)</span></span>;</span><br><span class="line">    _rules.<span class="built_in">push_back</span>(<span class="built_in">move</span>(r));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Router::add_route</code> 函数添加一个路由规则，包含路由表项中的路由前缀，前缀长度，下一跳地址（如果有），以及数据包的输出接口索引。这个函数打印了调试信息，用于检查添加的路由规则。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//! \param[in] dgram The datagram to be routed</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Router::route_one_datagram</span><span class="params">(InternetDatagram &amp;dgram)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">uint32_t</span> dst = dgram.<span class="built_in">header</span>().dst;</span><br><span class="line">    optional&lt;Address&gt; next_hop&#123;&#125;;</span><br><span class="line">    <span class="keyword">size_t</span> interface_num&#123;&#125;;</span><br><span class="line">    optional&lt;<span class="keyword">uint8_t</span>&gt; best_by_far&#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; r: _rules) &#123;</span><br><span class="line">        <span class="keyword">if</span>((!best_by_far.<span class="built_in">has_value</span>() || r.prefix_length&gt;best_by_far.<span class="built_in">value</span>()) &amp;&amp; <span class="built_in">prefix_equal</span>(dst,r.route_prefix,r.prefix_length))&#123;</span><br><span class="line">            next_hop = r.next_hop;</span><br><span class="line">            interface_num = r.interface_num;</span><br><span class="line">            best_by_far = r.prefix_length;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(best_by_far.<span class="built_in">has_value</span>())&#123;</span><br><span class="line">        <span class="keyword">if</span>(dgram.<span class="built_in">header</span>().ttl&gt;<span class="number">1</span>) &#123;</span><br><span class="line">            dgram.<span class="built_in">header</span>().ttl--;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(next_hop.<span class="built_in">has_value</span>()) &#123;</span><br><span class="line">                <span class="built_in">interface</span>(interface_num).<span class="built_in">send_datagram</span>(dgram,next_hop.<span class="built_in">value</span>());</span><br><span class="line">            &#125; </span><br><span class="line">            <span class="comment">// if not have next_hop, the next_hop is dgram&#x27;s destination hop</span></span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">interface</span>(interface_num).<span class="built_in">send_datagram</span>(dgram,Address::<span class="built_in">from_ipv4_numeric</span>(dst));</span><br><span class="line">            &#125;        </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Router::route_one_datagram</code> 函数根据路由表将数据报路由到下一个合适的接口。它使用路由表中最长前缀匹配的规则来查找应该用哪个输出接口。如果找到合适的路由规则，则检查数据报的 TTL 是否大于1。如果是，减少TTL并将数据报发送到下一个合适的接口。如果找不到合适的路由规则，数据报将被丢弃。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Router::route</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Go through all the interfaces, and route every incoming datagram to its proper outgoing interface.</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;interface : _interfaces) &#123;</span><br><span class="line">        <span class="keyword">auto</span> &amp;queue = interface.<span class="built_in">datagrams_out</span>();</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">not</span> queue.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="built_in">route_one_datagram</span>(queue.<span class="built_in">front</span>());</span><br><span class="line">            queue.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Router::route</code> 函数遍历路由器的所有网络接口，将每个接口的入队数据报依次路由到正确的输出接口上。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Router::prefix_equal</span><span class="params">(<span class="keyword">uint32_t</span> ip1, <span class="keyword">uint32_t</span> ip2, <span class="keyword">uint8_t</span> prefix_length)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(prefix_length==<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in"><span class="keyword">return</span></span> (ip1 &gt;&gt; (<span class="number">32</span>-prefix_length)) == (ip2 &gt;&gt; (<span class="number">32</span>-prefix_length));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Router::prefix_equal</code> 函数用于比较两个IP地址的最高 <code>prefix_length</code> 位是否相等。如果前缀长度为0，将返回 true。如果前缀长度不为0，则将两个地址右移（32-prefix_length）位，并比较结果是否相等。</p><h2 id="测试">测试</h2><p>你可以通过运行<code>make checklab6</code>来测试你的实现。这将在特定的模拟网络中测试路由器，如图2所示。</p><p><img src="https://cdn.jsdelivr.net/gh/Misaka-9982-coder/img_hosting/img/2.jpg" alt=""></p><p>图2：应用/网络模拟器工具中使用的模拟测试网络，也是由<code>make check lab6</code>运行的。 (有趣的事实：uun网络是<a href="https://whois.arin.net/rest/net/NET-198-178-229-0-1">David Mazieres的互联网切片，于1993年分配</a>。<code>whois</code>工具或链接的网站可以用来查询谁控制了每个IP地址的分配)。</p><h2 id="Q-A">Q &amp; A</h2><ul><li><p>我应该用什么数据结构来记录路由表？</p><p>由你决定! 但不需要太过疯狂。每个数据报需要做O(n)个工作是完全可以接受的，其中n是路由表的条目数。如果你想做一些更有效的事情，我们鼓励你在优化之前先得到一个有效的实现，并仔细记录和评论你选择的任何实现。</p></li><li><p>如何将以地址对象形式出现的IP地址转换为可以写入ARP消息的32位原始整数？</p><p>使用<code>Address::ipv4_numeric()</code>方法。</p></li><li><p>如何将一个以原始32位整数形式出现的IP地址转换为一个地址对象？</p><p>使用 <code>Address::from_ipv4_numeric()</code>方法。</p></li><li><p>如何将一个32位IP地址的最高n位(其中0≤n≤32) 与另一个32位IP地址的最重要的n位进行比较？</p><p>这可能是这项任务中”最棘手”的部分，因为要让逻辑正确。也许值得在C++中写一个小的测试程序(一个简短的独立程序)或者在Sponge中添加一个测试，以验证你对相关的C++操作符的理解，并仔细检查你的逻辑。</p><p>回顾一下，在C和C++中，将一个32位整数移位32位，可能会产生未定义行为。使用<code>make_clean</code>，然后在编译代码时打开sanitizer(<code>cmake -DCMAKE_BUILD_TYPE=RelASan</code>)以便在你提交之前尝试捕捉你的代码中任何未定义的行为。</p><p>你可以通过在<code>build</code>目录中运行<code>./apps/network simulator</code>来直接运行路由器测试。</p></li><li><p>如果路由器没有到目的地的路由，或者TTL为零，它是不是应该向数据报的源头发送一个ICMP错误信息？</p><p>在现实生活中，是的，这将是有帮助的。但在这个实验里没有必要——丢弃数据报就足够了。(即使在现实生活中，也不是每个路由器都会在这些情况下向源头发送ICMP消息)。</p></li><li><p>我如何运行本实验的测试套件？</p><p><code>make check_lab6</code>(两个测试)。或者你可以用<code>make check</code>运行整个测试套件(161个测试)。</p></li><li><p>如果这个PDF出来后还有更多的FAQ，我在哪里可以看到？</p><p>请定期查看网站(<a href="https://cs144.github.io/lab_faq.html">https://cs144.github.io/lab_faq.html</a>)和Piazza。</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="CS144" scheme="http://www.misaka-9982.com/tags/CS144/"/>
    
    <category term="Network" scheme="http://www.misaka-9982.com/tags/Network/"/>
    
  </entry>
  
  <entry>
    <title>CS144-Lab5</title>
    <link href="http://www.misaka-9982.com/2023/02/24/CS144-Lab5/"/>
    <id>http://www.misaka-9982.com/2023/02/24/CS144-Lab5/</id>
    <published>2023-02-24T14:32:48.000Z</published>
    <updated>2023-02-25T07:21:58.861Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="概述-3">概述</h2><p>在本周的实验中，你将深入研究并实现一个网络接口：世界各地的互联网数据报和一跳一跳的链路层以太网帧之间的桥梁。该组件可以“隐藏”在早期实验的TCP/IP实现之下，但它也将用于不同的设置：当你在实验6中建立一个路由器时，它将在网络接口之间路由数据报。图1显示了网络接口如何适应这两种设置。</p><p>你对网络接口的实现将使用与你在实验0-4中使用的相同的Sponge库，并增加了类和测试。但是，应大众的要求，本实验的大部分(但不是全部)都可以在不依赖早期实验的TCP连接的情况下完成。</p><p>在过去的实验中，你写了一个TCP实现，可以成功地与使用TCP的任何其他计算机交换TCP段。这些网段实际上是如何传达给对等方的TCP实现的呢？正如我们所讨论的，有几种选择：</p><ul><li><p><strong>TCP-in-UDP-in-IP</strong>：TCP段可以在用户数据报的有效载荷中携带。在正常(用户空间)环境下工作时，这是最容易实现的。Linux提供了一个接口(“互联网数据报套接字”，<code>UDPSocket</code>)，允许应用程序只提供用户数据报和目标地址的有效载荷，内核负责构造UDP报头、IP报头和以太网报头，然后将数据包发送到适当的下一跳。内核确保每个套接字具有本地和远程地址以及端口号的独占组合，并且由于内核是将这些地址和端口号写入UDP和IP头的内核，因此它可以保证不同应用程序之间的隔离。</p></li><li><p><strong>TCP-in-IP</strong>：在通常情况下，TCP段几乎总是直接放在互联网数据报中，在IP和TCP报头之间没有UDP报头。这就是人们所说的”TCP/IP”。这在实现上要困难一些。Linux提供了一个称为TUN设备的接口，该接口允许应用程序提供整个Internet数据报，内核负责其余部分(编写以太网报头，并通过物理以太网卡实际发送，等等)。但是现在，应用程序必须自己构造完整的IP报头，而不仅仅是有效载荷。</p><p>你已经做了这个。在实验4中，我们为你提供了一个表示Internet数据报的对象，它知道如何解析和序列化自身(<a href="https://cs144.github.io/doc/lab5/class_i_pv4_datagram.html">tcp_helpers/ipv4_datagram.{hh,cc}</a>)以及在IP中封装TCP段的逻辑(现在可以在<a href="https://github.com/CS144/sponge/blob/lab5-startercode/libsponge/tcp_helpers/tcp_over_ip.cc">tcp_helpers/tcp_over_ip.cc</a>中找到)。<code>CS144TCPSocket</code>使用这些工具将<code>TCPConnection</code>连接到TUN设备。</p></li><li><p><strong>TCP-in-IP-in-Ethernet</strong>：在上述方法中，我们仍然依赖于Linux内核的部分网络栈。每次你的代码向TUN设备写入一个IP数据报时，Linux必须构建一个适当的链路层(以太网)帧，并将IP数据报作为其有效载荷。这意味着Linux必须根据下一跳的IP地址来计算出下一跳的以太网目标地址。如果它还不知道这个映射，Linux就会广播一个查询，问：”谁要求使用下面的IP地址？你的以太网地址是什么？”并等待回应。</p><p>这些功能由网络接口执行：一个将出站IP数据报翻译成链路层(如以太网)帧的组件，反之亦然。(在实际系统中，网络接口通常有<code>eth0</code>、<code>eth1</code>、<code>wlan0</code>等名称。) <strong>在本周的实验中</strong>，你将实现一个网络接口，并把它放在TCP/IP协议栈的最底层。你的代码将产生原始的以太网帧，这些帧将通过一个叫做TAP设备的接口交给Linux——类似于TUN设备，但更底层，因为它交换的是原始链路层帧而不是IP数据报。</p></li></ul><p>大部分的工作是为每个下一跳的IP地址查找(和缓存)以太网地址。这方面的协议被称为<strong>地址解析协议(ARP)</strong>。</p><p>我们已经为你提供了单元测试，使你的网络接口能够正常运行。然后，在本实验结束时，你将略微修改你的<code>webget</code>，以使用你的TCP实现，这样整个过程将生成原始以太网帧，并且仍然可以通过Internet与真正的Web服务器通信。在实验6中，你将在TCP的上下文之外使用同一个网络接口，作为IP路由器的一部分。</p><p><img src="https://cdn.jsdelivr.net/gh/Misaka-9982-coder/img_hosting/img/1.jpg" alt="img"></p><p>图1：网络接口连接互联网数据报和链路层帧。该组件作为主机TCP/IP堆栈的一部分(左侧)和IP路由器的一部分(右侧)都很有用。</p><h2 id="开始-3">开始</h2><ol><li>请确保你已经提交了你在实验4中的所有解决方案。请不要修改<code>libsponge</code>目录顶层以外的任何文件，或者<code>webget.cc</code>。(请不要添加代码所依赖的额外文件。)否则，你可能会在合并实验5的启动代码时遇到麻烦。</li><li>在实验作业的存储库中，运行<code>git fetch</code>来检索实验作业的最新版本。</li><li>通过运行<code>git merge origin/lab5-startercode</code>，下载实验5的启动代码。</li><li>在<code>build</code>目录中，编译源代码：<code>make</code>(编译时可以运行<code>make -j4</code>以使用四个处理器)。</li><li>在<code>build</code>目录外，打开并开始编辑<code>writeups/lab5.md</code>文件。这是你实验报告的模板，将包含在你提交的内容中。</li></ol><h2 id="地址解析协议">地址解析协议</h2><p>在开始编码之前，请阅读：</p><ul><li><a href="https://cs144.github.io/doc/lab5/class_network_interface.html">NetworkInterface对象的公共接口</a>。</li><li>维基百科对<a href="https://en.wikipedia.org/wiki/Address_Resolution_Protocol">ARP总结</a>和原始<a href="https://datatracker.ietf.org/doc/html/rfc826">ARP规范(RFC 1982)</a>。</li><li><a href="https://cs144.github.io/doc/lab5/class_ethernet_frame.html">EthernetFrame</a>和<a href="https://cs144.github.io/doc/lab5/struct_ethernet_header.html">EthernetHeader</a>对象的文档/实现。</li><li><a href="https://cs144.github.io/doc/lab5/class_i_pv4_datagram.html">IPV4数据报</a>和<a href="https://cs144.github.io/doc/lab5/struct_i_pv4_header.html">IPv4Header</a>对象的文档和实现(可以解析和序列化互联网数据报，序列化后可以分配给以太网帧的有效载荷)。</li><li><a href="https://cs144.github.io/doc/lab5/struct_a_r_p_message.html">ARPMessage</a>对象的文档和实现(它知道如何解析和序列化ARP消息，并且在序列化时还可以作为以太网帧的有效载荷)。</li></ul><p>本实验的主要任务是实现<code>NetworkInterface</code>的三种主要方法(在<code>network_interface.cc</code>文件中)，维护从IP地址到以太网地址的映射。映射是一个缓存，或“软状态”：NetworkInterface为了提高效率而保留它，但是如果它必须从头开始重新启动，映射将自然地重新生成，而不会引起问题。</p><ol><li><p><code>void NetworkInterface::send_datagram(const InternetDatagram &amp;dgram, const Address &amp;next_hop)</code></p><p>当调用者(如你的TCPConnection或路由器)希望将出站互联网(IP)数据报发送到下一个跃点时，将调用此方法。(请不要把数据报的最终目的地与下一跳混为一谈，后者在数据报自己的报头中是目标地址。在这个实验里，你只关心下一跳的地址。)该接口的工作是将此数据报转换为以太网帧并(最终)发送。</p><ul><li>如果目标以太网地址已知，请立即发送。创建以太网帧(<code>type = EthernetHeader::TYPE_IPv4</code>)，将有效载荷设置为序列化数据报，并设置源地址和目标地址。</li><li>如果目标以太网地址未知，广播下一跳以太网地址的ARP请求，并将IP数据报排队，以便在收到ARP回复后发送。</li></ul><p><strong>例外</strong>：你不想让ARP请求充斥网络。如果网络接口在过去5秒内已经发送了一个关于相同IP地址的ARP请求，不要发送第二个，只需等待第一个请求的回复即可。同样，对数据报进行排队，直到了解到目标以太网地址。</p></li><li><p><code>optional&lt;InternetDatagram&gt; NetworkInterface::recv_frame(const EthernetFrame &amp;frame)</code></p><p>当以太网帧从网络到达时，调用此方法。代码应忽略任何不发送到网络接口的帧(也就是说，只接受以太网目的地是广播地址或存储在以太网地址成员变量<code>_ethernet_address</code>中的以太网地址)。</p><ul><li>如果入站帧是IPv4，将有效载荷解析为<code>InternetDatagram</code>，如果成功(意味着<code>parse()</code>方法返回<code>ParseResult::NoError</code>)，则将生成的<code>InternetDatagram</code>返回给调用者。</li><li>如果入站帧是ARP，将有效载荷解析为ARP消息，如果成功，记住发送方的IP地址和以太网地址之间的映射，持续30秒。(从请求和回复中学习映射。)此外，如果是ARP请求请求我们的IP地址，请发送适当的ARP回复。</li></ul></li><li><p><code>void NetworkInterface::tick(const size_t ms_since_last_tick)</code></p><p>随着时间的推移，这将被调用。使任何已经过期的IP到以太网的映射过期。</p></li></ol><p>你可以通过运行<code>ctest -V -R &quot;^arp&quot;</code>来测试你的实现。此测试不依赖于你的TCP实现。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NetworkInterface</span> &#123;</span></span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">//! Ethernet (known as hardware, network-access-layer, or link-layer) address of the interface</span></span><br><span class="line">    EthernetAddress _ethernet_address;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//! IP (known as internet-layer or network-layer) address of the interface</span></span><br><span class="line">    Address _ip_address;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//! outbound queue of Ethernet frames that the NetworkInterface wants sent</span></span><br><span class="line">    std::queue&lt;EthernetFrame&gt; _frames_out&#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">time_t</span> <span class="keyword">size_t</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// map + heap to achieve O(lgN) search,insert,expire check operation of IP-to-Ethernet mappings</span></span><br><span class="line">    std::map&lt;<span class="keyword">uint32_t</span>, std::pair&lt;EthernetAddress, <span class="keyword">time_t</span>&gt;&gt; _arp_table&#123;&#125;;</span><br><span class="line">    std::priority_queue&lt;std::pair&lt;<span class="keyword">time_t</span>, <span class="keyword">uint32_t</span>&gt;,</span><br><span class="line">                        std::vector&lt;std::pair&lt;<span class="keyword">time_t</span>, <span class="keyword">uint32_t</span>&gt;&gt;,</span><br><span class="line">                        std::greater&lt;std::pair&lt;<span class="keyword">time_t</span>, <span class="keyword">uint32_t</span>&gt;&gt;&gt;</span><br><span class="line">        _arp_failure_time&#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">time_t</span> _curr_time&#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// datagrams not sent yet</span></span><br><span class="line">    std::queue&lt;std::pair&lt;InternetDatagram, Address&gt;&gt; _dgrames_queue&#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// &lt; arp request sent and not get response yet, timestamp, ip to find&gt;</span></span><br><span class="line">    std::tuple&lt;<span class="keyword">bool</span>, <span class="keyword">time_t</span>, <span class="keyword">uint32_t</span>&gt; _arp_retransmission_timer&#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//! \brief Construct a network interface with given Ethernet (network-access-layer) and IP (internet-layer) addresses</span></span><br><span class="line">    <span class="built_in">NetworkInterface</span>(<span class="keyword">const</span> EthernetAddress &amp;ethernet_address, <span class="keyword">const</span> Address &amp;ip_address);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//! \brief Access queue of Ethernet frames awaiting transmission</span></span><br><span class="line">    <span class="function">std::queue&lt;EthernetFrame&gt; &amp;<span class="title">frames_out</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> _frames_out; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//! \brief Sends an IPv4 datagram, encapsulated in an Ethernet frame (if it knows the Ethernet destination address).</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//! Will need to use [ARP](\ref rfc::rfc826) to look up the Ethernet destination address for the next hop</span></span><br><span class="line">    <span class="comment">//! (&quot;Sending&quot; is accomplished by pushing the frame onto the frames_out queue.)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">send_datagram</span><span class="params">(<span class="keyword">const</span> InternetDatagram &amp;dgram, <span class="keyword">const</span> Address &amp;next_hop)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//! \brief Receives an Ethernet frame and responds appropriately.</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//! If type is IPv4, returns the datagram.</span></span><br><span class="line">    <span class="comment">//! If type is ARP request, learn a mapping from the &quot;sender&quot; fields, and send an ARP reply.</span></span><br><span class="line">    <span class="comment">//! If type is ARP reply, learn a mapping from the &quot;sender&quot; fields.</span></span><br><span class="line">    <span class="function">std::optional&lt;InternetDatagram&gt; <span class="title">recv_frame</span><span class="params">(<span class="keyword">const</span> EthernetFrame &amp;frame)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//! \brief Called periodically when time elapses</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">tick</span><span class="params">(<span class="keyword">const</span> <span class="keyword">time_t</span> ms_since_last_tick)</span></span>;</span><br><span class="line">    <span class="comment">// boardcast to find the Ethernet addr of an ip </span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">send_arp_request</span><span class="params">(<span class="keyword">const</span> <span class="keyword">uint32_t</span> ip_to_find)</span></span>;</span><br><span class="line">    <span class="comment">// resend the datagrams queued for not knowing their Ehternet addrs</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">resend</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li><code>_ethernet_address</code> 和 <code>_ip_address</code> 分别表示该接口的以太网地址和 IP 地址。</li><li><code>_frames_out</code> 保存尚未发送的数据帧，通过 <code>frames_out()</code> 方法获取该队列。</li><li><code>_arp_table</code> 和 <code>_arp_failure_time</code> 用于保存 IP 地址和以太网地址的映射，前者保存正常情况下的映射，后者保存因为 ARP 请求失败而需要重试的映射。</li><li><code>_dgrames_queue</code> 保存尚未发送的数据报，其中数据报表示一个完整的 IP 数据包。</li><li><code>send_datagram()</code> 方法用于发送 IP 数据报，其中需要通过 ARP 协议找到下一跳的以太网地址。</li><li><code>recv_frame()</code> 方法用于接收以太网帧并进行处理，如果接收到的是 IPv4 数据帧则返回一个数据报，如果是 ARP 请求或回复则需要进行对应的处理。</li><li><code>tick()</code> 方法表示时间流逝，用于处理 ARP 请求的超时和重新发送尚未发送的数据报。</li><li><code>send_arp_request()</code> 方法用于向网络广播 ARP 请求，以寻找特定 IP 地址的以太网地址。</li><li><code>resend()</code> 方法用于重新发送尚未发送成功的数据报。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">NetworkInterface::resend</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (!_dgrames_queue.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="keyword">auto</span> dgrams = _dgrames_queue.<span class="built_in">front</span>();</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">uint32_t</span> next_hop_ip = dgrams.second.<span class="built_in">ipv4_numeric</span>();</span><br><span class="line">        <span class="comment">// if destination Ehernet address known</span></span><br><span class="line">        <span class="keyword">if</span> (_arp_table.<span class="built_in">count</span>(next_hop_ip)) &#123;</span><br><span class="line">            _dgrames_queue.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="built_in">send_datagram</span>(dgrams.first, dgrams.second);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>resend()</code>，用于重新发送还未发送成功的数据报。函数中，通过 <code>while</code> 循环遍历 <code>_dgrames_queue</code>（存储了还未成功发送的数据报），如果下一跳的 Ethernet 地址已经存在（即在 <code>_arp_table</code> 中），那么就将该数据报从队列中移除，调用 <code>send_datagram()</code> 方法进行发送，如果下一跳的 Ethernet 地址不存在，那么就退出循环。</p><p>因为在 <code>send_datagram()</code> 中，如果目的地的 Ethernet 地址不可用，则会将该数据报添加到 <code>_dgrames_queue</code> 中，等待重新发送。因此，<code>resend()</code> 的作用就是从队列中取出数据报重新发送，直到队列为空或者下一跳的 Ethernet 地址可用为止。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//! \param[in] dgram the IPv4 datagram to be sent</span></span><br><span class="line"><span class="comment">//! \param[in] next_hop the IP address of the interface to send it to (typically a router or default gateway, but may also be another host if directly connected to the same network as the destination)</span></span><br><span class="line"><span class="comment">//! (Note: the Address type can be converted to a uint32_t (raw 32-bit IP address) with the Address::ipv4_numeric() method.)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">NetworkInterface::send_datagram</span><span class="params">(<span class="keyword">const</span> InternetDatagram &amp;dgram, <span class="keyword">const</span> Address &amp;next_hop)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// convert IP address of next hop to raw 32-bit representation (used in ARP header)</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">uint32_t</span> next_hop_ip = next_hop.<span class="built_in">ipv4_numeric</span>();</span><br><span class="line">    <span class="comment">// if destination Ehernet address known</span></span><br><span class="line">    <span class="keyword">if</span> (_arp_table.<span class="built_in">count</span>(next_hop_ip)) &#123;</span><br><span class="line">        EthernetFrame to_send;</span><br><span class="line">        to_send.<span class="built_in">payload</span>() = dgram.<span class="built_in">serialize</span>();</span><br><span class="line">        to_send.<span class="built_in">header</span>().dst = _arp_table[next_hop_ip].first;</span><br><span class="line">        to_send.<span class="built_in">header</span>().src = _ethernet_address;</span><br><span class="line">        to_send.<span class="built_in">header</span>().type = EthernetHeader::TYPE_IPv4;</span><br><span class="line">        _frames_out.<span class="built_in">emplace</span>(to_send);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;                                          <span class="comment">// if destination Ethernet address unkown</span></span><br><span class="line">        <span class="keyword">if</span> (!get&lt;<span class="keyword">bool</span>&gt;(_arp_retransmission_timer)) &#123;  <span class="comment">// no arp sent yet</span></span><br><span class="line">            <span class="built_in">send_arp_request</span>(next_hop_ip);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//  queue the IP datagram</span></span><br><span class="line">        _dgrames_queue.<span class="built_in">push</span>(&#123;dgram, next_hop&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">resend</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码实现了将一个 IPv4 数据报通过该网络接口发送出去的功能。其中，数据报和下一个跳的地址（一般是路由器或者默认网关，但也可能是直接连接在同一网络中的另一个主机）作为参数传入。</p><p>首先，将下一跳地址转换为 uint32_t 类型的 IPv4 地址。如果已知下一跳的 Ethernet 地址，则将数据报封装成 Ethernet 帧并发送出去。如果下一跳的 Ethernet 地址不可知，则将此数据报加入到待发送数据报队列中，并发送 ARP 请求以查找下一跳的 Ethernet 地址。</p><p>最后，通过调用 <code>resend()</code> 函数来遍历待发送数据报队列，查看其中是否有已知下一跳地址的数据报，如果有，则将其从队列中弹出，并重复调用 <code>send_datagram()</code> 函数进行数据报发送。如果待发送数据报队列中没有已知下一跳地址的数据报，则函数退出。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//! \param[in] frame the incoming Ethernet frame</span></span><br><span class="line"><span class="function">optional&lt;InternetDatagram&gt; <span class="title">NetworkInterface::recv_frame</span><span class="params">(<span class="keyword">const</span> EthernetFrame &amp;frame)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (frame.<span class="built_in">header</span>().dst != _ethernet_address &amp;&amp; frame.<span class="built_in">header</span>().dst != ETHERNET_BROADCAST)</span><br><span class="line">        <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">    <span class="keyword">if</span> (frame.<span class="built_in">header</span>().type == EthernetHeader::TYPE_IPv4) &#123;</span><br><span class="line">        InternetDatagram ret;</span><br><span class="line">        <span class="keyword">if</span> (ret.<span class="built_in">parse</span>(<span class="built_in">Buffer</span>(frame.<span class="built_in">payload</span>())) == ParseResult::NoError) &#123;</span><br><span class="line">            <span class="keyword">return</span> ret;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (frame.<span class="built_in">header</span>().type == EthernetHeader::TYPE_ARP) &#123;</span><br><span class="line">        <span class="comment">// parse</span></span><br><span class="line">        ARPMessage arp_packet;</span><br><span class="line">        <span class="keyword">if</span> (arp_packet.<span class="built_in">parse</span>(<span class="built_in">Buffer</span>(frame.<span class="built_in">payload</span>())) == ParseResult::NoError) &#123;</span><br><span class="line">            <span class="comment">// record the sender&#x27;s info</span></span><br><span class="line">            _arp_table[arp_packet.sender_ip_address] = &#123;arp_packet.sender_ethernet_address, _curr_time + <span class="number">30</span> * <span class="number">1000</span>&#125;;</span><br><span class="line">            <span class="comment">// turn off timer</span></span><br><span class="line">            <span class="keyword">if</span> (get&lt;<span class="keyword">bool</span>&gt;(_arp_retransmission_timer) &amp;&amp;</span><br><span class="line">                get&lt;<span class="keyword">uint32_t</span>&gt;(_arp_retransmission_timer) == arp_packet.sender_ip_address)</span><br><span class="line">                _arp_retransmission_timer = <span class="built_in">make_tuple</span>(<span class="literal">false</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">            _arp_failure_time.<span class="built_in">push</span>(&#123;_curr_time + <span class="number">30</span> * <span class="number">1000</span>, arp_packet.sender_ip_address&#125;);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// send reply</span></span><br><span class="line">            <span class="keyword">if</span> (arp_packet.target_ip_address == _ip_address.<span class="built_in">ipv4_numeric</span>() &amp;&amp;</span><br><span class="line">                arp_packet.opcode == ARPMessage::OPCODE_REQUEST) &#123;</span><br><span class="line">                EthernetFrame arp_to_send;</span><br><span class="line">                <span class="comment">// header</span></span><br><span class="line">                arp_to_send.<span class="built_in">header</span>().dst = arp_packet.sender_ethernet_address;</span><br><span class="line">                arp_to_send.<span class="built_in">header</span>().src = _ethernet_address;</span><br><span class="line">                arp_to_send.<span class="built_in">header</span>().type = EthernetHeader::TYPE_ARP;</span><br><span class="line">                <span class="comment">// payload</span></span><br><span class="line">                ARPMessage arp_reply;</span><br><span class="line">                arp_reply.opcode = ARPMessage::OPCODE_REPLY;</span><br><span class="line">                arp_reply.sender_ethernet_address = _ethernet_address;</span><br><span class="line">                arp_reply.sender_ip_address = _ip_address.<span class="built_in">ipv4_numeric</span>();</span><br><span class="line">                arp_reply.target_ethernet_address = arp_packet.sender_ethernet_address;</span><br><span class="line">                arp_reply.target_ip_address = arp_packet.sender_ip_address;</span><br><span class="line">                arp_to_send.<span class="built_in">payload</span>() = <span class="built_in">BufferList</span>(<span class="built_in">move</span>(arp_reply.<span class="built_in">serialize</span>()));</span><br><span class="line">                <span class="comment">// send reply</span></span><br><span class="line">                <span class="comment">// cerr&lt;&lt; &quot;send reply&quot; &lt;&lt; arp_reply.to_string() &lt;&lt;endl;</span></span><br><span class="line">                _frames_out.<span class="built_in">emplace</span>(arp_to_send);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">resend</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法是在网络接口接收到一个新的以太网帧时被调用。</p><p>如果接收到帧的目的地址不是该接口的以太网地址，也不是广播地址，那么说明该帧不是发给该接口的，因此该方法返回一个空的可选值。</p><p>如果该帧包含一个IPv4数据报，该方法尝试从帧的负载中解析数据报。如果解析成功，该方法返回解析后的数据报，以可选值的形式封装返回。</p><p>如果该帧包含一个ARP消息，该方法尝试从帧的负载中解析消息。如果解析成功，该方法会更新ARP表中的发送者信息，关闭对应的ARP重传计时器（如果有的话），并将ARP条目的到期时间推入到ARP失败时间堆中。如果ARP消息是一个针对该接口IP地址的ARP请求，该方法会构建一个ARP回复并将其发送回发送者。</p><p>在处理接收到的帧后，该方法调用resend()方法检查是否有任何等待ARP解析的数据报被排队。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//! \param[in] ms_since_last_tick the number of milliseconds since the last call to this method</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">NetworkInterface::tick</span><span class="params">(<span class="keyword">const</span> <span class="keyword">time_t</span> ms_since_last_tick)</span> </span>&#123;</span><br><span class="line">    _curr_time += ms_since_last_tick;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Expire any IP-to-Ethernet mappings that have expired.</span></span><br><span class="line">    <span class="keyword">while</span> (!_arp_failure_time.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="keyword">auto</span> arp_entry = _arp_failure_time.<span class="built_in">top</span>();</span><br><span class="line">        <span class="keyword">if</span> (arp_entry.first &lt;= _curr_time) &#123;</span><br><span class="line">            _arp_failure_time.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">if</span> (_arp_table[arp_entry.second].second &lt;= _curr_time)</span><br><span class="line">                _arp_table.<span class="built_in">erase</span>(arp_entry.second);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Resend arp if no response</span></span><br><span class="line">    <span class="keyword">if</span> (get&lt;<span class="keyword">bool</span>&gt;(_arp_retransmission_timer) &amp;&amp; _curr_time - get&lt;<span class="keyword">time_t</span>&gt;(_arp_retransmission_timer) &gt; <span class="number">5</span> * <span class="number">1000</span>) &#123;</span><br><span class="line">        <span class="keyword">auto</span> ip_to_find = get&lt;<span class="keyword">uint32_t</span>&gt;(_arp_retransmission_timer);</span><br><span class="line">        <span class="built_in">send_arp_request</span>(ip_to_find);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>tick() 方法会定期调用来执行各种维护任务。</p><p>该方法通过将自上次调用该方法以来经过的毫秒数添加到当前时间来更新当前时间。</p><p>然后，该方法通过迭代 ARP 失败时间堆来检查是否有已过期的 IP 到 Ethernet 映射。如果堆中的某个条目的过期时间小于或等于当前时间，则该方法将该条目从堆中弹出，并检查对应的 ARP 表中的 ARP 条目是否也已过期。如果 ARP 条目已过期，则该方法从 ARP 表中删除该条目。</p><p>接下来，该方法检查是否需要重新发送 ARP 请求。如果已经发送了 ARP 请求且当前时间减去请求发送时间大于 5 秒，则该方法会重新发送 ARP 请求。</p><p>总体而言，tick() 方法确保已过期的 ARP 条目从 ARP 表中删除，并在及时未收到响应时重新发送 ARP 请求。</p><ul><li><code>NetworkInterface::NetworkInterface(const EthernetAddress &amp;ethernet_address, const Address &amp;ip_address)</code>：构造函数，初始化网络接口的以太网地址和 IP 地址。</li><li><code>NetworkInterface::send_datagram(const InternetDatagram &amp;dgram, const Address &amp;next_hop)</code>：发送 IP 数据包，如果目的 IP 对应的以太网地址已知，则直接封装成以太网帧并通过 <code>_frames_out</code> 成员变量发送出去，否则发送 ARP 请求并将 IP 数据包加入到待发送队列 <code>_dgrames_queue</code> 中等待。</li><li><code>NetworkInterface::recv_frame(const EthernetFrame &amp;frame)</code>：接收以太网帧，如果帧的目的地址是本机的以太网地址或者广播地址，则根据帧类型分别处理。如果是 IP 数据帧，尝试解析出 IP 数据包并返回；如果是 ARP 请求或响应帧，则更新 ARP 表，并根据请求发送响应帧。</li><li><code>NetworkInterface::tick(const time_t ms_since_last_tick)</code>：定期调用的方法，用于处理 ARP 表项的过期和 ARP 请求的超时重传。</li><li><code>NetworkInterface::send_arp_request(const uint32_t ip_to_find)</code>：发送 ARP 请求，将请求封装成以太网帧并通过 <code>_frames_out</code> 成员变量发送出去，并设置超时计时器 <code>_arp_retransmission_timer</code>。</li><li><code>NetworkInterface::resend()</code>：定期检查待发送队列 <code>_dgrames_queue</code> 中是否有 IP 数据包可以发送，如果目的 IP 对应的以太网地址已知，则封装成以太网帧并通过 <code>_frames_out</code> 成员变量发送出去，否则停止检查。</li></ul><h2 id="webget回顾">webget回顾</h2><p>还记得你在实验0中写的<code>webget.cc</code>吗(在<code>TCPSocket</code>中使用Linux提供的TCP实现)？还记得你在实验4中如何修改它，以便在<code>CS144TCPSocket</code>中使用你自己的TCP-in-IP实现吗？如上所述，这仍然依赖于Linux内核作为堆栈的一部分：在IP和链路层(以太网)之间转换的网络接口。</p><p>我们希望你在不更改任何其他内容的情况下将其切换为使用网络接口。你只需将<code>CS144TCPSocket</code>类型替换为<code>FullStackSocket</code>。</p><p>这将使用TCP-in-IP-in-Ethernet堆栈，如图1(左侧)所示：你的<code>webget.cc</code>应用程序，在TCP的TCPConnection实现之上，在TCP-in-IP的<a href="https://github.com/CS144/sponge/blob/lab5-startercode/libsponge/tcp_helpers/tcp_over_ip.cc">tcp_helpers/tcp_over_ip.cc</a>代码之上，在<code>NetworkInterface</code>之上。</p><p>重新编译并运行<code>make check_lab5</code>以确认你已经完成了完整的堆栈：你已经在自己完整的TCP实现和自己的网络接口实现之上编写了一个基本的网络抓取程序，并且它仍然成功地与真正的Web服务器通信。</p><p>如果遇到问题，请尝试手动运行该程序：<code>./apps/webget cs144.keithw.org /hasher/xyzzy</code>，并尝试使用<code>wireshark</code>捕获它发送和接收的内容。你可以通过运行<code>sudo TCPdump -i tap10 -w /tmp/packets.tap</code>来保存它正在发送和接收的分组。然后在<code>wireshark</code>中打开<code>/tmp/packets.tap</code>文件。</p><h2 id="完整代码-5">完整代码</h2><p>- <a href="https://github.com/Misaka-9982-coder/CS144-fa21/blob/optimize/libsponge/network_interface.hh">network_interface.hh</a></p><p>- <a href="https://github.com/Misaka-9982-coder/CS144-fa21/blob/optimize/libsponge/network_interface.cc">network_interface.cc</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="CS144" scheme="http://www.misaka-9982.com/tags/CS144/"/>
    
    <category term="Network" scheme="http://www.misaka-9982.com/tags/Network/"/>
    
  </entry>
  
  <entry>
    <title>Makefile 和 CMake</title>
    <link href="http://www.misaka-9982.com/2023/02/20/Makefile-%E5%92%8C-CMake/"/>
    <id>http://www.misaka-9982.com/2023/02/20/Makefile-%E5%92%8C-CMake/</id>
    <published>2023-02-20T09:44:45.000Z</published>
    <updated>2023-02-20T09:45:11.865Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Makefile">Makefile</h2><h3 id="Reference">Reference</h3><p><a href="https://www.bilibili.com/video/BV188411L7d2">Makefile 20分钟入门，简简单单，展示如何使用Makefile管理和编译C++代码</a></p><h3 id="简介">简介</h3><p>Makefile 是一个用于构建（Build）软件的文件，它包含了一组规则和命令，用于自动化构建和编译源代码，生成目标文件或可执行程序等。Makefile 是一个文本文件，它的格式通常是：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">target: dependencies</span><br><span class="line">        <span class="built_in">command</span></span><br></pre></td></tr></table></figure><p>其中，<code>target</code> 是一个目标文件或操作的名称，<code>dependencies</code> 是构建目标所依赖的文件或操作，<code>command</code> 是生成目标的命令。Makefile 文件中的规则和命令由 make 命令读取并执行，自动构建软件。</p><p>Makefile 的主要作用是提高软件开发过程的效率和可靠性。通过编写 Makefile，开发人员可以避免手动执行构建和编译操作，减少出错的可能性，同时还可以利用 make 工具的依赖关系自动化处理，只编译发生了变化的源代码，避免重复工作。Makefile 还可以方便地扩展到多个平台和项目中，支持更加灵活的软件构建和管理。</p><p>Makefile 是 Linux 和 Unix 系统上的一种常用工具，也逐渐被其他操作系统所采用。除了 C/C++ 项目，Makefile 也可以用于其他编程语言和项目的构建。</p><h3 id="准备文件">准备文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ tree hello</span><br><span class="line">hello</span><br><span class="line">├── factorial.cpp</span><br><span class="line">├── functions.h</span><br><span class="line">├── main.cpp</span><br><span class="line">└── printhello.cpp</span><br><span class="line"></span><br><span class="line">1 directory, 4 files</span><br></pre></td></tr></table></figure><p><code>functions.h</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> _FUNCTIONS_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _FUNCTIONS_H_</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printhello</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">factorial</span><span class="params">(<span class="keyword">int</span> n)</span></span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><p><code>printhello.cpp</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;functions.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printhello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Hello World!&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>factorial.cpp</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;functions.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">factorial</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> n * <span class="built_in">factorial</span>(n - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>main.cpp</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _FUNCTIONS_H_</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;functions.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printhello</span>();</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;This is main: &quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;This factorial of 5 is : &quot;</span>  &lt;&lt; <span class="built_in">factorial</span>(<span class="number">5</span>) &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ g++ main.cpp factorial.cpp printhello.cpp -o main</span><br><span class="line">$ ./main</span><br><span class="line">Hello World!</span><br><span class="line">This is main:</span><br><span class="line">This factorial of 5 is : 120</span><br></pre></td></tr></table></figure><p>另一种方式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ g++ factorial.cpp -c</span><br><span class="line">$ g++ printhello.cpp -c</span><br><span class="line">$ g++ main.cpp -c</span><br><span class="line">$ g++ *.o -o main</span><br><span class="line">$ ./main</span><br><span class="line">Hello World!</span><br><span class="line">This is main:</span><br><span class="line">This factorial of 5 is : 120</span><br></pre></td></tr></table></figure><p><code>g++ factorial.cpp -c</code> 命令是用来编译 <code>factorial.cpp</code> 文件并生成目标文件（object file）的。</p><p>具体来说，<code>g++</code> 是 GNU C++ 编译器的命令，用于将源代码编译为可执行文件或目标文件。<code>factorial.cpp</code> 是要编译的源代码文件，<code>-c</code> 选项告诉编译器只编译源代码文件，不进行链接操作，生成目标文件而非可执行文件。生成的目标文件通常是二进制的，可以被链接器用于生成可执行文件。</p><p>这个命令的优点在于，它将源代码文件编译为目标文件，实现了代码和数据的分离。这样做的好处是可以减少代码的编译时间，提高了编译的效率。在进行后续的链接操作时，只需要将所有的目标文件链接到一起即可生成可执行文件，避免了重复编译源代码的过程，节省了时间。</p><p>此外，将代码和数据分离也使得程序的修改和维护更加方便。当程序需要更新时，只需要重新编译发生了变化的源代码文件生成目标文件，而不需要重新编译所有的源代码文件，可以减少编译时间和编译器的资源占用。</p><p>编译器通常使用时间戳（timestamp）来判断程序是否发生更新。</p><p>时间戳是文件系统记录每个文件的一个元数据，用来表示文件的创建时间、修改时间、访问时间等信息。当一个源代码文件被编译时，编译器会检查该文件的时间戳和对应的目标文件的时间戳，如果源代码文件的时间戳比目标文件的时间戳更晚，说明源代码文件已经被更新过，需要重新编译该文件生成新的目标文件。</p><p>在重新编译时，编译器只会编译发生更新的源代码文件和依赖的文件，不会重新编译其他源代码文件和库文件。这样做可以避免重复编译和浪费时间，提高编译效率。</p><p>除了时间戳，编译器还可以使用其他的机制来判断程序是否发生更新，比如对源代码文件进行哈希计算，生成一个哈希值，如果两个文件的哈希值不同，则说明文件发生了变化。不过，时间戳是最常用的方法，因为它可以直接使用操作系统提供的元数据，并且准确度高。</p><p>总之，将源代码编译为目标文件是一种优化编译的方法，可以提高编译效率和程序的可维护性。</p><h3 id="Version-1">Version 1</h3><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">hello: main.cpp printhello.cpp factorial.cpp</span></span><br><span class="line">g++ -o hello main.cpp printhello.cpp factorial.cpp</span><br></pre></td></tr></table></figure><p>这个 Makefile 包含了一个规则，用于编译 <code>main.cpp</code>、<code>printhello.cpp</code> 和 <code>factorial.cpp</code> 三个源代码文件，并生成一个可执行文件 <code>hello</code>。</p><p>具体来说，Makefile 的规则包含了一个目标和一组依赖项，以及生成目标的命令。在这个 Makefile 中，目标是 <code>hello</code>，表示要生成的可执行文件，依赖项是 <code>main.cpp</code>、<code>printhello.cpp</code> 和 <code>factorial.cpp</code>，表示可执行文件需要依赖这三个源代码文件，生成目标的命令是 <code>g++ -o hello main.cpp printhello.cpp factorial.cpp</code>，表示使用 <code>g++</code> 编译器将三个源代码文件编译成一个可执行文件 <code>hello</code>。</p><p>具体的编译过程是，当执行 <code>make</code> 命令时，make 工具会读取 Makefile 文件，查找是否存在名为 <code>hello</code> 的目标文件或规则。在这个例子中，存在一个名为 <code>hello</code> 的规则，make 工具会判断是否需要重新生成 <code>hello</code> 文件。如果目标文件不存在或者依赖文件的时间戳比目标文件的时间戳更晚，make 工具就会执行生成目标的命令，即使用 <code>g++</code> 编译器将三个源代码文件编译成一个可执行文件 <code>hello</code>。</p><p>在执行生成目标的命令时，<code>g++</code> 编译器会将三个源代码文件编译成目标文件，并将目标文件链接起来生成可执行文件 <code>hello</code>。<code>-o</code> 选项指定生成的可执行文件的名称为 <code>hello</code>，<code>main.cpp</code>、<code>printhello.cpp</code> 和 <code>factorial.cpp</code> 三个文件是编译器的输入文件。</p><p>总之，这个 Makefile 定义了一个简单的规则，可以将多个源代码文件编译成一个可执行文件，为程序的构建和管理提供了便利。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ make</span><br><span class="line">g++ -o hello main.cpp printhello.cpp factorial.cpp</span><br></pre></td></tr></table></figure><h3 id="Version-2">Version 2</h3><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">CXX = g++</span><br><span class="line">TARGET = hello</span><br><span class="line">OBJ = main.o printhello.o factorial.o</span><br><span class="line"></span><br><span class="line"><span class="variable">$(TARGET)</span>: <span class="variable">$(OBJ)</span></span><br><span class="line"><span class="variable">$(CXX)</span> -o <span class="variable">$(TARGET)</span> <span class="variable">$(OBJ)</span></span><br><span class="line"></span><br><span class="line"><span class="section">main.o: main.cpp</span></span><br><span class="line"><span class="variable">$(CXX)</span> -c main.cpp</span><br><span class="line"></span><br><span class="line"><span class="section">printhello.o: printhello.cpp</span></span><br><span class="line"><span class="variable">$(CXX)</span> -c printhello.cpp</span><br><span class="line"></span><br><span class="line"><span class="section">factorial.o: factorial.cpp</span></span><br><span class="line"><span class="variable">$(CXX)</span> -c factorial.cpp</span><br></pre></td></tr></table></figure><p>相较于上一个 Makefile，这个版本的 Makefile 采用了一种更加灵活、结构化的方式来编写规则，具有以下优点：</p><ol><li>变量化：将编译器 <code>g++</code>、目标文件 <code>hello</code>、源代码文件 <code>main.cpp</code>、<code>printhello.cpp</code> 和 <code>factorial.cpp</code> 等常量作为变量定义，使得 Makefile 更加易于维护和扩展。</li><li>规则化：使用规则来定义每个源代码文件的编译命令，以及可执行文件的生成命令。通过定义规则，可以使得 Makefile 更加模块化，方便增加、修改、删除规则，提高了 Makefile 的可读性和可维护性。</li><li>自动化依赖：定义了每个目标文件依赖的源代码文件，让 Make 工具自动地管理依赖关系。如果某个源代码文件被修改，Make 工具会自动地重新编译对应的目标文件，而不会重新编译没有变化的文件，从而提高编译效率。</li><li>Makefile 中定义了每个源代码文件的编译命令，而不是像上一个版本的 Makefile 那样一次性编译所有的源代码文件。这种做法更加细粒度，可以在需要时单独编译某个源代码文件，避免不必要的编译，提高了编译效率。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ make</span><br><span class="line">g++ -c main.cpp</span><br><span class="line">g++ -c printhello.cpp</span><br><span class="line">g++ -c factorial.cpp</span><br><span class="line">g++ -o hello  main.o printhello.o factorial.o</span><br></pre></td></tr></table></figure><h3 id="Version-3">Version 3</h3><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">CXX = g++</span><br><span class="line">TARGET = hello </span><br><span class="line">OBJ = main.o printhello.o factorial.o</span><br><span class="line"></span><br><span class="line">CXXFLAGS = -c -Wall</span><br><span class="line"></span><br><span class="line"><span class="variable">$(TARGET)</span>: <span class="variable">$(OBJ)</span></span><br><span class="line"><span class="variable">$(CXX)</span> -o <span class="variable">$@</span> <span class="variable">$^</span></span><br><span class="line"></span><br><span class="line"><span class="section">%.o: %.cpp</span></span><br><span class="line"><span class="variable">$(CXX)</span> <span class="variable">$(CXXFLAGS)</span> <span class="variable">$&lt;</span> -o <span class="variable">$@</span></span><br><span class="line"></span><br><span class="line"><span class="meta"><span class="meta-keyword">.PHONY</span>: clean</span></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">rm -f *.o <span class="variable">$(TARGET)</span></span><br></pre></td></tr></table></figure><p>相较于前两个版本的 Makefile，这个版本的 Makefile 进一步提高了灵活性和可维护性，具有以下优点：</p><ol><li>模式规则：通过定义 <code>%</code> 通配符，可以将编译每个源代码文件的规则合并成一个通用的规则。这样做可以让 Makefile 更加精简，提高可读性，也方便在以后添加或删除源代码文件时进行维护。</li><li>变量化：将编译器 <code>g++</code>、目标文件 <code>hello</code>、源代码文件 <code>main.cpp</code>、<code>printhello.cpp</code> 和 <code>factorial.cpp</code> 等常量作为变量定义，同样具有可维护性和可扩展性的优点。</li><li>自动化依赖：与第二个版本的 Makefile 类似，使用 <code>$(OBJ)</code> 变量来指定可执行文件 <code>hello</code> 依赖的所有目标文件，并且使用模式规则来自动化生成每个目标文件。</li><li>清理目标：通过 <code>.PHONY</code> 声明一个伪目标 <code>clean</code>，定义了清理规则，可以方便地删除所有的目标文件和可执行文件，避免在重新编译时出现问题。</li></ol><p>总之，相较于前两个版本的 Makefile，这个版本的 Makefile 进一步提高了可读性和可维护性，并且更加自动化，可以自动化处理每个源代码文件的编译过程。同时，定义了清理规则，方便维护者进行清理操作。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ make</span><br><span class="line">g++ -c -Wall main.cpp -o main.o</span><br><span class="line">g++ -c -Wall printhello.cpp -o printhello.o</span><br><span class="line">printhello.cpp:7:9: warning: unused variable <span class="string">&#x27;i&#x27;</span> [-Wunused-variable]</span><br><span class="line">    int i;</span><br><span class="line">        ^</span><br><span class="line">1 warning generated.</span><br><span class="line">g++ -c -Wall factorial.cpp -o factorial.o</span><br><span class="line">g++ -o hello main.o printhello.o factorial.o</span><br></pre></td></tr></table></figure><h3 id="Version-4">Version 4</h3><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">CXX = g++</span><br><span class="line">TARGET = hello </span><br><span class="line">SRC = <span class="variable">$(<span class="built_in">wildcard</span> *.cpp)</span></span><br><span class="line">OBJ = <span class="variable">$(<span class="built_in">patsubst</span> %.cpp, %.o, <span class="variable">$(SRC)</span>)</span></span><br><span class="line"></span><br><span class="line">CXXFLAGS = -c -Wall</span><br><span class="line"></span><br><span class="line"><span class="variable">$(TARGET)</span>: <span class="variable">$(OBJ)</span></span><br><span class="line"><span class="variable">$(CXX)</span> -o <span class="variable">$@</span> <span class="variable">$^</span></span><br><span class="line"></span><br><span class="line"><span class="section">%.o: %.cpp</span></span><br><span class="line"><span class="variable">$(CXX)</span> <span class="variable">$(CXXFLAGS)</span> <span class="variable">$&lt;</span> -o <span class="variable">$@</span></span><br><span class="line"></span><br><span class="line"><span class="meta"><span class="meta-keyword">.PHONY</span>: clean</span></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">rm -f *.o <span class="variable">$(TARGET)</span></span><br></pre></td></tr></table></figure><p>相较于之前的版本，这个版本的 Makefile 进一步提高了灵活性，具有以下优点：</p><ol><li>自动化变量：使用了 <code>wildcard</code> 和 <code>patsubst</code> 自动化变量来自动化地查找和转换源代码文件和目标文件，避免了手动定义每个文件的繁琐操作。</li><li>简化了变量定义：只定义了需要用到的变量，使得 Makefile 更加精简，可读性更高。</li><li>自动化依赖：与之前的版本类似，通过自动化变量 <code>$(OBJ)</code>，使用模式规则来自动化生成每个目标文件，提高了 Makefile 的灵活性和可维护性。</li><li>清理目标：与之前的版本类似，定义了一个伪目标 <code>clean</code>，方便维护者进行清理操作。</li></ol><p>总之，相较于之前的版本，这个版本的 Makefile 通过使用自动化变量和函数，避免了手动定义文件和目标文件的繁琐操作，更加自动化，同时仍然具有可读性和可维护性，提高了 Makefile 的灵活性。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ make</span><br><span class="line">g++ -c -Wall factorial.cpp -o factorial.o</span><br><span class="line">g++ -c -Wall main.cpp -o main.o</span><br><span class="line">g++ -c -Wall printhello.cpp -o printhello.o</span><br><span class="line">printhello.cpp:7:9: warning: unused variable <span class="string">&#x27;i&#x27;</span> [-Wunused-variable]</span><br><span class="line">    int i;</span><br><span class="line">        ^</span><br><span class="line">1 warning generated.</span><br><span class="line">g++ -o hello factorial.o main.o printhello.o</span><br></pre></td></tr></table></figure><h3 id="常用的自动化变量">常用的自动化变量</h3><p>Makefile中常用的自动化变量和它们的解析如下：</p><table><thead><tr><th>变量名</th><th>解析</th></tr></thead><tbody><tr><td><code>$@</code></td><td>当前规则的目标文件名。</td></tr><tr><td><code>$^</code></td><td>所有依赖文件的列表，以空格分隔。</td></tr><tr><td><code>$&lt;</code></td><td>第一个依赖文件的名称。</td></tr><tr><td><code>$?</code></td><td>所有新于目标的依赖文件列表，以空格分隔。</td></tr><tr><td><code>$*</code></td><td>当前规则的目标文件名，不包括扩展名。</td></tr><tr><td><code>$(@D)</code></td><td>目标文件所在的目录名。</td></tr><tr><td><code>$(@F)</code></td><td>目标文件名，不包括目录路径。</td></tr><tr><td><code>$(notdir $&lt;)</code></td><td>获取 <code>$&lt;</code> 的文件名，去掉路径。</td></tr><tr><td><code>$(subst from,to,text)</code></td><td>将 text 中的 from 替换为 to。</td></tr><tr><td><code>$(patsubst pattern,replacement,text)</code></td><td>查找 text 中所有符合 pattern 模式的字符串，替换为 replacement。</td></tr><tr><td><code>$(wildcard pattern)</code></td><td>查找符合 pattern 模式的文件。</td></tr><tr><td><code>$(dir names)</code></td><td>获取 names 中所有文件的目录部分。</td></tr><tr><td><code>$(basename names)</code></td><td>获取 names 中所有文件的文件名部分（去掉扩展名）。</td></tr><tr><td><code>$(suffix names)</code></td><td>获取 names 中所有文件的扩展名部分。</td></tr></tbody></table><p>在 Makefile 中，这些自动化变量可以方便地引用和处理一些常用信息，提高 Makefile 的编写效率和可读性。例如，使用 <code>$@</code> 可以在命令中引用当前规则的目标文件名，使用 <code>$^</code> 可以引用所有依赖文件的列表。此外，可以使用 <code>$(wildcard pattern)</code> 来查找指定模式的文件，以及使用 <code>$(patsubst pattern,replacement,text)</code> 来替换文件名中的通配符等</p><h2 id="CMake">CMake</h2><h3 id="Reference-2">Reference</h3><p><a href="https://www.bilibili.com/video/BV1bg411p7oS">CMake 6分钟入门，不用再写复杂的Makefile</a></p><h3 id="简介-2">简介</h3><p>CMake 是一个开源的跨平台的构建工具，用于管理 C/C++ 代码的构建过程。它使用一种名为 CMakeLists.txt 的简单脚本语言，通过配置和生成 Makefile、Visual Studio 项目、Xcode 项目等构建系统的脚本，从而实现跨平台、多编译器的构建工作。</p><p>使用 CMake，开发者可以将代码与构建系统分离，简化代码的移植和维护过程，同时可以自动生成不同平台、不同编译器下的构建脚本，提高了开发效率。CMake 还支持多种编程语言，包括 C、C++、Fortran、Java、Python 等，并且支持多种操作系统，包括 Windows、Linux、macOS 等。</p><p>CMake 使用起来比较简单，通过编写 CMakeLists.txt 文件来配置项目，然后使用 CMake 命令生成对应的构建系统。CMake 提供了丰富的命令和选项，支持包括库的构建、自定义构建类型、动态链接库的构建、安装和测试等功能。同时，CMake 还与各种第三方工具和库进行了深度集成，包括 Boost、Qt、CUDA、OpenCV 等，方便开发者集成自己的项目和工具。</p><p>总之，CMake 是一个功能强大、易于使用、跨平台的构建工具，能够帮助开发者管理 C/C++ 代码的构建过程，提高开发效率，方便项目的移植和维护。</p><h3 id="例子">例子</h3><p>CMakeLists.txt：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.10</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">project</span>(hello)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_executable</span>(hello main.cpp factorial.cpp printhello.cpp)</span><br></pre></td></tr></table></figure><p>编译</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir build &amp;&amp; <span class="built_in">cd</span> build</span><br><span class="line">$ cmake ..</span><br><span class="line">-- The C compiler identification is AppleClang 13.1.6.13160021</span><br><span class="line">-- The CXX compiler identification is AppleClang 13.1.6.13160021</span><br><span class="line">-- Detecting C compiler ABI info</span><br><span class="line">-- Detecting C compiler ABI info - <span class="keyword">done</span></span><br><span class="line">-- Check <span class="keyword">for</span> working C compiler: /Library/Developer/CommandLineTools/usr/bin/cc - skipped</span><br><span class="line">-- Detecting C compile features</span><br><span class="line">-- Detecting C compile features - <span class="keyword">done</span></span><br><span class="line">-- Detecting CXX compiler ABI info</span><br><span class="line">-- Detecting CXX compiler ABI info - <span class="keyword">done</span></span><br><span class="line">-- Check <span class="keyword">for</span> working CXX compiler: /Library/Developer/CommandLineTools/usr/bin/c++ - skipped</span><br><span class="line">-- Detecting CXX compile features</span><br><span class="line">-- Detecting CXX compile features - <span class="keyword">done</span></span><br><span class="line">-- Configuring <span class="keyword">done</span></span><br><span class="line">-- Generating <span class="keyword">done</span></span><br><span class="line">-- Build files have been written to: /Users/misaka/Downloads/CodeSpace/Code/C/hello/build</span><br><span class="line"></span><br><span class="line">$ make</span><br><span class="line">[ 25%] Building CXX object CMakeFiles/hello.dir/main.cpp.o</span><br><span class="line">[ 50%] Building CXX object CMakeFiles/hello.dir/factorial.cpp.o</span><br><span class="line">[ 75%] Building CXX object CMakeFiles/hello.dir/printhello.cpp.o</span><br><span class="line">[100%] Linking CXX executable hello</span><br><span class="line">[100%] Built target hello</span><br><span class="line"></span><br><span class="line">$ tree hello</span><br><span class="line">hello</span><br><span class="line">├── CMakeLists.txt</span><br><span class="line">├── build</span><br><span class="line">│   ├── CMakeCache.txt</span><br><span class="line">│   ├── CMakeFiles</span><br><span class="line">│   │   ├── 3.25.2</span><br><span class="line">│   │   │   ├── CMakeCCompiler.cmake</span><br><span class="line">│   │   │   ├── CMakeCXXCompiler.cmake</span><br><span class="line">│   │   │   ├── CMakeDetermineCompilerABI_C.bin</span><br><span class="line">│   │   │   ├── CMakeDetermineCompilerABI_CXX.bin</span><br><span class="line">│   │   │   ├── CMakeSystem.cmake</span><br><span class="line">│   │   │   ├── CompilerIdC</span><br><span class="line">│   │   │   │   ├── CMakeCCompilerId.c</span><br><span class="line">│   │   │   │   ├── CMakeCCompilerId.o</span><br><span class="line">│   │   │   │   └── tmp</span><br><span class="line">│   │   │   └── CompilerIdCXX</span><br><span class="line">│   │   │       ├── CMakeCXXCompilerId.cpp</span><br><span class="line">│   │   │       ├── CMakeCXXCompilerId.o</span><br><span class="line">│   │   │       └── tmp</span><br><span class="line">│   │   ├── CMakeDirectoryInformation.cmake</span><br><span class="line">│   │   ├── CMakeError.log</span><br><span class="line">│   │   ├── CMakeOutput.log</span><br><span class="line">│   │   ├── CMakeScratch</span><br><span class="line">│   │   ├── Makefile.cmake</span><br><span class="line">│   │   ├── Makefile2</span><br><span class="line">│   │   ├── TargetDirectories.txt</span><br><span class="line">│   │   ├── cmake.check_cache</span><br><span class="line">│   │   ├── hello.dir</span><br><span class="line">│   │   │   ├── DependInfo.cmake</span><br><span class="line">│   │   │   ├── build.make</span><br><span class="line">│   │   │   ├── cmake_clean.cmake</span><br><span class="line">│   │   │   ├── compiler_depend.make</span><br><span class="line">│   │   │   ├── compiler_depend.ts</span><br><span class="line">│   │   │   ├── depend.make</span><br><span class="line">│   │   │   ├── factorial.cpp.o</span><br><span class="line">│   │   │   ├── factorial.cpp.o.d</span><br><span class="line">│   │   │   ├── flags.make</span><br><span class="line">│   │   │   ├── link.txt</span><br><span class="line">│   │   │   ├── main.cpp.o</span><br><span class="line">│   │   │   ├── main.cpp.o.d</span><br><span class="line">│   │   │   ├── printhello.cpp.o</span><br><span class="line">│   │   │   ├── printhello.cpp.o.d</span><br><span class="line">│   │   │   └── progress.make</span><br><span class="line">│   │   ├── pkgRedirects</span><br><span class="line">│   │   └── progress.marks</span><br><span class="line">│   ├── Makefile</span><br><span class="line">│   ├── cmake_install.cmake</span><br><span class="line">│   └── hello</span><br><span class="line">├── factorial.cpp</span><br><span class="line">├── functions.h</span><br><span class="line">├── main.cpp</span><br><span class="line">└── printhello.cpp</span><br><span class="line"></span><br><span class="line">11 directories, 41 files</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>CS144-Lab4</title>
    <link href="http://www.misaka-9982.com/2023/02/19/CS144-Lab4/"/>
    <id>http://www.misaka-9982.com/2023/02/19/CS144-Lab4/</id>
    <published>2023-02-19T03:00:28.000Z</published>
    <updated>2023-02-19T04:26:16.038Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="概述-2">概述</h2><p>在实验0中，你实现了流量控制的字节流(<code>ByteStream</code>)的抽象概念。</p><p>在实验1、2和3中，你实现了该抽象概念与互联网提供的抽象概念之间的转换工具：不可靠的数据报(IP或UDP)。</p><p>现在，你已经接近顶峰：一个可以工作的<code>TCPConnection</code>，它结合了你的<code>TCPSender</code>和<code>TCPReceiver</code>，并能以至少100Mbit/s的速度与其他TCP实现对话。</p><p>图1显示了整体设计：</p><p><img src="https://cdn.jsdelivr.net/gh/Misaka-9982-coder/img_hosting/img/image-20220322233230399.png" alt="image-20220322233230399"></p><p>图1：TCP实现中的模块和数据流的安排。</p><h2 id="开始-2">开始</h2><p>你的<code>TCPConnection</code>实现将使用与你在实验0-3中使用的相同的Sponge库，并增加了类和测试。我们将给你提供支持代码，用于将TCP段读写到用户数据报(“TCP-over-UDP”)和互联网数据报(“TCP/IP”)的有效载荷中。我们还将给你一个类(<code>CS144TCPSocket</code>)，它可以包装你的<code>TCPConnection</code>，使其表现得像一个正常的流套接字，就像你在实验0中用来实现<code>webget</code>的TCPSocket。为了开始进行作业：</p><ol><li>请确保你已经提交了你在实验3中的所有解决方案。请不要修改<code>libsponge</code>目录顶层以外的任何文件，或者<code>webget.cc</code>。否则，你可能会在合并实验4的启动代码时遇到麻烦。</li><li>在实验作业的存储库中，运行<code>git fetch</code>来检索实验作业的最新版本。</li><li>通过运行<code>git merge origin/lab4-startercode</code>，下载实验4的启动代码。</li><li>在<code>build</code>目录中，编译源代码：<code>make</code>(编译时可以运行<code>make -j4</code>以使用四个处理器)。</li><li>在<code>build</code>目录外，打开并开始编辑<code>writeups/lab4.md</code>文件。这是你实验报告的模板，将包含在你提交的内容中。</li></ol><h2 id="实验4：TCP连接">实验4：TCP连接</h2><p>本周，你将完成构建一个与互联网上数十亿台计算机和移动设备兼容的工作TCP实现。你已经完成了大部分的工作：你已经实现了发送方和接收方。本周你的工作是将它们”连接”起来，成为一个对象(<code>TCPConnection</code>)，并处理一些对连接来说是全局性的管家任务。</p><p>回顾一下：TCP可靠地传递一对受流量控制的字节流，每个方向一个。两方参与TCP连接，每一方同时作为”发送方”(自己的出站字节流)和”接收方”(入站字节流)行动：</p><p><img src="https://cdn.jsdelivr.net/gh/Misaka-9982-coder/img_hosting/img/image-20230219110444953.png" alt="image-20230219110444953"></p><p>双方(上图中的”A”和”B”)被称为连接的”端点”，或”对等方”。你的<code>TCPConnection</code>作为其中一个对等方，负责接收和发送数据段，确保发送方和接收方被告知并有机会对他们关心的传入和传出段的字段作出贡献。</p><p><strong>接收段</strong>。<code>TCPConnection</code>将接收来自互联网的<code>TCPSegment</code>，并且</p><ul><li>如果<code>ACK</code>标志被设置，告诉<code>TCPSender</code>关于它在传入段上所关心的字段：<code>ackno</code>和<code>window_size</code>，并且</li><li>将段交给<code>TCPReceiver</code>，这样它就可以检查它所关心的传入段的字段：<code>seqno, syn, payload, fin</code>。</li></ul><p><strong>发送段</strong>。<code>TCPConnection</code>将通过互联网发送<code>TCPSegment</code>：</p><ul><li>每当<code>TCPSender</code>将一个段push到它的传出队列中时，它就会在传出段上设置它负责的字段。(<code>seqno, syn, payload, fin</code>)。</li><li>在发送段之前，<code>TCPConnection</code>会向<code>TCPReceiver</code>询问它负责的传出段的字段：<code>ackno</code>和<code>window_size</code>。如果有<code>ackno</code>(请记住，<code>TCPReceiver::ackno()</code>返回一个可选值。)，它将设置<code>ack</code>标志和<code>TCPSegment</code>中的字段。</li></ul><p>因此，每个<code>TCPSegment</code>的整体结构看起来像这样，”发送方 “和”接收方”字段用不同的颜色显示：</p><p><img src="https://cdn.jsdelivr.net/gh/Misaka-9982-coder/img_hosting/img/image-20230219110636651.png" alt="image-20230219110636651"></p><p><code>TCPConnection</code>的完整接口在<a href="https://cs144.github.io/doc/lab4/class_t_c_p_connection.html">类文档</a>中。请花一些时间来阅读。你的大部分实现将涉及到将<code>TCPConnection</code>的公共API与<code>TCPSender</code>和<code>TCPReceiver</code>中的适当例程进行”连接”。你希望尽可能将任何繁重的工作推迟到你已经实现的发送方和接收方。话虽如此，但并不是所有的事情都那么简单，有一些微妙的地方涉及到整体连接的”全局”行为。最难的部分是决定何时完全终止一个TCPConnection并宣布它不再是”活动的”。</p><p>下面是一些常见问题和你需要处理的边缘情况的细节。</p><h2 id="常见问题和特殊情形">常见问题和特殊情形</h2><ul><li><p>你们希望有多少代码？</p><p>总的来说，我们预计实现(在<code>tcp_connection.cc</code>中)总共需要大约100-150行的代码。当你完成后，测试套件将广泛地测试你自己的实现以及Linux内核的TCP实现的交互性。</p></li><li><p>我应该如何开始？</p><p>最好的开始方式可能是将一些”普通”方法与<code>TCPSender</code>和<code>TCPReceiver</code>中的适当调用连接起来。这可能包括像<code>remaining_outbound_capacity()</code>，<code>bytes_in_flight()</code>以及<code>unassembled_bytes()</code>。</p><p>然后你可以选择实现”writer”的方法：<code>connect()</code>、<code>write()</code>和<code>end_input_stream()</code>。其中一些方法可能需要对出站的<code>ByteStream</code>(由<code>TCPSender</code>拥有)做一些事情，并告知<code>TCPSender</code>。</p><p>你可能会选择在你完全实现每个方法之前开始运行测试套件(<code>make check</code>)；测试的失败信息可以给你一个线索或指南，告诉你接下来要处理什么。</p></li><li><p>应用程序如何从入站流中读取？</p><p><code>TCPConnection::inbound_stream()</code>已经在头文件中实现了。</p></li><li><p><code>TCPConnection</code>是否需要任何花哨的数据结构或算法？</p><p>不，它真的不需要。繁重的工作都是由你已经实现的<code>TCPSender</code>和<code>TCPReceiver</code>完成的。这里的工作实际上只是把所有的东西连接起来，处理一些难以轻易融入发送方和接收方的连接范围内的微妙问题。</p></li><li><p><code>TCPConnection</code>如何实际发送一个段？</p><p>类似于<code>TCPSender</code>，把段push到<code>_segments_out</code>队列中。就你的<code>TCPConnection</code>而言，当你把它push到这个队列上时，就认为它已经发送了。很快，所有者会出现并pop它(使用公共的<code>segments_out()</code>访问器方法)并真正发送它。</p></li><li><p><code>TCPConnection</code>如何了解时间的流逝？</p><p>与<code>TCPSender</code>类似——<code>tick()</code>方法将被定期调用。请不要使用任何其他方式来获得时间，tick方法是你对时间流逝的唯一访问，这样可以保持事情的确定性和可测试性。</p></li><li><p>如果一个传入段设置了<code>RST</code>标志，<code>TCPConnection</code>会做什么？</p><p>这个标志(“重置”)表示连接立即终止。如果你收到一个带有<code>RST</code>的段，你应该在入站和出站的<code>ByteStreams</code>上设置错误标志，并且任何后续对<code>TCPConnection::active()</code>的调用都应该返回false。</p></li><li><p>什么时候应该发送一个设置了<code>RST</code>标志的段？</p><p>有两种情况下，你会想中止整个连接。</p><ol><li>如果发送方连续发送了太多的重传而没有成功(超过了<code>TCPConfig::MAX_RETX_ATTEMPTS</code>，即8)。</li><li>如果在连接仍处于活动状态时调用<code>TCPConnection</code>析构函数(<code>active()</code>返回true)。</li></ol><p>发送一个设置了<code>RST</code>的段与接收一个段的效果类似：连接已断开且不再<code>active()</code>，两个<code>ByStream</code>都应设置为错误状态。</p></li><li><p>等等，但我如何生成一个可以设置<code>RST</code>标志的段？序列号是什么？</p><p>任何流出的段都需要有适当的序列号。你可以通过调用<code>TCPSender</code>的<code>send_empty_segment()</code>方法，强制<code>TCPSender</code>生成一个具有适当序列号的空段。或者你可以通过调用它的<code>fill_window()</code>方法让它填充窗口(如果它有未完成的信息要发送，例如，来自流的字节或SYN/FIN)。</p></li><li><p><code>ACK</code>标志的作用是什么？不是一直有一个<code>ackno</code>吗？</p><ul><li><strong>几乎</strong>每个<code>TCPSegment</code>都有一个<code>ackno</code>，并且设置了<code>ACK</code>标志。例外的情况是在连接的最开始，在接收方有任何需要确认的东西之前。</li><li><strong>在传出段中</strong>，你要尽可能地设置<code>ackno</code>和<code>ACK</code>标志。也就是说，只要<code>TCPReceiver</code>的<code>ackno()</code>方法返回一个<code>std::optional&lt;WrappingInt32&gt;</code>的值，你就可以用<a href="https://en.cppreference.com/w/cpp/utility/optional">has_value()</a>测试。</li><li><strong>在传入段中</strong>，只有当<code>ACK</code>字段被设置时，才需要查看<code>ackno</code>。如果<code>ACK</code>字段被设置，就把这个<code>ackno</code>(和窗口大小)给<code>TCPSender</code>。</li></ul></li><li><p>在接收段时，如果<code>TCPReceiver</code>抱怨说该段没有与窗口重叠，是不可接受的(<code>segment_received()</code>返回false)，我应该怎么做？</p><p>在这种情况下，<code>TCPConnection</code>需要确保向对等方发回一个段，给出当前的<code>ackno</code>和窗口大小。这有助于纠正对等方的困惑。</p></li><li><p>好的，很好。如果<code>TCPConnection</code>收到了一个段，而<code>TCPSender</code>抱怨说<code>ackno</code>无效(<code>ack_received()</code>返回false)，该怎么办？</p><p>同样的答案!</p></li><li><p>如果<code>TCPConnection</code>收到了一个网段，而且一切都很好呢？那我还需要回复吗？</p><p><strong>如果该段占用了任何序列号</strong>，那么你需要确保它被确认——至少需要向对等方发送一个带有适当的序列号和新的<code>ackno</code>和<code>window_size</code>的段。你可能不需要做任何事情来强制这样做，因为<code>TCPSender</code>通常会在<code>ack_received()</code>中决定发送一个新的段(因为窗口中已经打开了更多的空间)。但是，即使<code>TCPSender</code>没有更多的数据要发送，你也需要确保传入的段以某种方式被确认。</p></li><li><p>如果<code>TCPConnection</code>只是确认每个网段，即使它不占用任何序列号，又如何呢？</p><p>这可不是个好主意！两个对等方最终会来回发送无限多的acks。</p></li><li><p>如何解读这些”状态”名称(如”流开始(stream started)”或”流进行中(stream ongoing)”)？</p><p>请查看<a href="https://github.com/CS144/sponge/blob/lab4-startercode/libsponge/tcp_helpers/tcp_state.hh">libsponge/tcp_helpers/tcp_state.hh</a>和<a href="https://github.com/CS144/sponge/blob/lab4-startercode/libsponge/tcp_helpers/tcp_state.cc">tcp_state.cc</a>文件。</p></li><li><p>如果<code>TCPReceiver</code>想公布一个比<code>TCPSegment::header().win</code>字段大的窗口尺寸，我应该发送什么？</p><p>发送你能发送的最大值。你可能会发现<a href="https://en.cppreference.com/w/cpp/types/numeric_limits">std::numeric limits</a>类有帮助。</p></li><li><p>TCP连接何时最终”完成”？<code>active()</code>什么时候可以返回false？</p><p>请看下一节。</p></li><li><p>如果本PDF发布后有更多常见问题，我可以在哪里阅读？</p><p>请定期查看网站(<a href="https://cs144.github.io/lab_faq.html">https://cs144.github.io/lab_faq.html</a>)和Piazza。</p></li></ul><h2 id="TCP连接的结束：共识需要工作">TCP连接的结束：共识需要工作</h2><p><code>TCPConnection</code>的一个重要功能是决定TCP连接何时完全”完成”。当这种情况发生时，该实现会释放其对本地端口号的独占申明，停止发送回复传入段的确认，认为该连接已成为历史，并让其<code>active()</code>方法返回false。</p><p>有两种方式可以结束一个连接。在一个<strong>不干净的关闭</strong>中，<code>TCPConnection</code>发送或接收一个设置了<code>RST</code>标志的段。在这种情况下，出站和入站的<code>ByteStream</code>应该都处于错误状态，而<code>active()</code>可以立即返回false。</p><p>一个<strong>干净的关闭</strong>是我们如何在没有错误的情况下达到”完成”(<code>active() = false</code>)。这比较复杂，但这是件美好的事情，因为它尽可能地确保两个<code>ByteStream</code>中的每一个都被可靠地完全交付给接收方。在下一节(§§5.1)中，我们给出了干净的关闭发生时的实际情况，所以如果你愿意，可以随意跳过前面的内容。</p><p>酷，你还在这里。由于”<a href="https://en.wikipedia.org/wiki/Two_Generals'_Problem">Two Generals Problem</a>“的存在，不可能保证两个对等方都能实现干净的关闭，但是TCP已经非常接近了。情况是这样的。从一个对等方(一个<code>TCPConnection</code>，我们称之为”本地”对等方)的角度来看，在其与”远程”对等方的连接中，有四个前提条件可以实现干净的关闭：</p><ul><li><p>前提条件#1 <strong>入站</strong>流已完全组装并已结束。</p></li><li><p>前提条件#2 <strong>出站</strong>流已被本地应用程序结束，并完全发送(包括它结束的事实，即一个带有<code>FIN</code>的段)到远程对等方。</p></li><li><p>前提条件#3 <strong>出站</strong>流已被远程对等方完全确认。</p></li><li><p>前提条件#4 <strong>本地</strong><code>TCPConnection</code>确信<strong>远程</strong>对等方能满足前提条件#3。这是令人头疼的部分。有两种可选的方法可以实现这一点：(等待修改为徘徊)</p><ul><li><p><strong>选项A：在两个流结束后徘徊</strong>。前提条件#1到#3都是真的，而且远程对等方似乎已经得到了本地对等方对整个流的确认。本地对等方并不确定这一点——TCP无法可靠地传递acks(它不接受acks)。但是本地对等方非常确信远程对等方已经得到了它的acks，因为远程对等方似乎没有重传任何东西，而且本地对等方已经等待了一段时间来确定。</p><p>具体来说，当前提条件#1到#3得到满足，<strong>并且本地对等方从远程对等方收到任何网段后，至少已经过了10倍的初始重传超时(<code>_cfg.rt_timeout</code>)</strong>，连接就完成了。这被称为在两个流结束后的”徘徊”，以确保远程对等方没有试图重传我们需要确认的东西。这确实意味着<code>TCPConnection</code>需要保持一段时间的活跃状态，保持对本地端口号的独占要求，并可能发送acks以响应传入的段，甚至在<code>TCPSender</code>和<code>TCPReceiver</code>完全完成其工作且两个流都结束之后。</p><ul><li>在一个生产型的TCP实现中，等待计时器(也被称为时间等待计时器或最大段寿命(MSL)的两倍)通常是60或120秒。在一个连接有效完成后，保留一个端口号的时间可能很长，特别是如果你想启动一个新的服务器，绑定到同一个端口号，没有人愿意等待两分钟。<a href="https://cs144.github.io/doc/lab4/class_socket.html#afc6ed565fddaa9d7ee4904ecc96bb6c0"><code>SO_REUSEADDR</code></a> socket选项本质上是让Linux忽略保留，对于调试或测试来说是很方便的。</li></ul></li><li><p><strong>选项B：被动关闭</strong>。前提条件#1到#3都是真的，而且本地对等方100%确定远程对等方可以满足前提条件#3。如果TCP不确认确认，这怎么可能呢？因为远程对等方是<strong>第一个结束其流的人</strong>。</p><blockquote><p>为什么这个规则有效？这是脑筋急转弯，你不需要进一步阅读就能完成这个实验，但思考起来很有趣，而且能触及”Two Generals Problem”的深层原因，以及在不可靠的网络中对可靠性的固有限制。这样做的原因是，在收到并组装了远程对等方的<code>FIN</code>(前提条件#1)后，本地对等方发送了一个比以前发送的序列号更大的段(至少，它必须发送自己的<code>FIN</code>段以满足前提条件# 2)，该段也有一个<code>ackno</code>，承认远程对等方的<code>FIN</code>位。远程对等方承认该段(满足前提条件#3)，这意味着远程对等方一定也看到了本地对等方对远程对等方的<code>FIN</code>的ack。这就保证了远程对等方一定能够满足它自己的前提条件#3。所有这些都意味着本地对等方可以满足前提条件#4，而不需要等待。</p><p>呜呼! 我们说过这是一个脑筋急转弯。在你的实验报告中加分：你能找到一个更好的方法来解释这个问题吗</p></blockquote><p>底线是，如果**<code>TCPConnection</code>的入站流在<code>TCPConnection</code>发送<code>FIN</code>段之前就结束了，那么<code>TCPConnection</code>就不需要在两个流结束后等待**。</p></li></ul></li></ul><h3 id="TCP连接的结束-实践总结">TCP连接的结束(实践总结)</h3><p>实际上这意味着你的<code>TCPConnection</code>在流结束后有一个叫做<code>_linger_after_streams_finish</code>的成员变量，通过<code>state()</code>方法暴露给测试程序。这个变量一开始是<code>true</code>。如果入站流在<code>TCPConnection</code>到达其出站流的EOF之前结束，则需要将此变量设置为<code>false</code>。</p><p>在满足前提条件#1到#3的任何一点上，如果<code>_linger_after_streams_finish</code>为false，连接就”完成”了(并且<code>active()</code>应该返回false)。否则，你需要等待：只有在收到最后一个网段后经过足够的时间(<code>10 × _cfg.rt_timeout</code>)，连接才会完成。</p><h2 id="性能">性能</h2><p>在你完成了你的TCP实现，并且通过了<code>make check</code>运行的所有测试之后，请提交！然后，测量你的系统的性能，使其至少达到每秒100兆比特。</p><p>在build目录中，运行<code>./apps/tcp benchmark</code>。如果一切顺利的话，你会看到像这样的输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">user@computer:~/sponge/build$ ./apps/tcp_benchmark </span><br><span class="line">CPU-limited throughput : 1.78 Gbit/s </span><br><span class="line">CPU-limited throughput with reordering: 1.21 Gbit/s</span><br></pre></td></tr></table></figure><p>为了获得实验的全部学分，你的性能需要在两条线上至少达到”0.10Gbit/s”(每秒100兆比特)。你可能需要对你的代码进行剖析，或者对它慢的地方进行推理，你可能需要改进一些关键模块(如<code>ByteStream</code>或<code>StreamReassembler</code>)的实现来达到这一点。</p><p>在你的报告中，请报告你所取得的速度数据(有无重新排序)。</p><p>如果你愿意，欢迎你尽可能地优化你的代码，但请不要以牺牲CS144的其他部分为代价，包括本实验的其他部分。如果你的性能超过100Mbit/s，我们不会给你加分——你所做的任何超出这个最低限度的改进都只是为了你自己的满意和学习。如果你在不改变任何公共接口的情况下实现了比我们快的速度，我们很愿意向你了解你是如何做到的。</p><p>(我们在2011年英特尔酷睿i7-2600K CPU @ 4.40GHz上运行我们的参考实现，使用Ubuntu 19.04，Linux 5.0.0-31-generic #33-Ubuntu，带有针对Meltdown/Spectre/等的默认缓解措施，以及带有默认编译器标志的g++ 8.3.0，进行默认(“发布”)构建。CPU限制的吞吐量(第一行)为7.18 Gbit/s，(第二行，有重新排序)为6.84 Gbit/s。)</p><h2 id="webget重温">webget重温</h2><p>胜利的时刻到了! 还记得你在实验0中写的<code>webget.cc</code>吗？它使用了由Linux内核提供的TCP实现(<code>TCPSocket</code>)。我们希望你能把它改成使用你自己的TCP实现，而不需要改变其他任何东西。我们认为你所需要做的就是：</p><ul><li>用<code>#include &quot;tcp_sponge_socket.hh&quot;</code>替换<code>#include &quot;socket.hh&quot;</code> 。</li><li>将<code>TCPSocket</code>类型改为<code>CS144TCPSocket</code>。</li><li>在你的<code>get_URL()</code>函数的末尾，添加一个对<code>socket.wait_until_closed()</code>的调用。</li></ul><blockquote><p>为什么要这样做？通常情况下，Linux内核负责等待TCP连接达到”干净关闭”(并放弃它们的端口保留)，即使在用户进程退出后也是如此。但由于你的TCP实现都在用户空间，除了你的程序，没有其他东西可以跟踪连接状态。添加这个调用使套接字等待，直到你的<code>TCPConnection</code>报告<code>active() = false</code>。</p></blockquote><p>重新编译，并运行<code>make check webget</code>来确认你已经完成了完整的闭环：你已经在你自己完整的TCP实现之上写了一个基本的web获取器，而且它仍然成功地与一个真正的webserver对话。如果你有问题，试着手动运行程序：<code>./apps/webget cs144.keithw.org /hasher/xyzzy</code>。你会在终端上得到一些调试输出，可能会有帮助。</p><h2 id="TCPState">TCPState</h2><h3 id="TCP-状态自动机">TCP 状态自动机</h3><ul><li><a href="https://users.cs.northwestern.edu/~agupta/cs340/project2/TCPIP_State_Transition_Diagram.pdf">TCP/IP State Transition Diagram</a></li><li><a href="http://tcpipguide.com/free/t_TCPOperationalOverviewandtheTCPFiniteStateMachineF-2.htm">TCP Finite State Machine</a></li></ul><p><img src="https://cdn.jsdelivr.net/gh/Misaka-9982-coder/img_hosting/img/TCP%20state%20transition%20diagram.png" alt="TCP state transition diagram"></p><ul><li><code>LISTEN</code>：表示正在等待来自任何远程 TCP 和端口的连接请求。</li><li><code>SYN-SENT</code>：表示在发送连接请求后等待匹配的连接请求。</li><li><code>SYN-RECEIVED</code>：表示在接收和发送连接请求后等待确认的连接请求确认。</li><li><code>ESTABLISHED</code>：表示打开的连接，接收到的数据可以传递给用户，是连接传输阶段的正常状态。</li><li><code>FIN-WAIT-1</code>：表示等待来自远程 TCP 的连接终止请求，或先前发送的连接终止请求的确认。</li><li><code>FIN-WAIT-2</code>：表示等待远程 TCP 的连接终止请求。</li><li><code>CLOSE-WAIT</code>：表示正在等待来自本地用户的连接终止请求。</li><li><code>CLOSING</code>：表示正在等待来自远程 TCP 的连接终止请求确认。</li><li><code>LAST-ACK</code>：表示等待先前发送给远程 TCP 的连接终止请求的确认（其中包括其连接终止请求的确认）。</li><li><code>TIME-WAIT</code>：表示等待足够的时间以确保远程 TCP 接收到其连接终止请求的确认。</li><li><code>CLOSED</code>：表示根本没有连接状态。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//! \brief Official state names from the [TCP](\ref rfc::rfc793) specification</span></span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="keyword">class</span> <span class="title">State</span> &#123;</span></span><br><span class="line">        LISTEN = <span class="number">0</span>,   <span class="comment">//!&lt; Listening for a peer to connect</span></span><br><span class="line">        SYN_RCVD,     <span class="comment">//!&lt; Got the peer&#x27;s SYN</span></span><br><span class="line">        SYN_SENT,     <span class="comment">//!&lt; Sent a SYN to initiate a connection</span></span><br><span class="line">        ESTABLISHED,  <span class="comment">//!&lt; Three-way handshake complete</span></span><br><span class="line">        CLOSE_WAIT,   <span class="comment">//!&lt; Remote side has sent a FIN, connection is half-open</span></span><br><span class="line">        LAST_ACK,     <span class="comment">//!&lt; Local side sent a FIN from CLOSE_WAIT, waiting for ACK</span></span><br><span class="line">        FIN_WAIT_1,   <span class="comment">//!&lt; Sent a FIN to the remote side, not yet ACK&#x27;d</span></span><br><span class="line">        FIN_WAIT_2,   <span class="comment">//!&lt; Received an ACK for previously-sent FIN</span></span><br><span class="line">        CLOSING,      <span class="comment">//!&lt; Received a FIN just after we sent one</span></span><br><span class="line">        TIME_WAIT,    <span class="comment">//!&lt; Both sides have sent FIN and ACK&#x27;d, waiting for 2 MSL</span></span><br><span class="line">        CLOSED,       <span class="comment">//!&lt; A connection that has terminated normally</span></span><br><span class="line">        RESET,        <span class="comment">//!&lt; A connection that terminated abnormally</span></span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure><p><code>TCPState</code> 是一个枚举类型，表示 TCP 连接可能存在的不同状态。它有十一个可能的状态：</p><ul><li><code>LISTEN</code>：TCP 正在等待来自任何远程 TCP 和端口的连接请求。</li><li><code>SYN_RCVD</code>：已经接收到来自远程 TCP 的连接请求，TCP 正在等待确认连接请求的确认。</li><li><code>SYN_SENT</code>：TCP 已经发送了连接请求，正在等待来自远程 TCP 的连接请求确认。</li><li><code>ESTABLISHED</code>：TCP 与远程 TCP 建立了打开连接，可以发送和接收数据。</li><li><code>CLOSE_WAIT</code>：远程 TCP 已经启动了连接的关闭，TCP 正在等待本地应用程序关闭连接。</li><li><code>LAST_ACK</code>：TCP 已经启动了连接的关闭并发送了 FIN，正在等待远程 TCP 确认 FIN。</li><li><code>FIN_WAIT_1</code>：TCP 已经启动了连接的关闭并发送了 FIN，正在等待远程 TCP 的连接终止请求，或等待远程 TCP 对 FIN 的确认。</li><li><code>FIN_WAIT_2</code>：TCP 已经收到来自远程 TCP 的连接终止请求的确认，并正在等待远程 TCP 的连接终止请求。</li><li><code>CLOSING</code>：TCP 已经发送了 FIN 并收到了远程 TCP 的连接终止请求的确认，但同时也收到了来自远程 TCP 的 FIN 并正在等待其 FIN 的确认。</li><li><code>TIME_WAIT</code>：TCP 已经发送了 FIN 并收到了来自远程 TCP 的连接终止请求的确认，正在等待一段时间（2 * MSL），然后最终关闭连接。</li><li><code>CLOSED</code>：TCP 连接已经正常关闭，不能再发送或接收任何数据。</li><li><code>RESET</code>：由于收到重置，TCP 连接已经异常终止。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">TCPState::<span class="built_in">TCPState</span>(<span class="keyword">const</span> TCPState::State state) &#123;</span><br><span class="line">    <span class="built_in"><span class="keyword">switch</span></span> (state) &#123;</span><br><span class="line">        <span class="keyword">case</span> TCPState::State::LISTEN:</span><br><span class="line">            _receiver = TCPReceiverStateSummary::LISTEN;</span><br><span class="line">            _sender = TCPSenderStateSummary::CLOSED;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> TCPState::State::SYN_RCVD:</span><br><span class="line">            _receiver = TCPReceiverStateSummary::SYN_RECV;</span><br><span class="line">            _sender = TCPSenderStateSummary::SYN_SENT;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> TCPState::State::SYN_SENT:</span><br><span class="line">            _receiver = TCPReceiverStateSummary::LISTEN;</span><br><span class="line">            _sender = TCPSenderStateSummary::SYN_SENT;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> TCPState::State::ESTABLISHED:</span><br><span class="line">            _receiver = TCPReceiverStateSummary::SYN_RECV;</span><br><span class="line">            _sender = TCPSenderStateSummary::SYN_ACKED;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> TCPState::State::CLOSE_WAIT:</span><br><span class="line">            _receiver = TCPReceiverStateSummary::FIN_RECV;</span><br><span class="line">            _sender = TCPSenderStateSummary::SYN_ACKED;</span><br><span class="line">            _linger_after_streams_finish = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> TCPState::State::LAST_ACK:</span><br><span class="line">            _receiver = TCPReceiverStateSummary::FIN_RECV;</span><br><span class="line">            _sender = TCPSenderStateSummary::FIN_SENT;</span><br><span class="line">            _linger_after_streams_finish = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> TCPState::State::CLOSING:</span><br><span class="line">            _receiver = TCPReceiverStateSummary::FIN_RECV;</span><br><span class="line">            _sender = TCPSenderStateSummary::FIN_SENT;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> TCPState::State::FIN_WAIT_1:</span><br><span class="line">            _receiver = TCPReceiverStateSummary::SYN_RECV;</span><br><span class="line">            _sender = TCPSenderStateSummary::FIN_SENT;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> TCPState::State::FIN_WAIT_2:</span><br><span class="line">            _receiver = TCPReceiverStateSummary::SYN_RECV;</span><br><span class="line">            _sender = TCPSenderStateSummary::FIN_ACKED;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> TCPState::State::TIME_WAIT:</span><br><span class="line">            _receiver = TCPReceiverStateSummary::FIN_RECV;</span><br><span class="line">            _sender = TCPSenderStateSummary::FIN_ACKED;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> TCPState::State::RESET:</span><br><span class="line">            _receiver = TCPReceiverStateSummary::ERROR;</span><br><span class="line">            _sender = TCPSenderStateSummary::ERROR;</span><br><span class="line">            _linger_after_streams_finish = <span class="literal">false</span>;</span><br><span class="line">            _active = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> TCPState::State::CLOSED:</span><br><span class="line">            _receiver = TCPReceiverStateSummary::FIN_RECV;</span><br><span class="line">            _sender = TCPSenderStateSummary::FIN_ACKED;</span><br><span class="line">            _linger_after_streams_finish = <span class="literal">false</span>;</span><br><span class="line">            _active = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的函数是一个 switch 语句，将每个 <code>TCPState</code> 值映射到相应的 <code>TCPReceiverStateSummary</code> 和 <code>TCPSenderStateSummary</code> 值。这两种类型分别表示 TCP 接收器和发送器的摘要状态，用于向应用程序报告 TCP 连接的当前状态。根据 <code>TCPState</code> 值，switch 语句将适当的值分配给 <code>TCPConnection</code> 对象的 <code>_receiver</code>、<code>_sender</code>、<code>_linger_after_streams_finish</code> 和 <code>_active</code> 成员变量。</p><p>根据不同的TCP状态转换，更新TCP发送方和接收方的状态，并做出相应的操作。具体来说，这段代码将TCP状态转换成TCP发送方和接收方的状态，转换逻辑如下：</p><ul><li><code>LISTEN</code>状态：TCP接收方进入 <code>LISTEN</code> 状态，TCP发送方进入 <code>CLOSED</code> 状态。</li><li><code>SYN_RCVD</code>状态：TCP接收方进入 <code>SYN_RECV</code> 状态，TCP发送方进入 <code>SYN_SENT</code> 状态。</li><li><code>SYN_SENT</code>状态：TCP接收方进入 <code>LISTEN</code> 状态，TCP发送方继续保持在 <code>SYN_SENT</code> 状态。</li><li><code>ESTABLISHED</code>状态：TCP接收方进入 <code>SYN_RECV</code> 状态，TCP发送方进入 <code>SYN_ACKED</code> 状态。</li><li><code>CLOSE_WAIT</code>状态：TCP接收方进入 <code>FIN_RECV</code> 状态，TCP发送方进入 <code>SYN_ACKED</code> 状态，设置 <code>_linger_after_streams_finish</code> 为 <code>false</code>。</li><li><code>LAST_ACK</code>状态：TCP接收方进入 <code>FIN_RECV</code> 状态，TCP发送方进入 <code>FIN_SENT</code> 状态，设置 <code>_linger_after_streams_finish</code> 为 <code>false</code>。</li><li><code>CLOSING</code>状态：TCP接收方进入 <code>FIN_RECV</code> 状态，TCP发送方进入 <code>FIN_SENT</code> 状态。</li><li><code>FIN_WAIT_1</code>状态：TCP接收方进入 <code>SYN_RECV</code> 状态，TCP发送方进入 <code>FIN_SENT</code> 状态。</li><li><code>FIN_WAIT_2</code>状态：TCP接收方进入 <code>SYN_RECV</code> 状态，TCP发送方进入 <code>FIN_ACKED</code> 状态。</li><li><code>TIME_WAIT</code>状态：TCP接收方进入 <code>FIN_RECV</code> 状态，TCP发送方进入 <code>FIN_ACKED</code> 状态。</li><li><code>RESET</code>状态：TCP接收方和TCP发送方进入 <code>ERROR</code> 状态，设置<code>_linger_after_streams_finish</code>为<code>false</code> ，设置 <code>_active</code> 为 <code>false</code>。</li><li><code>CLOSED</code>状态：TCP接收方进入 <code>FIN_RECV</code> 状态，TCP发送方进入 <code>FIN_ACKED</code> 状态，设 置 <code>_linger_after_streams_finish</code> 为false，设置 <code>_active</code> 为 <code>false</code>。</li></ul><p>需要注意的是，这段代码并未包含所有可能的TCP状态转换，可能还有其他的状态转换情况需要另行处理。</p><h3 id="TCP-握手挥手">TCP 握手挥手</h3><ul><li><a href="https://www.misaka-9982.com/2022/03/04/Wireshark-Lab5/">https://www.misaka-9982.com/2022/03/04/Wireshark-Lab5/</a></li></ul><h4 id="TCP三次握手的流程和状态转换">TCP三次握手的流程和状态转换</h4><p>TCP三次握手是在建立TCP连接时使用的一种协议，其流程和状态转换如下：</p><ol><li>客户端向服务器发送SYN包，表示客户端请求建立连接。</li><li>服务器接收到SYN包，回复客户端一个SYN+ACK包，表示服务器确认收到了客户端的请求，并请求建立连接。</li><li>客户端收到服务器的SYN+ACK包，发送一个ACK包给服务器，表示客户端确认收到了服务器的确认，并建立连接。</li></ol><p>这个过程中，客户端和服务器之间的状态转换如下：</p><ol><li>客户端从CLOSED状态转换到SYN-SENT状态，表示客户端已经向服务器发送了一个SYN包，等待服务器的响应。</li><li>服务器从LISTEN状态转换到SYN-RECEIVED状态，表示服务器已经收到了客户端的SYN包，并回复了SYN+ACK包，等待客户端的确认。</li><li>客户端从SYN-SENT状态转换到ESTABLISHED状态，表示客户端已经收到了服务器的SYN+ACK包，并发送了确认ACK包，连接建立成功。</li><li>服务器从SYN-RECEIVED状态转换到ESTABLISHED状态，表示服务器已经收到了客户端的ACK包，连接建立成功。</li></ol><p>在TCP三次握手过程中，通过交换SYN和ACK包来确认连接的建立，确保客户端和服务器之间建立的连接是可靠的。这个过程中，如果任何一个包丢失或者延迟，都会导致连接建立失败，因此TCP协议是一种可靠的面向连接的协议。</p><h4 id="TCP四次挥手的流程和状态转换">TCP四次挥手的流程和状态转换</h4><p>TCP四次挥手是在关闭TCP连接时使用的一种协议，其流程和状态转换如下：</p><ol><li>主动关闭方（可以是客户端或服务器）发送一个FIN包给被动关闭方（对方），表示主动关闭方想要关闭连接，进入FIN-WAIT-1状态。</li><li>被动关闭方接收到主动关闭方的FIN包，回复一个ACK包进行确认，表示已经收到了主动关闭方的请求，进入CLOSE-WAIT状态。</li><li>被动关闭方发送一个FIN包给主动关闭方，表示对方也想要关闭连接，进入LAST-ACK状态。</li><li>主动关闭方接收到被动关闭方的FIN包，回复一个ACK包进行确认，表示主动关闭方已经收到了被动关闭方的请求，进入TIME-WAIT状态。</li><li>经过一段时间后，主动关闭方退出TIME-WAIT状态，连接彻底关闭。</li></ol><p>这个过程中，主动关闭方和被动关闭方之间的状态转换如下：</p><ol><li>主动关闭方从ESTABLISHED状态转换到FIN-WAIT-1状态，表示主动关闭方已经发送了一个FIN包，等待被动关闭方的确认。</li><li>被动关闭方从ESTABLISHED状态转换到CLOSE-WAIT状态，表示被动关闭方已经接收到主动关闭方的FIN包，并发送了一个ACK包进行确认。</li><li>被动关闭方从CLOSE-WAIT状态转换到LAST-ACK状态，表示被动关闭方也想要关闭连接，发送了一个FIN包给主动关闭方。</li><li>主动关闭方从FIN-WAIT-1状态转换到FIN-WAIT-2状态，表示主动关闭方已经收到了被动关闭方的ACK包，并等待被动关闭方的FIN包。</li><li>主动关闭方从FIN-WAIT-2状态转换到TIME-WAIT状态，表示主动关闭方已经收到了被动关闭方的FIN包，并发送了一个ACK包进行确认，等待一段时间（2倍的MSL，最长报文段寿命）以确保对方已经接收到ACK包。</li><li>被动关闭方从LAST-ACK状态转换到CLOSED状态，表示被动关闭方已经收到了主动关闭方的ACK包，并关闭连接。</li></ol><p>在TCP四次挥手过程中，主动关闭方和被动关闭方之间通过交换FIN和ACK包来关闭连接，确保连接关闭的可靠性。这个过程中，如果任何一个包丢失或者延迟，都会导致连接关闭失败，因此TCP协议是一种可靠的面向连接的协议。</p><h2 id="TCPConnection">TCPConnection</h2><h3 id="代码解读">代码解读</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//! \brief A complete endpoint of a TCP connection</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TCPConnection</span> &#123;</span></span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">    TCPConfig _cfg;</span><br><span class="line">    TCPReceiver _receiver&#123;_cfg.recv_capacity&#125;;</span><br><span class="line">    TCPSender _sender&#123;_cfg.send_capacity, _cfg.rt_timeout, _cfg.fixed_isn&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//! outbound queue of segments that the TCPConnection wants sent</span></span><br><span class="line">    std::queue&lt;TCPSegment&gt; _segments_out&#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//! Should the TCPConnection stay active (and keep ACKing)</span></span><br><span class="line">    <span class="comment">//! for 10 * _cfg.rt_timeout milliseconds after both streams have ended,</span></span><br><span class="line">    <span class="comment">//! in case the remote TCPConnection doesn&#x27;t know we&#x27;ve received its whole stream?</span></span><br><span class="line">    <span class="keyword">bool</span> _linger_after_streams_finish&#123;<span class="literal">true</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">size_t</span> _last_seg_time&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">size_t</span> _curr_seg_time&#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//! \name &quot;Input&quot; interface for the writer</span></span><br><span class="line">    <span class="comment">//!@&#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//! \brief Initiate a connection by sending a SYN segment</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">connect</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//! \brief Write data to the outbound byte stream, and send it over TCP if possible</span></span><br><span class="line">    <span class="comment">//! \returns the number of bytes from `data` that were actually written.</span></span><br><span class="line">    <span class="function"><span class="keyword">size_t</span> <span class="title">write</span><span class="params">(<span class="keyword">const</span> std::string &amp;data)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//! \returns the number of `bytes` that can be written right now.</span></span><br><span class="line">    <span class="function"><span class="keyword">size_t</span> <span class="title">remaining_outbound_capacity</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//! \brief Shut down the outbound byte stream (still allows reading incoming data)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">end_input_stream</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//!@&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//! \name &quot;Output&quot; interface for the reader</span></span><br><span class="line">    <span class="comment">//!@&#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//! \brief The inbound byte stream received from the peer</span></span><br><span class="line">    <span class="function">ByteStream &amp;<span class="title">inbound_stream</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> _receiver.<span class="built_in">stream_out</span>(); &#125;</span><br><span class="line">    <span class="comment">//!@&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//! \name Accessors used for testing</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//!@&#123;</span></span><br><span class="line">    <span class="comment">//! \brief number of bytes sent and not yet acknowledged, counting SYN/FIN each as one byte</span></span><br><span class="line">    <span class="function"><span class="keyword">size_t</span> <span class="title">bytes_in_flight</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="comment">//! \brief number of bytes not yet reassembled</span></span><br><span class="line">    <span class="function"><span class="keyword">size_t</span> <span class="title">unassembled_bytes</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="comment">//! \brief Number of milliseconds since the last segment was received</span></span><br><span class="line">    <span class="function"><span class="keyword">size_t</span> <span class="title">time_since_last_segment_received</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="comment">//!&lt; \brief summarize the state of the sender, receiver, and the connection</span></span><br><span class="line">    <span class="function">TCPState <span class="title">state</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> &#123;_sender, _receiver, <span class="built_in">active</span>(), _linger_after_streams_finish&#125;; &#125;;</span><br><span class="line">    <span class="comment">//!@&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//! \name Methods for the owner or operating system to call</span></span><br><span class="line">    <span class="comment">//!@&#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//! Called when a new segment has been received from the network</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">segment_received</span><span class="params">(<span class="keyword">const</span> TCPSegment &amp;seg)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//! Called periodically when time elapses</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">tick</span><span class="params">(<span class="keyword">const</span> <span class="keyword">size_t</span> ms_since_last_tick)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">send_segment</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//! \brief TCPSegments that the TCPConnection has enqueued for transmission.</span></span><br><span class="line">    <span class="comment">//! \note The owner or operating system will dequeue these and</span></span><br><span class="line">    <span class="comment">//! put each one into the payload of a lower-layer datagram (usually Internet datagrams (IP),</span></span><br><span class="line">    <span class="comment">//! but could also be user datagrams (UDP) or any other kind).</span></span><br><span class="line">    <span class="function">std::queue&lt;TCPSegment&gt; &amp;<span class="title">segments_out</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> _segments_out; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//! \brief Is the connection still alive in any way?</span></span><br><span class="line">    <span class="comment">//! \returns `true` if either stream is still running or if the TCPConnection is lingering</span></span><br><span class="line">    <span class="comment">//! after both streams have finished (e.g. to ACK retransmissions from the peer)</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">active</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="comment">//!@&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//! Construct a new connection from a configuration</span></span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">TCPConnection</span><span class="params">(<span class="keyword">const</span> TCPConfig &amp;cfg)</span> : _cfg&#123;</span>cfg&#125; &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//! \name construction and destruction</span></span><br><span class="line">    <span class="comment">//! moving is allowed; copying is disallowed; default construction not possible</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//!@&#123;</span></span><br><span class="line">    ~<span class="built_in">TCPConnection</span>();  <span class="comment">//!&lt; destructor sends a RST if the connection is still open</span></span><br><span class="line">    <span class="built_in">TCPConnection</span>() = <span class="keyword">delete</span>;</span><br><span class="line">    <span class="built_in">TCPConnection</span>(TCPConnection &amp;&amp;other) = <span class="keyword">default</span>;</span><br><span class="line">    TCPConnection &amp;<span class="keyword">operator</span>=(TCPConnection &amp;&amp;other) = <span class="keyword">default</span>;</span><br><span class="line">    <span class="built_in">TCPConnection</span>(<span class="keyword">const</span> TCPConnection &amp;other) = <span class="keyword">delete</span>;</span><br><span class="line">    TCPConnection &amp;<span class="keyword">operator</span>=(<span class="keyword">const</span> TCPConnection &amp;other) = <span class="keyword">delete</span>;</span><br><span class="line">    <span class="comment">//!@&#125;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>TCPConnection</code>是一个类，用于表示 TCP 连接。它作为一个连接的一方(端点或对等方)，负责接收和发送数据段，确保发送方和接收方被告知并有机会对它们关心的传入和传出段的字段进行贡献。</p><p>具体来说，<code>TCPConnection</code>的主要功能包括：</p><ul><li>接收来自互联网的 <code>TCPSegment</code>，并将其交给 <code>TCPReceiver</code> 进行处理，以检查它所关心的传入段的字段。</li><li>将每个传出段的字段设置为合适的值(由 <code>TCPSender</code> 确定)，并将其放入出站队列(<code>_segments_out</code>)中以便发送。</li><li>向 <code>TCPSender</code> 询问传出段的字段，特别是 <code>ackno</code> 和 <code>window_size</code>，以便构造传出段。</li><li>处理连接范围内的一些难以轻易融入发送方和接收方的微妙问题，比如如何终止连接并宣布它不再是“活动的”。</li></ul><p>综上所述，<code>TCPConnection</code>的功能是将 <code>TCPSender</code> 和 <code>TCPReceiver</code> 中的例程与连接的公共 API 进行连接，以创建一个完整的 TCP 连接。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TCPConnection::send_segment</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (!_sender.<span class="built_in">segments_out</span>().<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        TCPSegment seg = _sender.<span class="built_in">segments_out</span>().<span class="built_in">front</span>();</span><br><span class="line">        _sender.<span class="built_in">segments_out</span>().<span class="built_in">pop</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (_receiver.<span class="built_in">ackno</span>().<span class="built_in">has_value</span>()) &#123;</span><br><span class="line">            seg.<span class="built_in">header</span>().ack = <span class="literal">true</span>;</span><br><span class="line">            seg.<span class="built_in">header</span>().ackno = _receiver.<span class="built_in">ackno</span>().<span class="built_in">value</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        seg.<span class="built_in">header</span>().win = <span class="keyword">static_cast</span>&lt;<span class="keyword">uint16_t</span>&gt;(</span><br><span class="line">            <span class="built_in">min</span>(_receiver.<span class="built_in">window_size</span>(), <span class="keyword">static_cast</span>&lt;<span class="keyword">size_t</span>&gt;(numeric_limits&lt;<span class="keyword">uint16_t</span>&gt;::<span class="built_in">max</span>()))</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        _segments_out.<span class="built_in">push</span>(seg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>send_segment()</code>，它的作用是将传出队列中的段发送出去。在发送之前，它会检查接收方是否有等待确认的段，以及接收窗口的大小。</p><p>具体来说，这段代码会从发送队列的前面取出一个段。如果接收方等待确认，它会将<code>ack</code>标志和确认号(<code>ackno</code>)设置为对应的值。然后，它将窗口大小(<code>win</code>)设置为接收方的窗口大小，但不会超过16位无符号整数的最大值。最后，它将段添加到传输队列中，准备发送。这个方法会循环执行，直到传输队列为空。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">TCPConnection::active</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">    <span class="comment">// unclean shutdown</span></span><br><span class="line">    <span class="keyword">if</span> (_sender.<span class="built_in">stream_in</span>().<span class="built_in">error</span>() || _receiver.<span class="built_in">stream_out</span>().<span class="built_in">error</span>()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> ended = _receiver.<span class="built_in">stream_out</span>().<span class="built_in">input_ended</span>();</span><br><span class="line">    <span class="keyword">auto</span> eof = _sender.<span class="built_in">stream_in</span>().<span class="built_in">eof</span>();</span><br><span class="line">    <span class="keyword">auto</span> eq2 = _sender.<span class="built_in">next_seqno_absolute</span>() == _sender.<span class="built_in">stream_in</span>().<span class="built_in">bytes_written</span>() + <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">auto</span> no_flight = _sender.<span class="built_in">bytes_in_flight</span>() == <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">auto</span> checked = ended &amp;&amp; eof &amp;&amp; eq2 &amp;&amp; no_flight;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// clean shut down</span></span><br><span class="line">    <span class="keyword">if</span> (!_linger_after_streams_finish) &#123;  </span><br><span class="line">        <span class="comment">// # 1 ~ # 3 satisfied -&gt;connection done</span></span><br><span class="line">        <span class="keyword">if</span> (checked) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (checked) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">time_since_last_segment_received</span>() &lt; <span class="number">10</span> * _cfg.rt_timeout) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;    </span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码定义了一个TCP连接的状态，通过判断发送方和接收方的状态，以及数据传输的进度来确定连接是否处于激活状态。</p><p><code>active()</code>函数首先检查连接是否存在异常关闭情况，即发送流或接收流是否有错误，如果有则返回false，表示连接不再激活。</p><p>如果连接没有异常关闭，它将检查发送方和接收方的状态以及数据传输的进度。如果这些条件都满足，它将返回false，否则返回true，表示连接仍然激活。在这个实现中，一个TCP连接被认为是&quot;激活&quot;的条件是：</p><ol><li>接收流中没有未接收的数据，也没有接收流的错误（即没有未处理的数据或错误）</li><li>发送流中已经写入了EOF</li><li>发送方已经发送了所有数据，并且等待所有数据的确认，确认号为发送方写入的字节数+2（因为SYN和FIN标志也算在字节数中）</li></ol><p>如果连接设置了 <code>linger_after_streams_finish</code> 标志，则还需要进行以下检查：</p><ol><li>上述3个条件都满足</li><li>最近接收到的段距离当前时间不超过10倍的重传超时时间，否则返回false，表示连接不再激活</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//! \param[in] ms_since_last_tick number of milliseconds since the last call to this method</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TCPConnection::tick</span><span class="params">(<span class="keyword">const</span> <span class="keyword">size_t</span> ms_since_last_tick)</span> </span>&#123;</span><br><span class="line">    _curr_seg_time += ms_since_last_tick;</span><br><span class="line">    _sender.<span class="built_in">tick</span>(ms_since_last_tick);</span><br><span class="line">    <span class="built_in">send_segment</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (_sender.<span class="built_in">consecutive_retransmissions</span>() &gt; TCPConfig::MAX_RETX_ATTEMPTS) &#123;</span><br><span class="line">        <span class="comment">// abort the connnection</span></span><br><span class="line">        _sender.<span class="built_in">send_empty_rst</span>();</span><br><span class="line">        _sender.<span class="built_in">stream_in</span>().<span class="built_in">set_error</span>();</span><br><span class="line">        _receiver.<span class="built_in">stream_out</span>().<span class="built_in">set_error</span>();</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="comment">// syn received</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (_receiver.<span class="built_in">ackno</span>().<span class="built_in">has_value</span>()) &#123; </span><br><span class="line">        _sender.<span class="built_in">fill_window</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">send_segment</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码是 TCPConnection 类中的 <code>tick()</code> 函数，用于模拟 TCP 连接的运行过程。具体而言，函数接收一个时间差（<code>ms_since_last_tick</code>），并根据这个时间差更新当前已经经过的时间和发送方的状态，并尝试发送 TCP 报文。</p><p>在函数的开头，代码会将时间差累加到当前已经经过的时间（<code>_curr_seg_time</code>）中，然后调用 <code>_sender.tick()</code> 函数更新发送方的状态，再调用 <code>send_segment()</code> 函数尝试发送 TCP 报文。</p><p>接下来，如果发送方连续重传的次数超过了最大重传次数（<code>TCPConfig::MAX_RETX_ATTEMPTS</code>），就会终止连接。如果接收方收到了 SYN 报文（即连接已经建立），就会调用 <code>_sender.fill_window()</code> 函数来填充发送窗口，并调用 <code>send_segment()</code> 尝试发送 TCP 报文。</p><p>最后再次调用 <code>send_segment()</code> 函数，以确保已经生成的 TCP 报文都已经被发送。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TCPConnection::segment_received</span><span class="params">(<span class="keyword">const</span> TCPSegment &amp;seg)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Unclean shutdown of TCPConnection</span></span><br><span class="line">    <span class="keyword">if</span> (seg.<span class="built_in">header</span>().rst) &#123;</span><br><span class="line">        _sender.<span class="built_in">stream_in</span>().<span class="built_in">set_error</span>();</span><br><span class="line">        _receiver.<span class="built_in">stream_out</span>().<span class="built_in">set_error</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// normal routine</span></span><br><span class="line">    _last_seg_time = _curr_seg_time;</span><br><span class="line">    _receiver.<span class="built_in">segment_received</span>(seg);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (seg.<span class="built_in">header</span>().ack) &#123;</span><br><span class="line">        _sender.<span class="built_in">ack_received</span>(seg.<span class="built_in">header</span>().ackno, seg.<span class="built_in">header</span>().win);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// syn received</span></span><br><span class="line">    <span class="keyword">if</span> (_receiver.<span class="built_in">ackno</span>().<span class="built_in">has_value</span>()) &#123;</span><br><span class="line">        <span class="built_in">send_segment</span>();</span><br><span class="line">        _sender.<span class="built_in">fill_window</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// at least one segment is sent in reply</span></span><br><span class="line">        <span class="keyword">if</span> (seg.<span class="built_in">length_in_sequence_space</span>() &amp;&amp; _sender.<span class="built_in">segments_out</span>().<span class="built_in">empty</span>()) &#123;  </span><br><span class="line">            _sender.<span class="built_in">send_empty_ack</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="built_in">send_segment</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (_receiver.<span class="built_in">stream_out</span>().<span class="built_in">input_ended</span>() &amp;&amp; !_sender.<span class="built_in">stream_in</span>().<span class="built_in">eof</span>()) &#123;</span><br><span class="line">            _linger_after_streams_finish = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码处理接收到的TCP段（<code>segment</code>）。当接收到的段被传递到此方法时，代码将首先检查段是否包含RST标志，如果是，则TCP连接出现异常关闭。如果不是，则代码将处理TCP连接的正常过程。</p><p>如果此段包含ACK标志，则代码将调用 <code>_sender.ack_received</code> 方法来处理确认。如果 <code>_receiver.ackno</code> 返回值已设置，则表示已接收到SYN，代码将调用 <code>send_segment</code> 方法来发送数据段。 <code>_sender.fill_window</code> 方法将填充发送方窗口，以便在空闲时发送更多数据段。如果发送一个回复，但此时发送方没有待发送的段，则还会发送一个空的ACK段以确认该回复。此外，如果接收方流已结束但发送方流未结束，则 <code>_linger_after_streams_finish</code> 将设置为false，以指示连接可以正常关闭。</p><p>总之，此方法的目的是根据接收到的TCP段执行必要的操作以保持TCP连接的状态。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_URL</span><span class="params">(<span class="keyword">const</span> string &amp;host, <span class="keyword">const</span> string &amp;path)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Your code here.</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// You will need to connect to the &quot;http&quot; service on</span></span><br><span class="line">    <span class="comment">// the computer whose name is in the &quot;host&quot; string,</span></span><br><span class="line">    <span class="comment">// then request the URL path given in the &quot;path&quot; string.</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// GET /hello HTTP/1.1</span></span><br><span class="line">    <span class="comment">// Host: cs144.keithw.org</span></span><br><span class="line">    <span class="comment">// Connection: close</span></span><br><span class="line"></span><br><span class="line">    <span class="function">Address <span class="title">address</span><span class="params">(host, <span class="string">&quot;http&quot;</span>)</span></span>;</span><br><span class="line">    <span class="comment">// TCPSocket socket;</span></span><br><span class="line">    CS144TCPSocket socket&#123;&#125;;</span><br><span class="line">    socket.<span class="built_in">connect</span>(address);</span><br><span class="line"></span><br><span class="line">    socket.<span class="built_in">write</span>(<span class="string">&quot;GET &quot;</span> + path + <span class="string">&quot; HTTP/1.1\r\n&quot;</span>);</span><br><span class="line">    socket.<span class="built_in">write</span>(<span class="string">&quot;Host: &quot;</span> + host + <span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">    socket.<span class="built_in">write</span>(<span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">    socket.<span class="built_in">shutdown</span>(SHUT_WR);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Then you&#x27;ll need to print out everything the server sends back,</span></span><br><span class="line">    <span class="comment">// (not just one call to read() -- everything) until you reach</span></span><br><span class="line">    <span class="comment">// the &quot;eof&quot; (end of file).</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!socket.<span class="built_in">eof</span>()) &#123;</span><br><span class="line">        cout &lt;&lt; socket.<span class="built_in">read</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    socket.<span class="built_in">close</span>();</span><br><span class="line">    socket.<span class="built_in">wait_until_closed</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// cerr &lt;&lt; &quot;Function called: get_URL(&quot; &lt;&lt; host &lt;&lt; &quot;, &quot; &lt;&lt; path &lt;&lt; &quot;).\n&quot;;</span></span><br><span class="line">    <span class="comment">// cerr &lt;&lt; &quot;Warning: get_URL() has not been implemented yet.\n&quot;;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="性能测试">性能测试</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ ./apps/tcp_benchmark</span><br><span class="line">CPU-limited throughput                : 12.56 Gbit/s</span><br><span class="line">CPU-limited throughput with reordering: 11.36 Gbit/s</span><br></pre></td></tr></table></figure><h2 id="完整代码-4">完整代码</h2><ul><li><a href="https://github.com/Misaka-9982-coder/CS144-fa21/blob/optimize/libsponge/tcp_connection.hh">tcp_connection.hh</a></li><li><a href="https://github.com/Misaka-9982-coder/CS144-fa21/blob/optimize/libsponge/tcp_connection.cc">tcp_connection.cc</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="CS144" scheme="http://www.misaka-9982.com/tags/CS144/"/>
    
    <category term="Network" scheme="http://www.misaka-9982.com/tags/Network/"/>
    
  </entry>
  
  <entry>
    <title>CS144-Lab3</title>
    <link href="http://www.misaka-9982.com/2023/02/19/CS144-Lab3/"/>
    <id>http://www.misaka-9982.com/2023/02/19/CS144-Lab3/</id>
    <published>2023-02-18T16:01:53.000Z</published>
    <updated>2023-02-19T02:56:17.711Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="概述">概述</h2><p>在实验0中，你实现了流控制字节流（<code>ByteStream</code>）的抽象。</p><p>在实验1和2中，你实现了将不可靠数据报中的段转换为传入字节流的工具：<code>StreamReassembler</code>和<code>TCPReceiver</code>。</p><p>现在，在实验3中，你将实现连接的另一端：一个将出站字节流转换为不可靠数据报中发送段的工具。</p><p>最后，在第4个实验中，你将结合前几个实验的工作，创建一个工作的TCP实现：<code>TCPConnection</code>，其中包含<code>TCPSender</code>和<code>TCPReceiver</code>。你将用它来与世界各地的真实服务器进行对话。</p><p><img src="https://cdn.jsdelivr.net/gh/Misaka-9982-coder/img_hosting/img/image-20220322233230399.png" alt="image-20220322233230399"></p><h2 id="开始">开始</h2><p>你对<code>TCPSender</code>的实现将使用与你在实验0-2中使用的相同的Sponge库，并有额外的类和测试。为了开始进行作业：</p><ol><li>请确保你已经提交了你在实验2中的所有解决方案。请不要修改<code>libsponge</code>目录顶层以外的任何文件，或者<code>webget.cc</code>。否则，你可能会在合并实验3的启动代码时遇到麻烦。</li><li>在实验作业的存储库中，运行<code>git fetch</code>来检索实验作业的最新版本。</li><li>通过运行<code>git merge origin/lab3-startercode</code>，下载实验3的启动代码。</li><li>在<code>build</code>目录中，编译源代码：<code>make</code>（编译时可以运行<code>make -j4</code>以使用四个处理器）。</li><li>在<code>build</code>目录外，打开并开始编辑<code>writeups/lab3.md</code>文件。这是你实验报告的模板，将包含在你提交的内容中。</li></ol><h2 id="实验3：TCP发送方">实验3：TCP发送方</h2><p>TCP是一个协议，通过不可靠的数据报可靠地传输一对流量控制字节流（每个方向一个）。双方参与TCP连接，并且每一方同时充当“发送方”（其自身的传出字节流）和“接收方”（传入字节流）。双方被称为连接的“端点”或“对等点”。</p><p>本周，你将实现TCP的“发送方”部分，负责读取<code>ByTestStream</code>（由某些发送方应用程序创建并写入），并将流转换为一系列传出TCP段。在远程端，TCP接收方（重要的是要记住，接收方可以是有效TCP接收方的任何实现，而不一定是你自己的TCPReceiver。互联网标准最有价值的一点是，它们在端点之间建立一种通用语言，否则（指的是没有通用语言的情况），这些端点的行为可能会非常不同。）将这些段（那些到达的段，它们不一定都能到达）转换回原始字节流，并将确认和窗口发送回发送方。</p><p><img src="https://cdn.jsdelivr.net/gh/Misaka-9982-coder/img_hosting/img/image-20230217113144228.png" alt="image-20230217113144228"></p><p><code>TCPSender</code>将负责：</p><ul><li>跟踪接收方的窗口（处理传入的确认号（<strong>ackno</strong>）和窗口大小（<strong>window size</strong>）） ；</li><li>尽可能通过读取<code>ByTestStream</code>、创建新的TCP段（包括SYN和FIN标志，如果需要），填充窗口，并发送它们；</li><li>跟踪哪些段已经发送但尚未被接收方确认——我们称之为“未完成的”段；</li><li>如果发送后经过足够的时间但尚未确认，则重新发送未完成的段；</li></ul><blockquote><p>为什么要这样做？基本原则是发送接收方允许我们发送的任何内容（填充窗口），并不断重传，直到接收方确认每段内容，这称为“自动重复请求”（ARQ）。发送方将字节流分成若干段，并在接收方窗口允许的范围内发送它们。感谢你上周的工作，我们知道，只要远程TCP接收方至少收到一次带有索引标记的字节，就可以重构字节流，而无论其顺序如何。发送方的工作是确保接收方至少获得每个字节一次。</p></blockquote><h3 id="TCPSender-应在何时断定某个段丢失并再次发送？"><code>TCPSender</code> 应在何时断定某个段丢失并再次发送？</h3><p>你的 <code>TCPSender</code> 将发送一组 <code>TCPSegments</code>。每个将包含来自传出 <code>ByTestStream</code> 的一个子字符串（可能为空），用序列号索引以指示其在流中的位置，并在流的开头用 <code>SYN</code> 标志标记，在流的结尾用 <code>FIN</code> 标志标记。</p><p>除了发送这些段外，<code>TCPSender</code> 还必须跟踪其未完成的段，直到它们占用的序列号被完全确认。<code>TCPSender</code> 的所有者将定期调用 <code>TCPSender</code> 的 <code>tick</code> 方法，以指示时间的流逝。<code>TCPSender</code> 负责查看其未完成的 <code>TCPSegments</code> 集合，并确定最早的已发送的段是否在未完成的情况下因为时间过长而未被确认（即，未确认其所有序列号）。如果是，则需要重新传输（再次发送）。</p><p>以下是“由于太长时间未完成”的含义规则。（这些是基于 <code>TCP</code> “真实”规则的简化版本：<code>RFC 6298</code>，建议5.1至5.6。这里的版本有点简化，但是你的TCP实现仍然能够与Internet上的真实服务器进行通信。）你将要实现的逻辑非常详细，但我们不希望你担心隐藏的测试用例试图绊倒你，或将其视为 <code>SAT</code>上的文字问题。本周我们将为你提供一些合理的单元测试，完成整个 <code>TCP</code> 实现后，在实验4中进行更全面的集成测试。只要你100%通过了这些测试，并且你的实现是合理的，就没事了。</p><blockquote><p>为什么要这样做？总的目标是让发送方及时检测到段丢失并需要重新发送的情况。重发前的等待时间是很重要的：你不希望发送方等待太长的时间来重发一个网段（因为这会延迟流向接收应用程序的字节），但你也不希望它重新发送一段如果发送方再等一段时间就会被确认的信息，这会浪费互联网的宝贵容量。</p></blockquote><ol><li>每隔几毫秒，你的 <code>TCPSender</code> 的 <code>tick</code> 方法就会被调用一次，它的参数是告诉你自上次调用该方法以来已经过了多少毫秒。使用参数可以维护 <code>TCPSender</code>已激活的总毫秒数的概念。请不要试图从操作系统或CPU调用任何“time”或“clock”函数——tick方法是你唯一访问时间流逝的方法。这样可以保持事物的确定性和可测试性。</li><li>当构建<code>TCPSender</code>时，会给它一个参数，告诉它**重传超时（retransmission timeout, RTO）**的“初始值”。RTO是在重新发送一个未完成的TCP段之前要等待的毫秒数。RTO的值会随时间变化，但“初始值”保持不变。启动代码将RTO的“初始值”保存在一个名为 <code>_initial_retransmission_timeout</code> 的成员变量中。</li><li>你将实现重传计时器<strong>timer</strong>：一个可以在某个时间启动的警报，一旦RTO过期，警报就会熄灭（或”过期”）。我们强调，这种时间流逝的概念来自于被调用的tick方法，而不是通过获取一天中的实际时间。</li><li>每次发送包含数据（在序列空间中长度非零）的段（不管是第一次还是重传），如果 <code>timer</code> 没有运行，就启动它，使它在RTO毫秒后失效（对于RTO的当前值）。</li><li>当所有未完成的数据都被确认后，关闭重传计时器。</li><li>如果 <code>tick</code> 被调用，并且重传计时器已经过期：<ul><li>(a) 重传TCP接收方尚未完全确认的最早（最低序列号）段。你需要在一些内部数据结构中存储未发送的段，以便能够做到这一点。</li><li>(b) 如果窗口大小为非零：<ul><li>i. 跟踪连续重新传输的次数，并增加它，因为你刚刚重新传输了一些内容。你的<code>TCPConnection</code>将使用这些信息来决定连接是否无望（连续重传次数过多）并需要中止。</li><li>ii. 将RTO的值增加一倍。（这被称为“指数回退”——它会减慢糟糕网络上的重传速度，以避免进一步堵塞工作。我们将在稍后的课堂上了解更多有关这方面的内容。）</li></ul></li><li>© 启动重传timer，使其在RTO毫秒后过期（对于前一个要点中概述的加倍操作后的RTO值）。</li></ul></li><li>当接收方给发送方确认成功接收新数据的<code>ackno</code>时（该<code>ackno</code>反映了一个大于之前的任何<code>ackno</code>的绝对序列号）。<ul><li>(a) 将RTO调回其“初始值”。</li><li>(b) 如果发送方有任何未完成的数据，重新启动重传timer，使其在RTO毫秒后失效（对于RTO的当前值）。</li><li>© 将“连续重传”的计数重设为零。</li></ul></li></ol><p>你可能希望在单独的类中实现重传计时器的功能，这取决于你自己。如果需要，请将其添加到现有文件（<code>tcp_sender.hh</code>和<code>tcp_receiver.hh</code>）。</p><h3 id="实现TCP发送方">实现TCP发送方</h3><p>Ok！我们已经讨论了TCP发送方所做的基本概念（给定一个传出的<code>ByteStream</code>，把它分割成若干段，发送给接收者，如果它们没有很快得到确认，就继续重新发送）。我们还讨论了何时得出结论：未完成的段已经丢失，需要重新发送。</p><p>现在是你的<code>TCPSender</code>将提供的具体接口的时候了。有四个重要的事件需要它来处理，每一个事件都可能最终发送一个<code>TCPSegment</code>：</p><ol><li><code>fill_window</code>：<code>TCPSender</code>被要求填充窗口：它从其输入的<code>ByteStream</code>中读取并以<code>TCPSegments</code>的形式发送尽可能多的字节，只要窗口中有新的字节要读取和可用空间。你要确保你发送的每一个<code>TCPSegment</code>都能完全放入接收方的窗口中。使每个单独的<code>TCPSegment</code>尽可能大，但不能大于<code>TCPConfig::MAX_PAYLOAD_SIZE</code>（1452字节）所给的值。你可以使用<code>TCPSegment::length_in_sequence_space()</code>方法来计算一个段所占用的序列号的总数。你的TCPSender维护着一个名为<code>_next_seqn</code>的成员变量，它存储着从零开始的发送的绝对序列号。对于你发送的每一个段，你都要让<code>_next_seqno</code>增加段的长度，以便知道下一段的序列号。</li><li><code>ack_received</code>：从接收方收到一个确认信息，包括窗口的左边缘（= <code>ackno</code>）和右边缘（= <code>ackno + window size</code>）。<code>TCPSender</code>应该查看其未完成的段的集合，并删除任何现在已被完全确认的段（<code>ackno</code>大于该段中的所有序列号）。如果打开了新空间（指窗口变大），<code>TCPSender</code>可能需要再次填充窗口。如果<code>ackno</code>无效，即确认发送方尚未发送的数据，则此方法返回false。</li><li><code>tick</code>：经过的时间；<code>TCPSender</code>将检查重传计时器是否已过期，如果是，则以最低的序列号重传未发送的段。（重要的是，重新传输的决定不必看接收方的窗口：该段在第一次发送时落在窗口内，并且尚未确认，因此现在仍在接收方的窗口内。接收方不应该“收缩”窗口的右边缘，你可以假设右边缘始终保持不变或向右移动。）</li><li><code>send_empty_segment</code>：<code>TCPSender</code>应该生成并发送一个在序列空间中长度为零的<code>TCPSegment</code>，并将序列号正确设置为<code>_next_seqno</code>。如果所有者（你下周要实现的TCPConnection）想发送一个空的ACK段，这很有用。这种段（不携带数据，不占用序列号）不需要作为”未完成”来跟踪，也不会被重传。</li></ol><p>为了完成实验3，请查看文档中的完整接口，网址是https://cs144.github.io/doc/lab3/class_t_c_p_sender.html，并在<code>tcp_sender.hh</code>和<code>tcp_sender.cc</code>文件中实现完整的<code>TCPSender</code>公共接口。我们预计你会想添加私有方法和成员变量，可能还有一个辅助类。</p><h3 id="常见问题和特殊情况">常见问题和特殊情况</h3><ul><li><p>如何“发送”一个片段？</p><p>把它push到<code>_segments_out</code>队列中。就你的<code>TCPSender</code>而言，当你把它push到这个队列时，就认为它已经发送了。很快，所有者就会出现并pop它（使用公共的<code>segments_out()</code>访问器方法），并真正发送它。</p></li><li><p>等等，我如何既“发送”一段，又将同一段记录为未完成，以便我知道以后重新传输什么？那我不是要给每个网段做一个副本吗？这是不是很浪费？</p><p>当你发送一个包含数据的段时，你可能想把它push到<code>_segments_out</code>队列中，同时在内部的数据结构中保留一个副本，让你跟踪未完成的网段，以便可能的重传。这并不是很浪费，因为段的有效载荷被存储为引用计数的只读字符串（一个<code>Buffer</code>对象）。所以不用担心，它实际上并没有复制有效载荷数据。</p></li><li><p>在我从接收方得到<code>ACK</code>之前，我的<code>TCPSender</code>应该假定接收方的窗口大小是多少？</p><p>一个字节。</p></li><li><p>接收方告诉我它的窗口大小是零字节。我是否应该被卡住，不再发送任何数据？</p><p>否。如果接收方告诉你它的窗口长度是零字节，请将该信息保存为任何其他窗口使用（advertisement），因为它对3.1中描述的重传行为很重要。但当需要填充窗口时，请将窗口大小设置为一个字节。这被称为“零窗口探测”——这是一种定期探测接收方的方式，看看自从我们上次听到他们的消息后，他们是否碰巧在窗口中开辟了一些更多的空间。最坏的情况是，接收方会忽略你的一个字节段。（在一个更适合生产的TCP实现中，零窗口探测行为会更复杂一些，但也不会过于复杂。）</p></li><li><p>如果确认仅部分确认某些未完成的部分，我该怎么办？我是否应该尝试删除已确认的字节？</p><p>TCP发送方可以这样做，但就课程而言，没有必要搞得太复杂。在完全确认之前，将每个段视为完全未完成——它所占用的所有序列号都小于ackno。</p></li><li><p>如果我发送了三个包含 “a”、”b “和 “c “的独立段，但它们从未被确认，我可以在以后将它们重新传送到一个包含 “abc “的大段吗？还是我必须单独重发每个段？</p><p>再说一遍：TCP发送方可以做到这一点，但就本课程而言，没有必要搞得太花哨。只要单独跟踪每个未处理的段，当重传计时器到期时，再次发送最早的未处理段。</p></li><li><p>我应该在“未处理”数据结构中存储空段，并在必要时重发它们吗？</p><p>不，只有那些传递一些数据的网段（即在序列空间中消耗一些长度的网段）才应该被追踪为未完成的网段，并可能被重传。一个空的ACK不需要被记住，也不需要被重传。</p></li><li><p>如果这个PDF出来后还有更多的FAQ，我在哪里可以看到？</p><p>请定期查看网站（<a href="https://cs144.github.io/lab_faq.html%EF%BC%89%E5%92%8CPiazza%E3%80%82">https://cs144.github.io/lab_faq.html）和Piazza。</a></p></li></ul><h3 id="RTO-Timer">RTO Timer</h3><ul><li><a href="https://datatracker.ietf.org/doc/rfc6298/">RFC6298</a></li></ul><p><img src="https://cdn.jsdelivr.net/gh/Misaka-9982-coder/img_hosting/img/image-20230219091320947.png" alt="image-20230219091320947"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RetransmissionTimer</span> &#123;</span></span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> _time_rest;</span><br><span class="line">    <span class="keyword">bool</span> _on_off;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">RetransmissionTimer</span>(uint RTO = <span class="number">0</span>)</span><br><span class="line">      : _time_rest(RTO), _on_off(<span class="literal">false</span>) &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">reset</span><span class="params">(uint RTO)</span> </span>&#123;</span><br><span class="line">      _on_off = <span class="literal">true</span>;</span><br><span class="line">      _time_rest = RTO;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">passing</span><span class="params">(<span class="keyword">const</span> <span class="keyword">size_t</span> ms_since_last_tick)</span> </span>&#123;</span><br><span class="line">      _time_rest -= ms_since_last_tick;</span><br><span class="line">      <span class="keyword">return</span> _on_off &amp;&amp; (_time_rest &lt;= <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">activated</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> _on_off; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>&#123; _on_off = <span class="literal">false</span>; &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这段代码定义了一个重传定时器类 <code>RetransmissionTimer</code>，用于在 TCP 协议中进行超时重传。该类具有以下成员变量和成员函数：</p><ul><li><code>_time_rest</code>：表示当前定时器剩余的时间（以毫秒为单位），默认为0。</li><li><code>_on_off</code>：表示当前定时器是否处于开启状态，默认为关闭状态。</li><li><code>RetransmissionTimer</code> 构造函数：可以传入一个可选的 RTO（重传超时）值作为参数，用于初始化 <code>_time_rest</code> 和 <code>_on_off</code>。</li><li><code>reset</code> 成员函数：用于重新设置定时器的状态，将 <code>_on_off</code> 置为 <code>true</code>，将 <code>_time_rest</code> 设置为 RTO 的值。</li><li><code>passing</code> 成员函数：接受一个时间间隔 <code>ms_since_last_tick</code> 的参数，表示距离上一次定时器计时已经过去了多少毫秒。函数首先将 <code>_time_rest</code> 减去这个时间间隔，然后返回 <code>_on_off &amp;&amp; (_time_rest &lt;= 0)</code> 的结果。如果定时器开启且剩余时间小于等于 0，则表示定时器已经超时，函数返回 true。</li><li><code>activated</code> 成员函数：返回定时器是否处于开启状态。</li><li><code>stop</code> 成员函数：将定时器关闭，将 <code>_on_off</code> 置为 <code>false</code>。</li></ul><h3 id="TCPSender">TCPSender</h3><p>TCPSender的状态转移</p><p><img src="https://kiprey.github.io/2021/11/cs144-lab3/image-20211109080457029.png" alt=""></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//! Accepts a ByteStream, divides it up into segments and sends the</span></span><br><span class="line"><span class="comment">//! segments, keeps track of which segments are still in-flight,</span></span><br><span class="line"><span class="comment">//! maintains the Retransmission Timer, and retransmits in-flight</span></span><br><span class="line"><span class="comment">//! segments if the retransmission timer expires.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TCPSender</span> &#123;</span></span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">//! our initial sequence number, the number for our SYN.</span></span><br><span class="line">    WrappingInt32 _isn;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//! outbound queue of segments that the TCPSender wants sent</span></span><br><span class="line">    std::queue&lt;TCPSegment&gt; _segments_out&#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//! retransmission timer for the connection</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> _initial_retransmission_timeout;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//! outgoing stream of bytes that have not yet been sent</span></span><br><span class="line">    ByteStream _stream;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//! the (absolute) sequence number for the next byte to be sent</span></span><br><span class="line">    <span class="keyword">uint64_t</span> _next_seqno&#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">    uint _consecutive_retransmission_count&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    uint _retransmission_timeout;</span><br><span class="line">    </span><br><span class="line">    RetransmissionTimer _timer;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">size_t</span> _window_size;</span><br><span class="line">    <span class="keyword">size_t</span> _bytes_in_flight;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">TCPState</span> &#123;</span> CLOSED, SYN_SENT, SYN_ACKED, FIN_SENT, FIN_ACKED &#125;;</span><br><span class="line">    TCPState _state&#123; CLOSED &#125;;</span><br><span class="line"></span><br><span class="line">    std::queue&lt;TCPSegment&gt; _segments_in_flight;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">segcmp</span><span class="params">(<span class="keyword">const</span> TCPSegment &amp;seg1, <span class="keyword">const</span> TCPSegment &amp;seg2)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> seg1.<span class="built_in">header</span>().seqno.<span class="built_in">raw_value</span>() &gt; seg2.<span class="built_in">header</span>().seqno.<span class="built_in">raw_value</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//! Initialize a TCPSender</span></span><br><span class="line">    <span class="built_in">TCPSender</span>(<span class="keyword">const</span> <span class="keyword">size_t</span> capacity = TCPConfig::DEFAULT_CAPACITY,</span><br><span class="line">              <span class="keyword">const</span> <span class="keyword">uint16_t</span> retx_timeout = TCPConfig::TIMEOUT_DFLT,</span><br><span class="line">              <span class="keyword">const</span> std::optional&lt;WrappingInt32&gt; fixed_isn = &#123;&#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//! \name &quot;Input&quot; interface for the writer</span></span><br><span class="line">    <span class="comment">//!@&#123;</span></span><br><span class="line">    <span class="function">ByteStream &amp;<span class="title">stream_in</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> _stream; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">const</span> ByteStream &amp;<span class="title">stream_in</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> _stream; &#125;</span><br><span class="line">    <span class="comment">//!@&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//! \name Methods that can cause the TCPSender to send a segment</span></span><br><span class="line">    <span class="comment">//!@&#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//! \brief A new acknowledgment was received</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">ack_received</span><span class="params">(<span class="keyword">const</span> WrappingInt32 ackno, <span class="keyword">const</span> <span class="keyword">uint16_t</span> window_size)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//! \brief Generate an empty-payload segment (useful for creating empty ACK segments)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">send_empty_ack</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">send_empty_rst</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">fill_segment</span><span class="params">(TCPSegment&amp; seg)</span></span>;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">//! \brief create and send segments to fill as much of the window as possible</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">fill_window</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//! \brief Notifies the TCPSender of the passage of time</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">tick</span><span class="params">(<span class="keyword">const</span> <span class="keyword">size_t</span> ms_since_last_tick)</span></span>;</span><br><span class="line">    <span class="comment">//!@&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//! \name Accessors</span></span><br><span class="line">    <span class="comment">//!@&#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//! \brief How many sequence numbers are occupied by segments sent but not yet acknowledged?</span></span><br><span class="line">    <span class="comment">//! \note count is in &quot;sequence space,&quot; i.e. SYN and FIN each count for one byte</span></span><br><span class="line">    <span class="comment">//! (see TCPSegment::length_in_sequence_space())</span></span><br><span class="line">    <span class="function"><span class="keyword">size_t</span> <span class="title">bytes_in_flight</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//! \brief Number of consecutive retransmissions that have occurred in a row</span></span><br><span class="line">    <span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">consecutive_retransmissions</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//! \brief TCPSegments that the TCPSender has enqueued for transmission.</span></span><br><span class="line">    <span class="comment">//! \note These must be dequeued and sent by the TCPConnection,</span></span><br><span class="line">    <span class="comment">//! which will need to fill in the fields that are set by the TCPReceiver</span></span><br><span class="line">    <span class="comment">//! (ackno and window size) before sending.</span></span><br><span class="line">    <span class="function">std::queue&lt;TCPSegment&gt; &amp;<span class="title">segments_out</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> _segments_out; &#125;</span><br><span class="line">    <span class="comment">//!@&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//! \name What is the next sequence number? (used for testing)</span></span><br><span class="line">    <span class="comment">//!@&#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//! \brief absolute seqno for the next byte to be sent</span></span><br><span class="line">    <span class="function"><span class="keyword">uint64_t</span> <span class="title">next_seqno_absolute</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> _next_seqno; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//! \brief relative seqno for the next byte to be sent</span></span><br><span class="line">    <span class="function">WrappingInt32 <span class="title">next_seqno</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">wrap</span>(_next_seqno, _isn); &#125;</span><br><span class="line">    <span class="comment">//!@&#125;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>该代码定义了一个 TCPSender 类，表示 TCP 的发送端。</p><p>该类有以下成员变量：</p><ul><li>_isn：TCP 连接的初始序列号，也就是 SYN 包的序列号。</li><li>_segments_out：已经准备好的待发送的 TCP 段。</li><li>_initial_retransmission_timeout：初始的重传超时时间。</li><li>_stream：未发送的字节流。</li><li>_next_seqno：下一个待发送的字节的序列号。</li><li>_consecutive_retransmission_count：连续重传的次数。</li><li>_retransmission_timeout：当前的重传超时时间。</li><li>_timer：TCP 发送端的重传定时器。</li><li>_window_size：TCP 接收端的窗口大小。</li><li>_bytes_in_flight：已经发送但未确认的字节数。</li><li>_state：TCP 连接的状态，包括 CLOSED、SYN_SENT、SYN_ACKED、FIN_SENT 和 FIN_ACKED。</li><li>_segments_in_flight：已经发送但未确认的 TCP 段。</li></ul><p>该类有以下成员函数：</p><ul><li>TCPSender()：构造函数。</li><li>stream_in()：获取待发送的字节流。</li><li>ack_received()：接收到 ACK 报文，更新状态信息。</li><li>send_empty_ack() 和 send_empty_rst()：发送空 ACK 和 RST 报文。</li><li>fill_window()：尽可能填充窗口并创建并发送 TCP 段。</li><li>tick()：定时器回调函数。</li><li>bytes_in_flight() 和 consecutive_retransmissions()：获取未确认的字节数和连续重传的次数。</li><li>segments_out()：获取已经准备好的待发送的 TCP 段。</li><li>next_seqno_absolute() 和 next_seqno()：获取下一个待发送字节的绝对序号和相对序号。</li></ul><h3 id="tick-函数">tick 函数</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//! \param[in] ms_since_last_tick the number of milliseconds since the last call to this method</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TCPSender::tick</span><span class="params">(<span class="keyword">const</span> <span class="keyword">size_t</span> ms_since_last_tick)</span> </span>&#123; </span><br><span class="line">    <span class="comment">// If tick is called and the retransmission timer has expired</span></span><br><span class="line">    <span class="keyword">if</span> (_timer.<span class="built_in">activated</span>() &amp;&amp; _timer.<span class="built_in">passing</span>(ms_since_last_tick)) &#123;</span><br><span class="line">        <span class="comment">// 6. (a) </span></span><br><span class="line">        TCPSegment seg = _segments_in_flight.<span class="built_in">front</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// If the window size is nonzero</span></span><br><span class="line">        <span class="keyword">if</span> (_window_size != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 6. (b) i</span></span><br><span class="line">            _consecutive_retransmission_count ++ ;</span><br><span class="line">            <span class="comment">// 6. (b) ii</span></span><br><span class="line">            _retransmission_timeout *= <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 6. (c)</span></span><br><span class="line">        <span class="keyword">if</span> (_consecutive_retransmission_count &lt;= TCPConfig::MAX_RETX_ATTEMPTS) &#123;</span><br><span class="line">            _segments_out.<span class="built_in">push</span>(seg);</span><br><span class="line">            _timer.<span class="built_in">reset</span>(_retransmission_timeout);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            _timer.<span class="built_in">stop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码是 TCP 发送方 TCPSender 的 tick() 方法的实现。tick() 方法会在每次定时器触发时被调用，参数 <code>ms_since_last_tick</code> 表示自上次调用该方法以来经过的时间。</p><p>代码中的注释已经非常详细了，下面是一些简要的解释：</p><p>首先，如果定时器已经触发且已经过了超时时间，就需要对当前正在传输中的段进行处理。</p><p>然后，如果窗口大小是非零的，就将当前段的连续重传次数加 1，同时将重传超时时间加倍。</p><p>如果连续重传次数不超过最大重传次数，则将该段推入待发送队列 <code>_segments_out</code> 中，同时重置定时器。如果超过最大重传次数，则停止定时器。</p><p>整个过程的目的是确保 TCP 连接上的数据能够被成功传输，即使在网络出现故障、丢包等问题时也能够自动进行重传。</p><h3 id="ack-received">ack_received</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//! \param ackno The remote receiver&#x27;s ackno (acknowledgment number)</span></span><br><span class="line"><span class="comment">//! \param window_size The remote receiver&#x27;s advertised window size</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TCPSender::ack_received</span><span class="params">(<span class="keyword">const</span> WrappingInt32 ackno, <span class="keyword">const</span> <span class="keyword">uint16_t</span> window_size)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// do not receive</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">unwrap</span>(ackno, _isn, _next_seqno) &gt; _next_seqno) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    _window_size = window_size;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// from SYN_SENT state to SYN_ACKED state</span></span><br><span class="line">    <span class="keyword">if</span> (_state == SYN_SENT &amp;&amp; ackno == <span class="built_in">wrap</span>(<span class="number">1</span>, _isn)) &#123;</span><br><span class="line">        _state = SYN_ACKED;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// no segments to receive</span></span><br><span class="line">    <span class="keyword">if</span> (_segments_in_flight.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    TCPSegment seg = _segments_in_flight.<span class="built_in">front</span>();</span><br><span class="line">    <span class="keyword">bool</span> successful_receipt_of_new_data = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> seq = <span class="built_in">unwrap</span>(seg.<span class="built_in">header</span>().seqno, _isn, _next_seqno) + seg.<span class="built_in">length_in_sequence_space</span>();</span><br><span class="line">    <span class="keyword">auto</span> ack = <span class="built_in">unwrap</span>(ackno, _isn, _next_seqno);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (seq &lt;= ack) &#123;</span><br><span class="line">        _bytes_in_flight -= seg.<span class="built_in">length_in_sequence_space</span>();</span><br><span class="line">        _segments_in_flight.<span class="built_in">pop</span>();</span><br><span class="line">        successful_receipt_of_new_data = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (_segments_in_flight.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        seg = _segments_in_flight.<span class="built_in">front</span>();</span><br><span class="line"></span><br><span class="line">        seq = <span class="built_in">unwrap</span>(seg.<span class="built_in">header</span>().seqno, _isn, _next_seqno) + seg.<span class="built_in">length_in_sequence_space</span>();</span><br><span class="line">        ack = <span class="built_in">unwrap</span>(ackno, _isn, _next_seqno);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (successful_receipt_of_new_data) &#123;</span><br><span class="line">        <span class="comment">// 7. (a) Set the RTO back to its “initial value.”</span></span><br><span class="line">        _retransmission_timeout = _initial_retransmission_timeout;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 7. (b) If the sender has any outstanding data, restart the retransmission timer </span></span><br><span class="line">        <span class="comment">// so that it will expire after RTO milliseconds (for the current value of RTO).</span></span><br><span class="line">        <span class="keyword">if</span> (!_segments_in_flight.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            _timer.<span class="built_in">reset</span>(_retransmission_timeout);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            _timer.<span class="built_in">stop</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 7. (c) Reset the count of “consecutive retransmissions” back to zero.</span></span><br><span class="line">        _consecutive_retransmission_count = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码是TCP发送方的一个函数，用于处理接收到的确认报文。确认报文包含远程接收方已经成功接收到的字节数以及窗口大小。</p><p>首先，代码检查接收到的确认号是否是一个有效的号码，如果确认号比已经接收到的下一个序号还要大，则说明该确认号还没有被接收到，直接返回。</p><p>然后，代码更新发送窗口大小为接收到的窗口大小。如果发送方处于 <code>SYN_SENT</code> 状态，并且收到了期望的确认号（即初始序列号加 1），则将发送方状态更新为 <code>SYN_ACKED</code> 状态。</p><p>代码继续处理接收到的确认号，查找序列号等于或小于确认号的段，并从未确认段列表中移除它们。如果成功接收到新数据，发送方将执行以下操作：</p><ul><li>(a) 重置重传超时计时器为其初始值。</li><li>(b) 如果发送方有任何未确认的数据，则重新启动重传计时器，以便在 RTO 毫秒后超时（对于当前的 RTO 值）。</li><li>© 将“连续重传计数”的计数重置为零。</li></ul><p>最后，如果所有未确认的数据段都已经被确认，则代码停止计时器，如果还有未确认的数据，则重置计时器并更新“连续重传计数”的计数。</p><h3 id="fill-segment">fill_segment</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TCPSender::fill_segment</span><span class="params">(TCPSegment&amp; seg)</span> </span>&#123;</span><br><span class="line">    seg.<span class="built_in">header</span>().seqno = <span class="built_in">wrap</span>(_next_seqno, _isn);</span><br><span class="line"></span><br><span class="line">    _next_seqno += seg.<span class="built_in">length_in_sequence_space</span>();</span><br><span class="line">    _bytes_in_flight += seg.<span class="built_in">length_in_sequence_space</span>();</span><br><span class="line"></span><br><span class="line">    _segments_in_flight.<span class="built_in">push</span>(seg);</span><br><span class="line">    _segments_out.<span class="built_in">emplace</span>(<span class="built_in">move</span>(seg));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!_timer.<span class="built_in">activated</span>()) &#123;</span><br><span class="line">        _timer.<span class="built_in">reset</span>(_retransmission_timeout);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码是 TCP 发送方在发送一个 TCP 数据报前填充数据报的头部信息，并将数据报添加到待发送队列中。</p><p>在代码中，首先使用 <code>wrap()</code> 函数计算出数据报的序列号，并将该序列号设置为数据报头部的 <code>seqno</code> 字段。然后，将发送方的下一个序列号增加数据报的序列号空间长度（即增加 <code>seqno + payload.size()</code>）以更新发送方的下一个序列号，并将数据报的序列号空间长度加入到发送方的字节流队列中以更新发送方的字节流窗口。接着，将数据报添加到正在发送队列中（<code>segments_in_flight</code>）以便在重传时能够找到该数据报，同时将数据报添加到待发送队列中（<code>segments_out</code>）。最后，如果当前计时器没有启动，则使用计时器的 <code>reset()</code> 函数启动计时器，以便在超时时重传该数据报。</p><h3 id="fill-window">fill_window</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TCPSender::fill_window</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (_state == CLOSED) &#123;</span><br><span class="line">        <span class="comment">// syn_segment</span></span><br><span class="line">        TCPSegment syn_seg;</span><br><span class="line"></span><br><span class="line">        syn_seg.<span class="built_in">header</span>().syn = <span class="literal">true</span>;</span><br><span class="line">        <span class="built_in">fill_segment</span>(syn_seg);</span><br><span class="line">        </span><br><span class="line">        _state = SYN_SENT;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (_state == SYN_ACKED) &#123;</span><br><span class="line">        <span class="keyword">size_t</span> window_size = _window_size == <span class="number">0</span> ? <span class="number">1</span> : _window_size;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Congestion control</span></span><br><span class="line">        <span class="keyword">if</span> (_bytes_in_flight &gt;= window_size) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">size_t</span> bytes_sent = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">size_t</span> max_tobe_sent = window_size - _bytes_in_flight;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (bytes_sent &lt; max_tobe_sent &amp;&amp; !_stream.<span class="built_in">buffer_empty</span>()) &#123;</span><br><span class="line">            <span class="comment">// normal segment</span></span><br><span class="line">            TCPSegment seg;</span><br><span class="line">            seg.<span class="built_in">payload</span>() = <span class="built_in">Buffer</span>(<span class="built_in">move</span>(_stream.<span class="built_in">read</span>(<span class="built_in">min</span>(</span><br><span class="line">                TCPConfig::MAX_PAYLOAD_SIZE, max_tobe_sent - bytes_sent</span><br><span class="line">            ))));</span><br><span class="line">            </span><br><span class="line">            bytes_sent += seg.<span class="built_in">payload</span>().<span class="built_in">size</span>();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (_stream.<span class="built_in">eof</span>() &amp;&amp; bytes_sent &lt; max_tobe_sent) &#123;</span><br><span class="line">                seg.<span class="built_in">header</span>().fin = <span class="literal">true</span>;</span><br><span class="line">                _state = FIN_SENT;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">fill_segment</span>(seg);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (window_size - _bytes_in_flight &gt;= <span class="number">1</span> &amp;&amp; _stream.<span class="built_in">eof</span>() &amp;&amp; _state == SYN_ACKED) &#123;</span><br><span class="line">            <span class="comment">// fin_segment</span></span><br><span class="line">            TCPSegment fin_seg;</span><br><span class="line"></span><br><span class="line">            fin_seg.<span class="built_in">header</span>().fin = <span class="literal">true</span>;</span><br><span class="line">            <span class="built_in">fill_segment</span>(fin_seg);</span><br><span class="line"></span><br><span class="line">            _state = FIN_SENT;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码是 TCP 发送方在填充发送窗口的过程中使用的。当发送方处于 <code>CLOSED</code> 状态时，它会创建一个 <code>SYN</code> 段，通过调用 <code>fill_segment</code> 函数来将这个段添加到发送窗口中，并且将发送方的状态改为 <code>SYN_SENT</code>。</p><p>当发送方处于 <code>SYN_ACKED</code> 状态时，发送方会进行拥塞控制，确保没有过多的未确认段在传输，从而避免网络拥塞。发送方首先检查已经发送但还未被确认的字节数是否达到了窗口大小，如果达到了则停止填充窗口。如果还可以发送数据，发送方从流中读取最多 <code>max_tobe_sent - bytes_sent</code> 个字节，然后将这些字节放入 TCP 段的 <code>payload</code> 中，填写 TCP 段的首部信息，并通过调用 <code>fill_segment</code> 函数将 TCP 段添加到发送窗口中。如果此时流已经被读取完且还有一些字节没有被发送，那么发送方会创建一个 <code>FIN</code> 段，并通过 <code>fill_segment</code> 函数将 FIN 段添加到发送窗口中。如果 FIN 段也被确认，那么发送方的状态会变为 <code>FIN_SENT</code>。</p><h2 id="完整代码-3">完整代码</h2><ul><li><a href="https://github.com/Misaka-9982-coder/CS144-fa21/blob/optimize/libsponge/tcp_sender.hh">tcp_sender.hh</a></li><li><a href="https://github.com/Misaka-9982-coder/CS144-fa21/blob/optimize/libsponge/tcp_sender.cc">tcp_sender.cc</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="CS144" scheme="http://www.misaka-9982.com/tags/CS144/"/>
    
    <category term="Network" scheme="http://www.misaka-9982.com/tags/Network/"/>
    
  </entry>
  
  <entry>
    <title>CS144-Lab2</title>
    <link href="http://www.misaka-9982.com/2023/02/18/CS144-Lab2/"/>
    <id>http://www.misaka-9982.com/2023/02/18/CS144-Lab2/</id>
    <published>2023-02-18T15:30:41.000Z</published>
    <updated>2023-02-18T16:00:49.738Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="实验架构">实验架构</h2><p><img src="https://cdn.jsdelivr.net/gh/Misaka-9982-coder/img_hosting/img/image-20220322233230399.png" alt="image-20220322233230399"></p><p>除了写入传入流之外，<code>TCPReceiver</code> 还负责通知 <code>sender</code> 两件事：</p><ol><li>“<code>First unassembled</code>” 字节的索引，称为“<code>acknowledgment</code>”或 “<code>ackno</code>”。这是接收方需要来自发送方的第一个字节。</li><li>“<code>first unassembled</code> ” 索引和“<code>first unacceptable</code> ”索引之间的距离。这称为“<code>window size</code>”。</li></ol><p>总的来说，<code>ackno</code> 和 <code>window size</code> 述了 <code>TCPreceiver</code> 的窗口：<code>TCPsender</code> 被允许发送一系列索引。使用该窗口，<code>TCPreceiver</code> 可以做到流量控制，使发送方限制它发送的数量，直到接收方准备好更多的数据。有时，我们将 <code>ackno</code> 称为窗口的“左边”( <code>TCPRecsigner</code> 的最小索引)，而 <code>ackno + window size</code> 则称为“右边缘”(略大于 <code>TCPReceiver</code> 的最大索引)。</p><p>在编写 <code>Stream Reassembler</code> 和 <code>Byte Stream</code> 时，您已经完成了实现 <code>TCP Receiver</code> 所涉及的大部分算法工作；本实验是将这些通用类连接到 <code>TCP</code> 的细节。最困难的部分将涉及考虑 <code>TCP</code> 将如何表示每个字节在流中的位置——称为“<code>sequence number</code>”。</p><p>我们将要实现的 <code>TCPReceiver</code> 需要完成的功能：</p><ul><li>接收 <code>TCP segment</code></li><li>重新组装 <code>ByteStream</code></li><li>发送 <code>ackno</code> 和 <code>window size</code> 回 <code>TCP sender</code> ，以进行流量控制和数据确认</li></ul><h2 id="环境配置">环境配置</h2><p>当前我们的实验代码位于 <code>master</code> 分支，而在完成 Lab 之前需要合并一些依赖代码，因此执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge origin/lab2-startercode</span><br></pre></td></tr></table></figure><p>之后重新 <code>make</code> 编译即可。</p><h2 id="The-TCP-Receiver">The TCP Receiver</h2><p>在 Lab2，我们将实现一个 TCPReceiver，用以接收传入的 TCP segment 并将其转换成用户可读的数据流。</p><p>TCPReceiver 除了将读入的数据写入至 ByteStream 中以外，它还需要<strong>告诉发送者两个属性</strong>：</p><ul><li>第一个未组装的字节索引，称为<strong>确认号ackno</strong>，它是接收者需要的第一个字节的索引。</li><li><strong>第一个未组装的字节索引</strong>和<strong>第一个不可接受的字节索引</strong>之间的距离，称为 <strong>窗口长度window size</strong>。</li></ul><p>ackno 和 window size 共同描述了接收者当前的<strong>接收窗口</strong>。接收窗口是 发送者允许发送数据的一个范围，通常 TCP 接收方使用接收窗口来进行<strong>流量控制</strong>，限制发送方发送数据。</p><p>总的来说，我们将要实现的 TCPReceiver 需要做以下几件事情：</p><ul><li>接收TCP segment</li><li>重新组装字节流（包括EOF）</li><li>确定应该发回给发送者的信号，以进行数据确认和流量控制</li></ul><h3 id="1-Translating-between-64-bit-indexes-and-32-bit-seqnos">1. Translating between 64-bit indexes and 32-bit seqnos</h3><p>作为热身，我们需要实现TCP表示索引的方式。上周您创建了一个StreamReassembler，它重组子字符串，其中每个字节都有一个64位流索引，流中的第一个字节总是索引为0。64位索引足够大，我们可以将其视为永不溢出。然而，在TCP报头中，空间是宝贵的，流中的每个字节的索引不是用64位的索引表示的，而是用32位的“序列号”或“seqno”表示的。这增加了三个复杂性:</p><ol><li><strong>您的实现需要为32位整数进行规划</strong>：TCP中的流可以是任意长的——对于可以通过TCP发送的字节流的长度没有限制。但是232字节只有4GiB，并不是很大。一旦一个32位的序列号计数到232−1，流中的下一个字节的序列号将为0。</li><li><strong>TCP序列号从一个随机值开始</strong>：为了提高安全性，并避免被属于同一端点之间早期连接的旧段所混淆，TCP试图确保序列号不会被猜测，并且不太可能重复。所以流的序列号不是从0开始的。流中的第一个序列号是一个随机的32位数字，称为初始序列号(Initial sequence number, ISN)。这是表示SYN(流的开始)的序列号。其余的序列号在此之后正常运行:数据的第一个字节将有ISN+1 (mod 232)的序列号，第二个字节将有ISN+2 (mod 232)，等等。</li><li><strong>每个逻辑开始和结束占用一个序列号</strong>：除了确保接收到所有字节的数据外，TCP还确保可靠地接收流的开始和结束。因此，在TCP中SYN (start -ofstream)和FIN (end- stream)控制标志被分配了序列号。每一个都占用一个序列号。(SYN标志占用的序列号是ISN。)流中的每个数据字节也占用一个序列号。请记住，SYN和FIN不是流本身的一部分，也不是“字节”——它们表示字节流本身的开始和结束。</li></ol><p><img src="https://kiprey.github.io/2021/11/cs144-lab2/image-20211107105751818.png" alt=""></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> SPONGE_LIBSPONGE_WRAPPING_INTEGERS_HH</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SPONGE_LIBSPONGE_WRAPPING_INTEGERS_HH</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdint&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//! \brief A 32-bit integer, expressed relative to an arbitrary initial sequence number (ISN)</span></span><br><span class="line"><span class="comment">//! \note This is used to express TCP sequence numbers (seqno) and acknowledgment numbers (ackno)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WrappingInt32</span> &#123;</span></span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">uint32_t</span> _raw_value;  <span class="comment">//!&lt; The raw 32-bit stored integer</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//! Construct from a raw 32-bit unsigned integer</span></span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">WrappingInt32</span><span class="params">(<span class="keyword">uint32_t</span> raw_value)</span> : _raw_value(raw_value) &#123;</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">uint32_t</span> <span class="title">raw_value</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> _raw_value; &#125;  <span class="comment">//!&lt; Access raw stored value</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//! Transform a 64-bit absolute sequence number (zero-indexed) into a 32-bit relative sequence number</span></span><br><span class="line"><span class="comment">//! \param n the absolute sequence number</span></span><br><span class="line"><span class="comment">//! \param isn the initial sequence number</span></span><br><span class="line"><span class="comment">//! \returns the relative sequence number</span></span><br><span class="line"><span class="function">WrappingInt32 <span class="title">wrap</span><span class="params">(<span class="keyword">uint64_t</span> n, WrappingInt32 isn)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//! Transform a 32-bit relative sequence number into a 64-bit absolute sequence number (zero-indexed)</span></span><br><span class="line"><span class="comment">//! \param n The relative sequence number</span></span><br><span class="line"><span class="comment">//! \param isn The initial sequence number</span></span><br><span class="line"><span class="comment">//! \param checkpoint A recent absolute sequence number</span></span><br><span class="line"><span class="comment">//! \returns the absolute sequence number that wraps to `n` and is closest to `checkpoint`</span></span><br><span class="line"><span class="comment">//!</span></span><br><span class="line"><span class="comment">//! \note Each of the two streams of the TCP connection has its own ISN. One stream</span></span><br><span class="line"><span class="comment">//! runs from the local TCPSender to the remote TCPReceiver and has one ISN,</span></span><br><span class="line"><span class="comment">//! and the other stream runs from the remote TCPSender to the local TCPReceiver and</span></span><br><span class="line"><span class="comment">//! has a different ISN.</span></span><br><span class="line"><span class="function"><span class="keyword">uint64_t</span> <span class="title">unwrap</span><span class="params">(WrappingInt32 n, WrappingInt32 isn, <span class="keyword">uint64_t</span> checkpoint)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//! \name Helper functions</span></span><br><span class="line"><span class="comment">//!@&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//! \brief The offset of `a` relative to `b`</span></span><br><span class="line"><span class="comment">//! \param b the starting point</span></span><br><span class="line"><span class="comment">//! \param a the ending point</span></span><br><span class="line"><span class="comment">//! \returns the number of increments needed to get from `b` to `a`,</span></span><br><span class="line"><span class="comment">//! negative if the number of decrements needed is less than or equal to</span></span><br><span class="line"><span class="comment">//! the number of increments</span></span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">int32_t</span> <span class="keyword">operator</span>-(WrappingInt32 a, WrappingInt32 b) &#123; <span class="keyword">return</span> a.<span class="built_in">raw_value</span>() - b.<span class="built_in">raw_value</span>(); &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//! \brief Whether the two integers are equal.</span></span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span>==(WrappingInt32 a, WrappingInt32 b) &#123; <span class="keyword">return</span> a.<span class="built_in">raw_value</span>() == b.<span class="built_in">raw_value</span>(); &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//! \brief Whether the two integers are not equal.</span></span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span>!=(WrappingInt32 a, WrappingInt32 b) &#123; <span class="keyword">return</span> !(a == b); &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//! \brief Serializes the wrapping integer, `a`.</span></span><br><span class="line"><span class="keyword">inline</span> std::ostream &amp;<span class="keyword">operator</span>&lt;&lt;(std::ostream &amp;os, WrappingInt32 a) &#123; <span class="keyword">return</span> os &lt;&lt; a.<span class="built_in">raw_value</span>(); &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//! \brief The point `b` steps past `a`.</span></span><br><span class="line"><span class="keyword">inline</span> WrappingInt32 <span class="keyword">operator</span>+(WrappingInt32 a, <span class="keyword">uint32_t</span> b) &#123; <span class="keyword">return</span> WrappingInt32&#123;a.<span class="built_in">raw_value</span>() + b&#125;; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//! \brief The point `b` steps before `a`.</span></span><br><span class="line"><span class="keyword">inline</span> WrappingInt32 <span class="keyword">operator</span>-(WrappingInt32 a, <span class="keyword">uint32_t</span> b) &#123; <span class="keyword">return</span> a + -b; &#125;</span><br><span class="line"><span class="comment">//!@&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span>  <span class="comment">// SPONGE_LIBSPONGE_WRAPPING_INTEGERS_HH</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这段代码定义了一个名为<code>WrappingInt32</code>的类，表示相对于一个任意初始序列号（ISN）的32位整数。它被用来表示TCP序列号（seqno）和确认号（ackno）。此外，还定义了一些帮助函数，用于转换绝对序列号和相对序列号之间的关系。</p><p>具体来说，这里的<code>WrappingInt32</code>类只有一个私有成员变量<code>_raw_value</code>，它表示一个32位无符号整数的原始值。类中定义了一个公有构造函数<code>explicit WrappingInt32(uint32_t raw_value)</code>，用于将一个无符号整数转换为<code>WrappingInt32</code>对象。类还提供了一个公有成员函数<code>uint32_t raw_value() const</code>，用于访问对象的原始值。</p><p>此外，还定义了两个函数<code>wrap</code>和<code>unwrap</code>，分别用于将绝对序列号转换为相对序列号，以及将相对序列号转换为绝对序列号。<code>wrap</code>函数的输入参数为一个64位无符号整数<code>n</code>和一个<code>WrappingInt32</code>对象<code>isn</code>，输出为一个<code>WrappingInt32</code>对象，表示<code>n</code>相对于<code>isn</code>的相对序列号。<code>unwrap</code>函数的输入参数为一个<code>WrappingInt32</code>对象<code>n</code>，一个<code>WrappingInt32</code>对象<code>isn</code>，以及一个64位无符号整数<code>checkpoint</code>，输出为一个64位无符号整数，表示最接近<code>checkpoint</code>并相对于<code>isn</code>的序列号值为<code>n</code>的绝对序列号。</p><p>最后，还定义了一些辅助函数，如<code>operator-</code>，用于计算两个<code>WrappingInt32</code>对象之间的差值，<code>operator==</code>和<code>operator!=</code>用于比较两个<code>WrappingInt32</code>对象是否相等，<code>operator&lt;&lt;</code>用于将一个<code>WrappingInt32</code>对象输出到流中，以及<code>operator+</code>和<code>operator-</code>，分别用于将一个<code>WrappingInt32</code>对象向前或向后移动一定的距离。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//! Transform an &quot;absolute&quot; 64-bit sequence number (zero-indexed) into a WrappingInt32</span></span><br><span class="line"><span class="comment">//! \param n The input absolute 64-bit sequence number</span></span><br><span class="line"><span class="comment">//! \param isn The initial sequence number</span></span><br><span class="line"><span class="function">WrappingInt32 <span class="title">wrap</span><span class="params">(<span class="keyword">uint64_t</span> n, WrappingInt32 isn)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> isn + n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//! Transform a WrappingInt32 into an &quot;absolute&quot; 64-bit sequence number (zero-indexed)</span></span><br><span class="line"><span class="comment">//! \param n The relative sequence number</span></span><br><span class="line"><span class="comment">//! \param isn The initial sequence number</span></span><br><span class="line"><span class="comment">//! \param checkpoint A recent absolute 64-bit sequence number</span></span><br><span class="line"><span class="comment">//! \returns the 64-bit sequence number that wraps to `n` and is closest to `checkpoint`</span></span><br><span class="line"><span class="comment">//!</span></span><br><span class="line"><span class="comment">//! \note Each of the two streams of the TCP connection has its own ISN. One stream</span></span><br><span class="line"><span class="comment">//! runs from the local TCPSender to the remote TCPReceiver and has one ISN,</span></span><br><span class="line"><span class="comment">//! and the other stream runs from the remote TCPSender to the local TCPReceiver and</span></span><br><span class="line"><span class="comment">//! has a different ISN.</span></span><br><span class="line"><span class="function"><span class="keyword">uint64_t</span> <span class="title">unwrap</span><span class="params">(WrappingInt32 n, WrappingInt32 isn, <span class="keyword">uint64_t</span> checkpoint)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">uint32_t</span> offset = n.<span class="built_in">raw_value</span>() - <span class="built_in">wrap</span>(checkpoint, isn).<span class="built_in">raw_value</span>();</span><br><span class="line">    <span class="keyword">uint64_t</span> res = checkpoint + offset;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (offset &gt; (<span class="number">0x80000000</span>) &amp;&amp; res &gt;= (<span class="number">0x100000000</span>)) &#123;</span><br><span class="line">        res -= (<span class="number">0x100000000</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码包含了两个函数的实现，一个是 <code>wrap</code>，另一个是 <code>unwrap</code>。</p><p><code>wrap</code> 函数将一个 64 位的绝对序列号转换为一个 32 位的相对序列号，以 <code>isn</code> 为初始序列号。</p><p><code>unwrap</code> 函数将一个 32 位的相对序列号转换为一个 64 位的绝对序列号，以 <code>isn</code> 为初始序列号，并指定一个最近的绝对序列号 <code>checkpoint</code>，函数的返回值是一个绝对序列号，它等于相对序列号 <code>n</code> 对应的绝对序列号，同时又尽可能接近于 <code>checkpoint</code>。</p><p>其中 <code>wrap</code> 函数的实现比较简单，直接将输入的绝对序列号 <code>n</code> 加上初始序列号 <code>isn</code>，得到一个相对序列号即可。</p><p>而 <code>unwrap</code> 函数的实现稍微复杂一些。首先计算 <code>n</code> 和 <code>checkpoint</code> 之间的偏移量 <code>offset</code>，即 <code>n</code> 对应的绝对序列号与 <code>checkpoint</code> 的绝对序列号之差。然后将 <code>offset</code> 加到 <code>checkpoint</code> 上，就得到了 <code>n</code> 对应的绝对序列号 <code>res</code>。</p><p>这里需要注意一个问题，当 <code>offset</code> 的值比较大时（即大于等于 0x80000000），此时 <code>n</code> 对应的序列号可能要“绕一圈”，从而超过了 32 位的表示范围。因此，如果 <code>res</code> 大于等于 0x100000000，则需要减去 0x100000000，即从头开始计数，避免超出 32 位的表示范围。</p><h3 id="Implementing-the-TCP-receiver">Implementing the TCP receiver</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//! Receives and reassembles segments into a ByteStream, and computes</span></span><br><span class="line"><span class="comment">//! the acknowledgment number and window size to advertise back to the</span></span><br><span class="line"><span class="comment">//! remote TCPSender.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TCPReceiver</span> &#123;</span></span><br><span class="line">    <span class="comment">//! Our data structure for re-assembling bytes.</span></span><br><span class="line">    StreamReassembler _reassembler;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//! The maximum number of bytes we&#x27;ll store.</span></span><br><span class="line">    <span class="keyword">size_t</span> _capacity;</span><br><span class="line"></span><br><span class="line">    std::optional&lt;WrappingInt32&gt; _ackno&#123;&#125;;</span><br><span class="line">    WrappingInt32 _isn&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    WrappingInt32 _seq&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="comment">// the index of the last reassembled byte</span></span><br><span class="line">    <span class="keyword">uint64_t</span> _checkpt&#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//! \brief Construct a TCP receiver</span></span><br><span class="line">    <span class="comment">//!</span></span><br><span class="line">    <span class="comment">//! \param capacity the maximum number of bytes that the receiver will</span></span><br><span class="line">    <span class="comment">//!                 store in its buffers at any give time.</span></span><br><span class="line">    <span class="built_in">TCPReceiver</span>(<span class="keyword">const</span> <span class="keyword">size_t</span> capacity) : _reassembler(capacity), _capacity(capacity) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//! \name Accessors to provide feedback to the remote TCPSender</span></span><br><span class="line">    <span class="comment">//!@&#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//! \brief The ackno that should be sent to the peer</span></span><br><span class="line">    <span class="comment">//! \returns empty if no SYN has been received</span></span><br><span class="line">    <span class="comment">//!</span></span><br><span class="line">    <span class="comment">//! This is the beginning of the receiver&#x27;s window, or in other words, the sequence number</span></span><br><span class="line">    <span class="comment">//! of the first byte in the stream that the receiver hasn&#x27;t received.</span></span><br><span class="line">    <span class="function">std::optional&lt;WrappingInt32&gt; <span class="title">ackno</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//! \brief The window size that should be sent to the peer</span></span><br><span class="line">    <span class="comment">//!</span></span><br><span class="line">    <span class="comment">//! Operationally: the capacity minus the number of bytes that the</span></span><br><span class="line">    <span class="comment">//! TCPReceiver is holding in its byte stream (those that have been</span></span><br><span class="line">    <span class="comment">//! reassembled, but not consumed).</span></span><br><span class="line">    <span class="comment">//!</span></span><br><span class="line">    <span class="comment">//! Formally: the difference between (a) the sequence number of</span></span><br><span class="line">    <span class="comment">//! the first byte that falls after the window (and will not be</span></span><br><span class="line">    <span class="comment">//! accepted by the receiver) and (b) the sequence number of the</span></span><br><span class="line">    <span class="comment">//! beginning of the window (the ackno).</span></span><br><span class="line">    <span class="function"><span class="keyword">size_t</span> <span class="title">window_size</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="comment">//!@&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//! \brief number of bytes stored but not yet reassembled</span></span><br><span class="line">    <span class="function"><span class="keyword">size_t</span> <span class="title">unassembled_bytes</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> _reassembler.<span class="built_in">unassembled_bytes</span>(); &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//! \brief handle an inbound segment</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">segment_received</span><span class="params">(<span class="keyword">const</span> TCPSegment &amp;seg)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//! \name &quot;Output&quot; interface for the reader</span></span><br><span class="line">    <span class="comment">//!@&#123;</span></span><br><span class="line">    <span class="function">ByteStream &amp;<span class="title">stream_out</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> _reassembler.<span class="built_in">stream_out</span>(); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">const</span> ByteStream &amp;<span class="title">stream_out</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> _reassembler.<span class="built_in">stream_out</span>(); &#125;</span><br><span class="line">    <span class="comment">//!@&#125;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>TCPReceiver</code> 的解释如下：</p><p>TCP 接收器用于接收和重新组装 TCP Segment，并计算确认号和窗口大小以返回给远程发送器。</p><p>主要成员变量和函数包括：</p><ul><li><code>StreamReassembler _reassembler</code>：用于重新组装字节的数据结构；</li><li><code>size_t _capacity</code>：TCP 接收器可以同时存储的最大字节数；</li><li><code>std::optional&lt;WrappingInt32&gt; _ackno&#123;&#125;</code>：应该发送到对等端的 <code>ackno</code>，如果没有接收到 <code>SYN</code> 则为空；</li><li><code>WrappingInt32 _isn&#123;0&#125;</code>：初始序列号（<code>ISN</code>）；</li><li><code>WrappingInt32 _seq&#123;0&#125;</code>：接收到的最后一个 TCP 分段的序列号；</li><li><code>uint64_t _checkpt&#123;0&#125;</code>：最后一个重新组装的字节的索引（绝对序列号）；</li><li><code>ackno()</code>：返回应该发送到对等端的 ackno，如果没有接收到 <code>SYN</code> 则为空；</li><li><code>window_size()</code>：返回应该发送到对等端的窗口大小；</li><li><code>unassembled_bytes()</code>：返回已存储但尚未重新组装的字节数；</li><li><code>segment_received()</code>：处理传入的 TCP 分段。</li></ul><p>该类的主要功能是：</p><ul><li>接收传入的 TCP 分段，并将其发送到 <code>StreamReassembler</code> 进行重新组装；</li><li>计算应该发送给远程 <code>TCPSender</code> 的 <code>ackno</code> 和窗口大小，以便 <code>TCPSender</code> 知道还有多少可用的空间；</li><li>提供 <code>stream_out()</code> 函数，用于读取已重新组装的数据。</li></ul><h3 id="TCP-receiver-在连接生命周期中的状态转移">TCP receiver 在连接生命周期中的状态转移</h3><p><img src="https://kiprey.github.io/2021/11/cs144-lab2/image-20211107122822566.png" alt=""></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TCPReceiver::segment_received</span><span class="params">(<span class="keyword">const</span> TCPSegment &amp;seg)</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @note Listen state</span></span><br><span class="line"><span class="comment">     * @def not ackno().has_value() </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (!_ackno.<span class="built_in">has_value</span>()) &#123;</span><br><span class="line">        <span class="comment">// Handshake</span></span><br><span class="line">        <span class="keyword">if</span> (seg.<span class="built_in">header</span>().syn) &#123;</span><br><span class="line">            <span class="keyword">auto</span> rd = <span class="built_in">get_random_generator</span>();</span><br><span class="line">            _isn = <span class="built_in">WrappingInt32</span>(<span class="built_in">rd</span>());</span><br><span class="line">            _seq = seg.<span class="built_in">header</span>().seqno;</span><br><span class="line"></span><br><span class="line">            _reassembler.<span class="built_in">push_substring</span>(<span class="built_in">move</span>(seg.<span class="built_in">payload</span>().<span class="built_in">copy</span>()), <span class="number">0</span>, seg.<span class="built_in">header</span>().fin);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// SYN or FIN make _ackno+1</span></span><br><span class="line">            <span class="keyword">auto</span> ctrl = seg.<span class="built_in">length_in_sequence_space</span>() - seg.<span class="built_in">payload</span>().<span class="built_in">size</span>();</span><br><span class="line">            _ackno = <span class="built_in">WrappingInt32</span>(<span class="built_in">move</span>(_seq)) + ctrl + _reassembler.<span class="built_in">first_unassembled</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @note FIN_RECV state</span></span><br><span class="line"><span class="comment">     * @def stream_out.input_ended()</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (_ackno.<span class="built_in">has_value</span>() &amp;&amp; !<span class="built_in">stream_out</span>().<span class="built_in">input_ended</span>()) &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * @note SYN_RECV state</span></span><br><span class="line"><span class="comment">         * @def ackno.has_value() and not stream_out.input_ended()</span></span><br><span class="line"><span class="comment">         * @code 48 - 54</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">auto</span> index = <span class="built_in">unwrap</span>(<span class="built_in">move</span>(seg.<span class="built_in">header</span>().seqno), <span class="built_in">move</span>(_seq + <span class="number">1</span>), _checkpt);  <span class="comment">// &quot;+ 1&quot; for the &quot;SYN&quot;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// data too far, considered out of data</span></span><br><span class="line">        <span class="keyword">if</span> (index &gt; _checkpt &amp;&amp; ((index - _checkpt) &amp; <span class="number">0x80000000</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// data too far, considered out of data</span></span><br><span class="line">        <span class="keyword">if</span> (index &lt; _checkpt &amp;&amp; ((_checkpt - index) &amp; <span class="number">0x80000000</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        _reassembler.<span class="built_in">push_substring</span>(<span class="built_in">move</span>(<span class="built_in">Buffer</span>(<span class="built_in">move</span>(seg.<span class="built_in">payload</span>().<span class="built_in">copy</span>()))), index, seg.<span class="built_in">header</span>().fin);</span><br><span class="line">        _ackno = _ackno.<span class="built_in">value</span>() + _reassembler.<span class="built_in">first_unassembled</span>() - _checkpt;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// FIN should make _ackno + 1</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">stream_out</span>().<span class="built_in">input_ended</span>()) &#123;</span><br><span class="line">            _ackno = _ackno.<span class="built_in">value</span>() + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        _checkpt = _reassembler.<span class="built_in">first_unassembled</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码实现了TCP接收端的主要逻辑，即处理TCP段并将它们重新组装成字节流。代码中有几个状态，分别对应TCP协议中的连接建立、连接终止和正常数据传输的不同阶段。</p><p>首先，如果接收端还没有收到 <code>SYN</code>，就判断接收到的 <code>TCP</code> 段是否是 <code>SYN</code>，如果是，则在随机生成一个初始序列号后，将接收到的数据传递给 <code>StreamReassembler</code> 进行重新组装，并更新需要发送给发送方的确认序列号 <code>_ackno</code>。如果还没有收到 <code>SYN</code>，则直接返回。</p><p>如果接收端已经收到了 <code>SYN</code>，但还没有收到 <code>FIN</code>，则在接收到的TCP段中查找相对于已经接收的字节数偏移量，并使用 <code>StreamReassembler</code> 对接收到的数据进行重新组装。在重新组装之后，需要更新确认序列号 <code>_ackno</code>，并且如果数据流已经结束，需要将确认序列号加一。如果接收到的数据已经过期或已经在之前的数据段中处理过，则不需要重新组装数据，直接返回即可。</p><p>如果接收端已经收到了FIN，则不再接受更多的数据，并将 <code>_ackno</code> 加 1 以告诉发送端已经收到了所有数据。</p><h2 id="完整代码-2">完整代码</h2><ul><li><a href="https://github.com/Misaka-9982-coder/CS144-fa21/blob/optimize/libsponge/wrapping_integers.hh">wrapping_integers.hh</a></li><li><a href="https://github.com/Misaka-9982-coder/CS144-fa21/blob/optimize/libsponge/wrapping_integers.cc">wrapping_integers.cc</a></li><li><a href="https://github.com/Misaka-9982-coder/CS144-fa21/blob/optimize/libsponge/tcp_receiver.hh">tcp_receiver.hh</a></li><li><a href="https://github.com/Misaka-9982-coder/CS144-fa21/blob/optimize/libsponge/tcp_receiver.cc">tcp_receiver.cc</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="CS144" scheme="http://www.misaka-9982.com/tags/CS144/"/>
    
    <category term="Network" scheme="http://www.misaka-9982.com/tags/Network/"/>
    
  </entry>
  
  <entry>
    <title>CS144-Lab1</title>
    <link href="http://www.misaka-9982.com/2023/02/18/CS144-Lab1/"/>
    <id>http://www.misaka-9982.com/2023/02/18/CS144-Lab1/</id>
    <published>2023-02-18T14:39:12.000Z</published>
    <updated>2023-02-19T03:03:01.555Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="实验架构-2">实验架构</h2><p>TCP实施中模块和数据流的排列 :</p><p><img src="https://cdn.jsdelivr.net/gh/Misaka-9982-coder/img_hosting/img/image-20220322233230399.png" alt="image-20220322233230399"></p><p>字节流是Lab0。TCP的工作是通过不可靠的数据报网络传输两个字节流(每个方向一个)，以便写入连接一侧套接字的字节显示为可在对等端读取的字节，反之亦然。Lab1是<code>StreamReAssemer</code>，在Lab2、3和4中，您将实施<code>TCPReceiver</code>、<code>TCPSender</code>，然后实施 <code>TCPConnection</code> 将它们连接在一起。</p><ol><li><p>在Lab1中，您将实现一个流重组器-该模块将字节流的一小部分(称为子串或段)按正确的顺序缝合回连续的字节流。</p></li><li><p>在Lab2中，您将实现TCP中处理入站字节流的部分：<code>TCPReceiver</code>。这涉及到考虑TCP将如何表示流中每个字节的位置-称为“序列号”。<code>TCPReceiver</code> 负责告诉发送者(A)它已经能够成功组装多少入站字节流(这称为“确认”)和(B)发送者现在被允许发送多少字节(“flow控制”)。(B)<code>TCPReceiver</code> 负责告诉发送者(A)它已经能够成功组装多少入站字节流(这称为“确认”)和(B)允许发送者现在发送多少字节(“flow control”)。</p></li><li><p>在Lab3中，您将实现TCP中处理出站字节流的部分：<code>TCPSender</code>。当发送方怀疑其传输的数据段在途中丢失并且从未到达接收方时，它应该如何反应？它应该在什么时候重试并重新传输丢失的数据段？</p></li><li><p>在Lab4中，您将结合前面的工作和Lab来创建工作的TCP实现：包含<code>TCPSender</code> 和 <code>TCPReceiver</code> 的 <code>TCPConnection</code>。您将使用它与世界各地的真实服务器进行对话。</p></li></ol><p>您的<code>Push Substring</code>方法将忽略会导致 <code>StreamReAssembly</code> 超出其“容量”的字符串的任何部分：内存使用限制，即允许它存储的最大字节数。这可以防止重新组装器使用无限量的内存，无论TCP发送器决定执行什么操作。我们已经在下面的图片中对此进行了说明。“容量”是两者的上限：</p><ol><li><p>重组的<code>ByteStream</code>中的字节数(如下绿色所示)，以及</p></li><li><p>“<code>unassembled</code>”的子字符串可以使用的最大字节数(以红色显示)</p></li></ol><p><img src="https://cdn.jsdelivr.net/gh/Misaka-9982-coder/img_hosting/img/image-20220323012722658.png" alt="image-20220323012722658"></p><ul><li>红色：<code>re-assembler</code> 保存在辅助存储器中的已接收字节</li><li>绿色：<code>re-assembler</code> 保存在字节流中的已接收字节数</li><li>蓝色：已读取的已接收字节数</li></ul><h3 id="说明">说明</h3><ul><li>整个数据流中第一个字节的索引是什么？<ul><li>0。</li></ul></li><li>我的实现应该有多大的效率？<ul><li>我们还不打算指定一个效率的概念，但请不要建立一个严重影响空间或时间的数据结构——这个数据结构将是你的TCP实现的基础。</li></ul></li><li>应该如何处理不一致的子串？<ul><li>你可以假设它们不存在。也就是说，你可以假设有一个唯一的底层字节流，而所有的子串都是它的（精确）片段。</li></ul></li><li>我可以使用什么？<ul><li>你可以使用你认为有用的标准库的任何部分。特别是，我们希望你至少要使用一个数据结构。</li></ul></li><li>字节什么时候应该被写入流中？<ul><li>越快越好。一个字节不应该出现在流中的唯一情况是，在它之前有一个字节还没有被”push”。</li></ul></li><li>子串可能重叠吗？<ul><li>可能。</li></ul></li><li>我是否需要向StreamReassembler添加私有成员？<ul><li>是的。由于段可能以任何顺序到达，你的数据结构将不得不记住子串，直到它们准备好被放入流中，也就是说，直到它们之前的所有索引都已填充。</li></ul></li></ul><h2 id="实现思路">实现思路</h2><h3 id="1-要求">1. 要求</h3><p>在我们所实现的 <code>StreamReassembler</code> 中，有以下几种特性：</p><ul><li>接收子字符串。这些子字符串中包含了一串字节，以及该字符串在<strong>总的数据流</strong>中的<strong>第一个字节的索引</strong>。</li><li>流的每个字节都有自己唯一的索引，从零开始向上计数。</li><li><code>StreamReassembler</code> 中存在一个 ByteStream 用于输出，当 <code>StreamReassembler</code> 知道了流的下一个字节，它就会将其写入至 <code>ByteStream</code> 中。</li></ul><p>需要注意的是，传入的子串中：</p><ul><li><p>子串之间可能相互重复，存在重叠部分</p><blockquote><p>但假设重叠部分数据完全重复。</p><p>不存在某些 index 下的数据在某个子串中是一种数据，在另一个子串里又是另一种数据。</p><p>重叠部分的处理最为麻烦。</p></blockquote></li><li><p>可能会传一些已经被装配了的数据</p></li><li><p>如果 ByteStream 已满，则必须暂停装配，将未装配数据暂时保存起来</p></li></ul><p>除了上面的要求以外，容量 Capacity 需要严格限制：</p><p><img src="https://cdn.jsdelivr.net/gh/Misaka-9982-coder/img_hosting/img/image-20220323012722658.png" alt="image-20220323012722658"></p><p>为了便于说明，将图中的<strong>绿色区域</strong>称为 ByteStream，将图中**存放红色区域的内存范围（即 first unassembled - first unacceptable）**称为 Unassembled_strs。</p><p>CS144 要求将 <strong>ByteStream + Unassembled_strs 的内存占用总和</strong>限制在 <strong>Reassember 中构造函数传入的 capacity 大小</strong>。因此我们在构造 Reassembler 时，需要既将传入的 capacity 参数设置为 <code>ByteStream</code>的缓冲区大小上限，也将其设置为<strong>first unassembled - first unacceptable</strong>的范围大小，以避免极端情况下的内存使用。</p><blockquote><p>注意：<strong>first unassembled - first unacceptable</strong>的范围大小，并不等同于<strong>存放尚未装配子串的结构体内存大小上限</strong>，别混淆了。</p></blockquote><p>Capacity 这个概念很重要，因为它不仅用于限制高内存占用，而且它还会起到流量控制的作用（见 lab2）。</p><h3 id=""></h3><p>本节实验需要安装 <code>pcap</code> 库和 <code>pcap-dev</code> 库才能正常编译</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install libpcap-dev</span><br></pre></td></tr></table></figure><p>在新的 <code>Segment</code> 到来的时候，如果他能和已储存的包 “合并” 的话，我们可以不更改已储存的包，而是把这个新包修剪一下，利用 <code>BufferPlus</code> 修剪前后缀的两个函数去掉它的重复的部分</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StreamBlock</span> &#123;</span></span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">    BufferPlus _buffer&#123;&#125;;</span><br><span class="line">    <span class="keyword">size_t</span> _begin_index;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">StreamBlock</span>(<span class="keyword">const</span> <span class="keyword">int</span> begin, std::string &amp;&amp;str) <span class="keyword">noexcept</span></span><br><span class="line">      : _buffer(std::<span class="built_in">move</span>(str)), _begin_index(begin) &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">StreamBlock</span>(<span class="keyword">const</span> StreamBlock &amp;Other) <span class="keyword">noexcept</span></span><br><span class="line">      : _buffer(Other._buffer), _begin_index(Other._begin_index) &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">StreamBlock</span>(<span class="keyword">const</span> <span class="keyword">int</span> begin, <span class="keyword">const</span> Buffer &amp;data) <span class="keyword">noexcept</span></span><br><span class="line">      : _buffer(data), _begin_index(begin) &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> StreamBlock sb) <span class="keyword">const</span> &#123; <span class="keyword">return</span> <span class="built_in">begin</span>() &lt; sb.<span class="built_in">begin</span>(); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">size_t</span> <span class="title">end</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> _begin_index + _buffer.<span class="built_in">starting_offset</span>() + _buffer.<span class="built_in">size</span>(); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">size_t</span> <span class="title">len</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> _buffer.<span class="built_in">size</span>(); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">size_t</span> <span class="title">begin</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> _begin_index + _buffer.<span class="built_in">starting_offset</span>(); &#125;</span><br><span class="line">    <span class="function">BufferPlus &amp;<span class="title">buffer</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> _buffer; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">const</span> BufferPlus &amp;<span class="title">buffer</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> _buffer; &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>定义一个名为 <code>StreamBlock</code>。</p><p>它包含了一个私有成员 <code>_buffer</code>，类型为 <code>BufferPlus</code>，另一个私有成员 <code>_begin_index</code>，类型为 <code>size_t</code>。类的定义中包含了三个构造函数：</p><ul><li>第一个构造函数接受两个参数：一个整数 <code>begin</code> 和一个右值引用类型的 <code>std::string</code> 对象 <code>str</code>。它使用 <code>std::move</code> 将 <code>str</code> 移动到 <code>_buffer</code> 成员中，并将 <code>_begin_index</code> 初始化为 <code>begin</code>。</li><li>第二个构造函数接受一个参数：另一个 <code>StreamBlock</code> 类型的对象 <code>Other</code>。它将 <code>Other</code> 的 <code>_buffer</code> 和 <code>_begin_index</code> 成员的值分别赋值给当前对象的 <code>_buffer</code> 和 <code>_begin_index</code> 成员。</li><li>第三个构造函数接受两个参数：一个整数 <code>begin</code> 和一个 <code>Buffer</code> 类型的对象 <code>data</code>。它将 <code>data</code> 的值复制到 <code>_buffer</code> 成员中，并将 <code>_begin_index</code> 初始化为 <code>begin</code>。</li></ul><p>该类还包含了四个公共成员函数：</p><ul><li>一个重载了小于号 <code>&lt;</code> 的运算符，用于比较两个 <code>StreamBlock</code> 对象的起始位置，返回值为布尔类型。</li><li>一个返回 <code>StreamBlock</code> 对象的结束位置的函数 <code>end()</code>，返回值为 <code>size_t</code> 类型。</li><li>一个返回 <code>StreamBlock</code> 对象的长度的函数 <code>len()</code>，返回值为 <code>size_t</code> 类型。</li><li>一个返回 <code>StreamBlock</code> 对象的起始位置的函数 <code>begin()</code>，返回值为 <code>size_t</code> 类型。</li></ul><p>最后，类中还有两个 <code>BufferPlus</code> 类型的成员函数 <code>buffer()</code> 和 <code>buffer() const</code>，用于返回 <code>_buffer</code> 成员。前一个是非 const 成员函数，可以修改 <code>_buffer</code> 成员的值，后一个是 const 成员函数，不允许修改 <code>_buffer</code> 成员的值。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//! \brief A class that assembles a series of excerpts from a byte stream (possibly out of order,</span></span><br><span class="line"><span class="comment">//! possibly overlapping) into an in-order byte stream.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StreamReassembler</span> &#123;</span></span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">// Your code here -- add private members as necessary.</span></span><br><span class="line"></span><br><span class="line">    ByteStream _output;  <span class="comment">//!&lt; The reassembled in-order byte stream</span></span><br><span class="line">    <span class="keyword">size_t</span> _capacity;    <span class="comment">//!&lt; The maximum number of bytes</span></span><br><span class="line">    <span class="keyword">size_t</span> _first_uass;  <span class="comment">// index of segment waiting for</span></span><br><span class="line">    <span class="keyword">size_t</span> _unassembled_bytes;</span><br><span class="line">    <span class="keyword">bool</span> _eof;           <span class="comment">// whether _eof_ is effecitve</span></span><br><span class="line">    <span class="keyword">size_t</span> _eof_idx;     <span class="comment">// where the eof is</span></span><br><span class="line">    std::set&lt;StreamBlock&gt; _blocks;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//! Merge the two blocks &quot;blk&quot; and &quot;new_block&quot;</span></span><br><span class="line">    <span class="comment">//! the result will stored in new_block</span></span><br><span class="line">    <span class="comment">//! nothing happens if two blocks can&#x27;t merge</span></span><br><span class="line">    <span class="comment">//! return ture if merge happens, false otherwise</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//! add &quot;to_add&quot; blocks to set blocks</span></span><br><span class="line">    <span class="comment">//! merge all the blocks mergeable</span></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add_block</span><span class="params">(StreamBlock &amp;new_block)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">overlap</span><span class="params">(<span class="keyword">const</span> StreamBlock &amp;blk, <span class="keyword">const</span> StreamBlock &amp;new_blk)</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//! Write the first block to the stream, this block should begin at  &#x27;_first_uass&#x27;</span></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write_to_stream</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//! Check if eof is written to the stream</span></span><br><span class="line">    <span class="comment">//! If true, end the stream</span></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">EOFcheck</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//! \brief Construct a `StreamReassembler` that will store up to `capacity` bytes.</span></span><br><span class="line">    <span class="comment">//! \note This capacity limits both the bytes that have been reassembled,</span></span><br><span class="line">    <span class="comment">//! and those that have not yet been reassembled.</span></span><br><span class="line">    <span class="built_in">StreamReassembler</span>(<span class="keyword">const</span> <span class="keyword">size_t</span> capacity);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//! \brief Receive a substring and write any newly contiguous bytes into the stream.</span></span><br><span class="line">    <span class="comment">//!</span></span><br><span class="line">    <span class="comment">//! The StreamReassembler will stay within the memory limits of the `capacity`.</span></span><br><span class="line">    <span class="comment">//! Bytes that would exceed the capacity are silently discarded.</span></span><br><span class="line">    <span class="comment">//!</span></span><br><span class="line">    <span class="comment">//! \param data the substring</span></span><br><span class="line">    <span class="comment">//! \param index indicates the index (place in sequence) of the first byte in `data`</span></span><br><span class="line">    <span class="comment">//! \param eof the last byte of `data` will be the last byte in the entire stream</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">push_substring</span><span class="params">(<span class="keyword">const</span> std::string &amp;data, <span class="keyword">const</span> <span class="keyword">uint64_t</span> index, <span class="keyword">const</span> <span class="keyword">bool</span> eof)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">push_substring</span><span class="params">(<span class="keyword">const</span> Buffer &amp;data, <span class="keyword">const</span> <span class="keyword">size_t</span> index, <span class="keyword">const</span> <span class="keyword">bool</span> eof)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//! \name Access the reassembled byte stream</span></span><br><span class="line">    <span class="comment">//!@&#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">const</span> ByteStream &amp;<span class="title">stream_out</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> _output; &#125;</span><br><span class="line">    <span class="function">ByteStream &amp;<span class="title">stream_out</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> _output; &#125;</span><br><span class="line">    <span class="comment">//!@&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">uint64_t</span> <span class="title">first_unassembled</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//! The number of bytes in the substrings stored but not yet reassembled</span></span><br><span class="line">    <span class="comment">//!</span></span><br><span class="line">    <span class="comment">//! \note If the byte at a particular index has been pushed more than once, it</span></span><br><span class="line">    <span class="comment">//! should only be counted once for the purpose of this function.</span></span><br><span class="line">    <span class="function"><span class="keyword">size_t</span> <span class="title">unassembled_bytes</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//! \brief Is the internal state empty (other than the output stream)?</span></span><br><span class="line">    <span class="comment">//! \returns `true` if no substrings are waiting to be assembled</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">empty</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>StreamReassembler</code> 的类，用于将一个字节流中的多个子字符串（可能无序、可能重叠）重新组装成有序的字节流。类中包含了一些私有成员和公有成员。</p><p>类的私有成员包括：</p><ul><li><code>ByteStream _output</code>：存储重新组装后的有序字节流。</li><li><code>size_t _capacity</code>：<code>StreamReassembler</code> 可以存储的最大字节数。</li><li><code>size_t _first_uass</code>：未组装的第一个字节在原始字节流中的索引。</li><li><code>size_t _unassembled_bytes</code>：已接收但未组装的字节数。</li><li><code>bool _eof</code>：标记是否已经收到 EOF（文件结束）。</li><li><code>size_t _eof_idx</code>：EOF 在原始字节流中的索引。</li><li><code>std::set&lt;StreamBlock&gt; _blocks</code>：存储已接收但未组装的数据块。</li></ul><p>类的公有成员包括：</p><ul><li><code>StreamReassembler(const size_t capacity)</code>：构造函数，创建一个 <code>StreamReassembler</code> 实例，设置它的最大容量为 <code>capacity</code>。</li><li><code>void push_substring(const std::string &amp;data, const uint64_t index, const bool eof)</code>：将子字符串 <code>data</code> 添加到 <code>StreamReassembler</code> 中，并将任何新接收到的连续字节写入到 <code>_output</code> 中。<code>index</code> 表示 <code>data</code> 中第一个字节在原始字节流中的索引，<code>eof</code> 表示 <code>data</code> 是否包含文件结束符。</li><li><code>const ByteStream &amp;stream_out() const</code> 和 <code>ByteStream &amp;stream_out()</code>：获取 <code>_output</code> 中存储的有序字节流。</li><li><code>uint64_t first_unassembled() const</code>：获取未组装的第一个字节在原始字节流中的索引。</li><li><code>size_t unassembled_bytes() const</code>：获取已接收但未组装的字节数。</li><li><code>bool empty() const</code>：判断 <code>StreamReassembler</code> 是否为空，即判断是否有待组装的子字符串。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//! \details This function check if eof is written to the stream</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">StreamReassembler::EOFcheck</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!_eof) &#123;</span><br><span class="line">        <span class="keyword">return</span>; </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">static_cast</span>&lt;<span class="keyword">size_t</span>&gt;(_eof_idx) == _first_uass) &#123;</span><br><span class="line">        _output.<span class="built_in">end_input</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是 <code>StreamReassembler</code> 类的成员函数，用于检查文件结束标记是否已写入输出流。该函数首先检查 <code>_eof</code> 是否为 <code>true</code> ，这意味着文件结束标记已写入流。如果 <code>_eof</code> 不为 <code>true</code>，函数立即返回，不做任何操作。<br>如果 <code>_eof</code> 为 <code>true</code>，该函数将检查流中文件结束标记的索引 <code>_eof_idx</code> 是否等于 <code>_first_uass</code>。 <code>_first_uass</code> 是流中第一个未使用的字节的索引，这意味着在 <code>_first_uass</code> 之前的所有字节都已被输出流使用。如果 <code>_eof_idx</code> 等于 <code>_first_uass</code>，这意味着流中的所有字节，包括文件结束标记，都已被输出流占用。在这种情况下，函数调用 <code>_output</code> 对象的 <code>end_input()</code> 函数，这表明流中没有更多的输入。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//! \details This function write the first block into the stream,</span></span><br><span class="line"><span class="comment">//! the first block should begin at &#x27;_first_uass&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">StreamReassembler::write_to_stream</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (!_blocks.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="keyword">auto</span> block = *_blocks.<span class="built_in">begin</span>();</span><br><span class="line">        <span class="keyword">if</span> (block.<span class="built_in">begin</span>() != _first_uass) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">size_t</span> bytes_written = _output.<span class="built_in">write</span>(block.<span class="built_in">buffer</span>());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (bytes_written == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        _first_uass += bytes_written;</span><br><span class="line">        _unassembled_bytes -= bytes_written;</span><br><span class="line">        _blocks.<span class="built_in">erase</span>(<span class="built_in">move</span>(_blocks.<span class="built_in">begin</span>()));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// partially written</span></span><br><span class="line">        <span class="keyword">if</span> (bytes_written != block.<span class="built_in">len</span>()) &#123;</span><br><span class="line">            block.<span class="built_in">buffer</span>().<span class="built_in">remove_prefix</span>(<span class="built_in">move</span>(bytes_written));</span><br><span class="line">            _blocks.<span class="built_in">insert</span>(<span class="built_in">move</span>(block));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code> write_to_stream</code>，作用是将数据块写入流中。根据代码中的注释，这个函数写入的是第一个块，即起始位置为 <code>_first_uass</code> 的块。</p><p>这个函数首先进入一个 <code>while</code> 循环，只要数据块队列 <code>_blocks</code> 不为空，就会一直循环。然后，它取出 <code>_blocks</code> 队列中的第一个块，如果这个块的起始位置不等于 <code>_first_uass</code>，说明还没有到该块，就直接返回。</p><p>如果该块的起始位置等于 <code>_first_uass</code>，则将该块写入流中，并记录已写入的字节数，更新 <code>_first_uass</code>，减少 <code>_unassembled_bytes</code> 的值（表示还未组装的字节数），然后将该块从队列中删除。</p><p>如果该块只写入了部分数据，即字节数小于该块的长度，就将该块的缓冲区前缀截去已写入的字节数，并将该块重新插入到队列中。然后，这个函数就继续处理下一个数据块，直到队列为空或者写入的字节数为 0。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//! \details This function add &quot;to_add&quot; blocks to set blocks</span></span><br><span class="line"><span class="comment">// merge all the blocks mergeable</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">StreamReassembler::add_block</span><span class="params">(StreamBlock &amp;new_block)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (new_block.<span class="built_in">len</span>() == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    vector&lt;StreamBlock&gt; blks_to_add;</span><br><span class="line">    blks_to_add.<span class="built_in">emplace_back</span>(<span class="built_in">move</span>(new_block));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!_blocks.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="keyword">auto</span> nblk = blks_to_add.<span class="built_in">begin</span>();</span><br><span class="line">        <span class="keyword">auto</span> iter = _blocks.<span class="built_in">lower_bound</span>(*nblk);</span><br><span class="line">        <span class="keyword">auto</span> prev = iter;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (iter != _blocks.<span class="built_in">end</span>() &amp;&amp; <span class="built_in">overlap</span>(*iter, *nblk)) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((*iter).<span class="built_in">end</span>() &gt;= (*nblk).<span class="built_in">end</span>()) &#123;</span><br><span class="line">                (*nblk).<span class="built_in">buffer</span>().<span class="built_in">remove_suffix</span>((*nblk).<span class="built_in">end</span>() - (*iter).<span class="built_in">begin</span>());</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="function">StreamBlock <span class="title">last</span><span class="params">(*nblk)</span></span>;</span><br><span class="line">            (*nblk).<span class="built_in">buffer</span>().<span class="built_in">remove_suffix</span>((*nblk).<span class="built_in">end</span>() - (*iter).<span class="built_in">begin</span>());</span><br><span class="line">            last.<span class="built_in">buffer</span>().<span class="built_in">remove_prefix</span>((*iter).<span class="built_in">end</span>() - (*nblk).<span class="built_in">begin</span>());</span><br><span class="line">            blks_to_add.<span class="built_in">push_back</span>(<span class="built_in">move</span>(last));</span><br><span class="line">            nblk = blks_to_add.<span class="built_in">end</span>();</span><br><span class="line">            nblk -- ;</span><br><span class="line">            iter ++ ;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// compare with prevs</span></span><br><span class="line">        <span class="comment">// check one previous block is enough</span></span><br><span class="line">        <span class="keyword">if</span> (prev != _blocks.<span class="built_in">begin</span>()) &#123;</span><br><span class="line">            prev -- ;</span><br><span class="line">            nblk = blks_to_add.<span class="built_in">begin</span>();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">overlap</span>(*nblk, *prev)) &#123;</span><br><span class="line">                (*nblk).<span class="built_in">buffer</span>().<span class="built_in">remove_prefix</span>((*prev).<span class="built_in">end</span>() - (*nblk).<span class="built_in">begin</span>());</span><br><span class="line">            &#125;   </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;blk : blks_to_add) &#123;</span><br><span class="line">        <span class="keyword">if</span> (blk.<span class="built_in">len</span>() != <span class="number">0</span>) &#123;</span><br><span class="line">            _blocks.<span class="built_in">emplace</span>(<span class="built_in">move</span>(blk));</span><br><span class="line">            _unassembled_bytes += blk.<span class="built_in">len</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码是 <code>StreamReassembler</code> 类中的 <code>add_block</code> 函数，用于向一个缓存区 <code>_blocks</code> 中添加新的数据块。这些数据块需要和缓存区中的已有数据块合并，如果新数据块和已有数据块可以合并成一个连续的数据块，则合并它们。如果新数据块和已有数据块不能合并，就将新数据块插入到缓存区 <code>_blocks</code> 中。</p><p>具体实现过程如下：</p><ul><li>如果新数据块的长度为 0，直接返回。</li><li>如果缓存区 <code>_blocks</code> 不为空，则从头开始遍历它，如果有数据块和新数据块可以合并，就将它们合并成一个数据块。如果遍历到一个数据块和新数据块不能合并，就停止遍历。</li><li>如果新数据块可以和一个已有数据块合并，就将新数据块和该数据块合并。</li><li>如果新数据块和已有数据块不能合并，就插入新数据块到缓存区 <code>_blocks</code> 中。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//! \details This function check if the two blocks have overlap part</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">StreamReassembler::overlap</span><span class="params">(<span class="keyword">const</span> StreamBlock &amp;blk, <span class="keyword">const</span> StreamBlock &amp;new_blk)</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (blk.<span class="built_in">begin</span>() &lt; new_blk.<span class="built_in">begin</span>()) &#123;</span><br><span class="line">        <span class="keyword">return</span> new_blk.<span class="built_in">begin</span>() &lt; blk.<span class="built_in">end</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> blk.<span class="built_in">begin</span>() &lt; new_blk.<span class="built_in">end</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个函数用于判断两个数据块 <code>（StreamBlock）</code>是否有重叠的部分。重叠的部分指的是两个数据块在数据流中存在相同的字节范围。函数接收两个参数，<code>blk</code> 和 <code>new_blk</code>，分别代表已有的数据块和待添加的新数据块。如果这两个数据块有重叠的部分，则返回 <code>true</code>，否则返回 <code>false</code>。</p><p>具体实现中，首先比较 <code>blk</code> 的起始位置和 <code>new_blk</code> 的起始位置，如果 <code>blk</code> 的起始位置在 <code>new_blk</code> 的起始位置之前，那么只需比较 <code>new_blk</code> 的起始位置是否在 <code>blk</code> 的结束位置之前；否则，只需比较 <code>blk</code> 的起始位置是否在 <code>new_blk</code> 的结束位置之前。如果满足这两个条件之一，则说明这两个数据块存在重叠部分，返回 <code>true</code>；否则返回 <code>false</code>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//! \details This function accepts a substring (aka a segment) of bytes,</span></span><br><span class="line"><span class="comment">//! possibly out-of-order, from the logical stream, and assembles any newly</span></span><br><span class="line"><span class="comment">//! contiguous substrings and writes them into the output stream in order.</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">StreamReassembler::push_substring</span><span class="params">(<span class="keyword">const</span> string &amp;data, <span class="keyword">const</span> <span class="keyword">size_t</span> index, <span class="keyword">const</span> <span class="keyword">bool</span> eof)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// the data that have been reassembled</span></span><br><span class="line">    <span class="keyword">if</span> (index + data.<span class="built_in">size</span>() &lt; _first_uass) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (eof &amp;&amp; !_eof) &#123;</span><br><span class="line">        _eof = <span class="literal">true</span>;</span><br><span class="line">        _eof_idx = index + data.<span class="built_in">size</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">StreamBlock <span class="title">blk</span><span class="params">(index, move(string(data)))</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// if a part of the data have been reassembled</span></span><br><span class="line">    <span class="keyword">if</span> (index &lt; _first_uass) &#123;</span><br><span class="line">        blk.<span class="built_in">buffer</span>().<span class="built_in">remove_prefix</span>(_first_uass - index);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// if a part of the data out of the capacity</span></span><br><span class="line">    <span class="keyword">if</span> (index + data.<span class="built_in">size</span>() &gt; _capacity + _first_uass) &#123;</span><br><span class="line">        blk.<span class="built_in">buffer</span>().<span class="built_in">remove_suffix</span>(index + data.<span class="built_in">size</span>() - _capacity - _first_uass);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">add_block</span>(blk);</span><br><span class="line">    <span class="built_in">write_to_stream</span>();</span><br><span class="line">    <span class="built_in">EOFcheck</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码是一个函数，用于处理来自逻辑流的子字符串（即段）数据，该数据可能是乱序的，然后组装任何新的连续的子字符串并按顺序将其写入输出流。该函数的实现分为三个步骤：</p><ol><li>首先检查输入的数据是否已经在已组装的数据范围内，如果已经在范围内，则直接返回，不做处理。</li><li>如果输入数据已经包含 <code>EOF</code> 标记，将标记设置为 <code>true</code>，记录标记的位置，以便后续处理。</li><li>根据输入数据的索引和内容创建一个 <code>StreamBlock</code> 对象。如果输入数据的索引小于已组装数据的范围，将数据前面的部分丢弃；如果输入数据的索引加上数据长度超出了容量，将数据后面的部分丢弃。然后将新的 <code>StreamBlock</code> 添加到已有的 <code>StreamBlock</code> 集合中，并检查是否有连续的 <code>StreamBlock</code>，将它们合并成一个更大的 <code>StreamBlock</code>。接着将可写入的数据写入到输出流中，并检查是否已经写入了 <code>EOF</code> 标记。</li></ol><p>总之，这个函数的作用是将输入数据组装成完整的数据块，然后将这些数据块按顺序写入到输出流中，同时处理 <code>EOF</code> 标记。</p><h2 id="完整代码-6">完整代码</h2><ul><li><a href="https://github.com/Misaka-9982-coder/CS144-fa21/blob/optimize/libsponge/stream_reassembler.hh">stream_reassembler.hh</a></li><li><a href="https://github.com/Misaka-9982-coder/CS144-fa21/blob/optimize/libsponge/stream_reassembler.cc">stream_reassembler.cc</a></li></ul><p>“stream_reassembler.hh”</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> SPONGE_LIBSPONGE_STREAM_REASSEMBLER_HH</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SPONGE_LIBSPONGE_STREAM_REASSEMBLER_HH</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;byte_stream.hh&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;buffer.hh&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdint&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StreamBlock</span> &#123;</span></span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">    BufferPlus _buffer&#123;&#125;;</span><br><span class="line">    <span class="keyword">size_t</span> _begin_index;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">StreamBlock</span>(<span class="keyword">const</span> <span class="keyword">int</span> begin, std::string &amp;&amp;str) <span class="keyword">noexcept</span></span><br><span class="line">      : _buffer(std::<span class="built_in">move</span>(str)), _begin_index(begin) &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">StreamBlock</span>(<span class="keyword">const</span> StreamBlock &amp;Other) <span class="keyword">noexcept</span></span><br><span class="line">      : _buffer(Other._buffer), _begin_index(Other._begin_index) &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">StreamBlock</span>(<span class="keyword">const</span> <span class="keyword">int</span> begin, <span class="keyword">const</span> Buffer &amp;data) <span class="keyword">noexcept</span></span><br><span class="line">      : _buffer(data), _begin_index(begin) &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> StreamBlock sb) <span class="keyword">const</span> &#123; <span class="keyword">return</span> <span class="built_in">begin</span>() &lt; sb.<span class="built_in">begin</span>(); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">size_t</span> <span class="title">end</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> _begin_index + _buffer.<span class="built_in">starting_offset</span>() + _buffer.<span class="built_in">size</span>(); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">size_t</span> <span class="title">len</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> _buffer.<span class="built_in">size</span>(); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">size_t</span> <span class="title">begin</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> _begin_index + _buffer.<span class="built_in">starting_offset</span>(); &#125;</span><br><span class="line">    <span class="function">BufferPlus &amp;<span class="title">buffer</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> _buffer; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">const</span> BufferPlus &amp;<span class="title">buffer</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> _buffer; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//! \brief A class that assembles a series of excerpts from a byte stream (possibly out of order,</span></span><br><span class="line"><span class="comment">//! possibly overlapping) into an in-order byte stream.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StreamReassembler</span> &#123;</span></span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">// Your code here -- add private members as necessary.</span></span><br><span class="line"></span><br><span class="line">    ByteStream _output;  <span class="comment">//!&lt; The reassembled in-order byte stream</span></span><br><span class="line">    <span class="keyword">size_t</span> _capacity;    <span class="comment">//!&lt; The maximum number of bytes</span></span><br><span class="line">    <span class="keyword">size_t</span> _first_uass;  <span class="comment">// index of segment waiting for</span></span><br><span class="line">    <span class="keyword">size_t</span> _unassembled_bytes;</span><br><span class="line">    <span class="keyword">bool</span> _eof;           <span class="comment">// whether _eof_ is effecitve</span></span><br><span class="line">    <span class="keyword">size_t</span> _eof_idx;     <span class="comment">// where the eof is</span></span><br><span class="line">    std::set&lt;StreamBlock&gt; _blocks;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//! Merge the two blocks &quot;blk&quot; and &quot;new_block&quot;</span></span><br><span class="line">    <span class="comment">//! the result will stored in new_block</span></span><br><span class="line">    <span class="comment">//! nothing happens if two blocks can&#x27;t merge</span></span><br><span class="line">    <span class="comment">//! return ture if merge happens, false otherwise</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//! add &quot;to_add&quot; blocks to set blocks</span></span><br><span class="line">    <span class="comment">//! merge all the blocks mergeable</span></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add_block</span><span class="params">(StreamBlock &amp;new_block)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">overlap</span><span class="params">(<span class="keyword">const</span> StreamBlock &amp;blk, <span class="keyword">const</span> StreamBlock &amp;new_blk)</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//! Write the first block to the stream, this block should begin at  &#x27;_first_uass&#x27;</span></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write_to_stream</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//! Check if eof is written to the stream</span></span><br><span class="line">    <span class="comment">//! If true, end the stream</span></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">EOFcheck</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//! \brief Construct a `StreamReassembler` that will store up to `capacity` bytes.</span></span><br><span class="line">    <span class="comment">//! \note This capacity limits both the bytes that have been reassembled,</span></span><br><span class="line">    <span class="comment">//! and those that have not yet been reassembled.</span></span><br><span class="line">    <span class="built_in">StreamReassembler</span>(<span class="keyword">const</span> <span class="keyword">size_t</span> capacity);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//! \brief Receive a substring and write any newly contiguous bytes into the stream.</span></span><br><span class="line">    <span class="comment">//!</span></span><br><span class="line">    <span class="comment">//! The StreamReassembler will stay within the memory limits of the `capacity`.</span></span><br><span class="line">    <span class="comment">//! Bytes that would exceed the capacity are silently discarded.</span></span><br><span class="line">    <span class="comment">//!</span></span><br><span class="line">    <span class="comment">//! \param data the substring</span></span><br><span class="line">    <span class="comment">//! \param index indicates the index (place in sequence) of the first byte in `data`</span></span><br><span class="line">    <span class="comment">//! \param eof the last byte of `data` will be the last byte in the entire stream</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">push_substring</span><span class="params">(<span class="keyword">const</span> std::string &amp;data, <span class="keyword">const</span> <span class="keyword">uint64_t</span> index, <span class="keyword">const</span> <span class="keyword">bool</span> eof)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">push_substring</span><span class="params">(<span class="keyword">const</span> Buffer &amp;data, <span class="keyword">const</span> <span class="keyword">size_t</span> index, <span class="keyword">const</span> <span class="keyword">bool</span> eof)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//! \name Access the reassembled byte stream</span></span><br><span class="line">    <span class="comment">//!@&#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">const</span> ByteStream &amp;<span class="title">stream_out</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> _output; &#125;</span><br><span class="line">    <span class="function">ByteStream &amp;<span class="title">stream_out</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> _output; &#125;</span><br><span class="line">    <span class="comment">//!@&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">uint64_t</span> <span class="title">first_unassembled</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//! The number of bytes in the substrings stored but not yet reassembled</span></span><br><span class="line">    <span class="comment">//!</span></span><br><span class="line">    <span class="comment">//! \note If the byte at a particular index has been pushed more than once, it</span></span><br><span class="line">    <span class="comment">//! should only be counted once for the purpose of this function.</span></span><br><span class="line">    <span class="function"><span class="keyword">size_t</span> <span class="title">unassembled_bytes</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//! \brief Is the internal state empty (other than the output stream)?</span></span><br><span class="line">    <span class="comment">//! \returns `true` if no substrings are waiting to be assembled</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">empty</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span>  <span class="comment">// SPONGE_LIBSPONGE_STREAM_REASSEMBLER_HH</span></span></span><br></pre></td></tr></table></figure><p>“stream_reassembler.cc”</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;stream_reassembler.hh&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Dummy implementation of a stream reassembler.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// For Lab 1, please replace with a real implementation that passes the</span></span><br><span class="line"><span class="comment">// automated checks run by `make check_lab1`.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// You will need to add private members to the class declaration in `stream_reassembler.hh`</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span>... Targs&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DUMMY_CODE</span><span class="params">(Targs &amp;&amp;... <span class="comment">/* unused */</span>)</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">StreamReassembler::<span class="built_in">StreamReassembler</span>(<span class="keyword">const</span> <span class="keyword">size_t</span> capacity)</span><br><span class="line">    : _output(capacity)</span><br><span class="line">    , _capacity(capacity)</span><br><span class="line">    , _first_uass(<span class="number">0</span>)</span><br><span class="line">    , _unassembled_bytes(<span class="number">0</span>)</span><br><span class="line">    , _eof(<span class="literal">false</span>)</span><br><span class="line">    , _eof_idx(<span class="number">0</span>)</span><br><span class="line">    , _blocks() &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//! \details This function accepts a substring (aka a segment) of bytes,</span></span><br><span class="line"><span class="comment">//! possibly out-of-order, from the logical stream, and assembles any newly</span></span><br><span class="line"><span class="comment">//! contiguous substrings and writes them into the output stream in order.</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">StreamReassembler::push_substring</span><span class="params">(<span class="keyword">const</span> string &amp;data, <span class="keyword">const</span> <span class="keyword">size_t</span> index, <span class="keyword">const</span> <span class="keyword">bool</span> eof)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// the data that have been reassembled</span></span><br><span class="line">    <span class="keyword">if</span> (index + data.<span class="built_in">size</span>() &lt; _first_uass) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (eof &amp;&amp; !_eof) &#123;</span><br><span class="line">        _eof = <span class="literal">true</span>;</span><br><span class="line">        _eof_idx = index + data.<span class="built_in">size</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">StreamBlock <span class="title">blk</span><span class="params">(index, move(string(data)))</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// if a part of the data have been reassembled</span></span><br><span class="line">    <span class="keyword">if</span> (index &lt; _first_uass) &#123;</span><br><span class="line">        blk.<span class="built_in">buffer</span>().<span class="built_in">remove_prefix</span>(_first_uass - index);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// if a part of the data out of the capacity</span></span><br><span class="line">    <span class="keyword">if</span> (index + data.<span class="built_in">size</span>() &gt; _capacity + _first_uass) &#123;</span><br><span class="line">        blk.<span class="built_in">buffer</span>().<span class="built_in">remove_suffix</span>(index + data.<span class="built_in">size</span>() - _capacity - _first_uass);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">add_block</span>(blk);</span><br><span class="line">    <span class="built_in">write_to_stream</span>();</span><br><span class="line">    <span class="built_in">EOFcheck</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">StreamReassembler::push_substring</span><span class="params">(<span class="keyword">const</span> Buffer &amp;data, <span class="keyword">const</span> <span class="keyword">size_t</span> index, <span class="keyword">const</span> <span class="keyword">bool</span> eof)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// the data that have been reassembled</span></span><br><span class="line">    <span class="keyword">if</span> (index + data.<span class="built_in">size</span>() &lt; _first_uass) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (eof &amp;&amp; !_eof) &#123;</span><br><span class="line">        _eof = <span class="literal">true</span>;</span><br><span class="line">        _eof_idx = index + data.<span class="built_in">size</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">StreamBlock <span class="title">blk</span><span class="params">(index, move(data))</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// if a part of the data have been reassembled</span></span><br><span class="line">    <span class="keyword">if</span> (index &lt; _first_uass) &#123;</span><br><span class="line">        blk.<span class="built_in">buffer</span>().<span class="built_in">remove_prefix</span>(_first_uass - index);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// if a part of the data out of the capacity</span></span><br><span class="line">    <span class="keyword">if</span> (index + data.<span class="built_in">size</span>() &gt; _capacity + _first_uass) &#123;</span><br><span class="line">        blk.<span class="built_in">buffer</span>().<span class="built_in">remove_suffix</span>(index + data.<span class="built_in">size</span>() - _capacity - _first_uass);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">add_block</span>(blk);</span><br><span class="line">    <span class="built_in">write_to_stream</span>();</span><br><span class="line">    <span class="built_in">EOFcheck</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//! \details This function check if eof is written to the stream</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">StreamReassembler::EOFcheck</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!_eof) &#123;</span><br><span class="line">        <span class="keyword">return</span>; </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">static_cast</span>&lt;<span class="keyword">size_t</span>&gt;(_eof_idx) == _first_uass) &#123;</span><br><span class="line">        _output.<span class="built_in">end_input</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//! \details This function write the first block into the stream,</span></span><br><span class="line"><span class="comment">//! the first block should begin at &#x27;_first_uass&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">StreamReassembler::write_to_stream</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (!_blocks.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="keyword">auto</span> block = *_blocks.<span class="built_in">begin</span>();</span><br><span class="line">        <span class="keyword">if</span> (block.<span class="built_in">begin</span>() != _first_uass) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">size_t</span> bytes_written = _output.<span class="built_in">write</span>(block.<span class="built_in">buffer</span>());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (bytes_written == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        _first_uass += bytes_written;</span><br><span class="line">        _unassembled_bytes -= bytes_written;</span><br><span class="line">        _blocks.<span class="built_in">erase</span>(<span class="built_in">move</span>(_blocks.<span class="built_in">begin</span>()));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// partially written</span></span><br><span class="line">        <span class="keyword">if</span> (bytes_written != block.<span class="built_in">len</span>()) &#123;</span><br><span class="line">            block.<span class="built_in">buffer</span>().<span class="built_in">remove_prefix</span>(<span class="built_in">move</span>(bytes_written));</span><br><span class="line">            _blocks.<span class="built_in">insert</span>(<span class="built_in">move</span>(block));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//! \details This function add &quot;to_add&quot; blocks to set blocks</span></span><br><span class="line"><span class="comment">// merge all the blocks mergeable</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">StreamReassembler::add_block</span><span class="params">(StreamBlock &amp;new_block)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (new_block.<span class="built_in">len</span>() == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    vector&lt;StreamBlock&gt; blks_to_add;</span><br><span class="line">    blks_to_add.<span class="built_in">emplace_back</span>(<span class="built_in">move</span>(new_block));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!_blocks.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="keyword">auto</span> nblk = blks_to_add.<span class="built_in">begin</span>();</span><br><span class="line">        <span class="keyword">auto</span> iter = _blocks.<span class="built_in">lower_bound</span>(*nblk);</span><br><span class="line">        <span class="keyword">auto</span> prev = iter;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (iter != _blocks.<span class="built_in">end</span>() &amp;&amp; <span class="built_in">overlap</span>(*iter, *nblk)) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((*iter).<span class="built_in">end</span>() &gt;= (*nblk).<span class="built_in">end</span>()) &#123;</span><br><span class="line">                (*nblk).<span class="built_in">buffer</span>().<span class="built_in">remove_suffix</span>((*nblk).<span class="built_in">end</span>() - (*iter).<span class="built_in">begin</span>());</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="function">StreamBlock <span class="title">last</span><span class="params">(*nblk)</span></span>;</span><br><span class="line">            (*nblk).<span class="built_in">buffer</span>().<span class="built_in">remove_suffix</span>((*nblk).<span class="built_in">end</span>() - (*iter).<span class="built_in">begin</span>());</span><br><span class="line">            last.<span class="built_in">buffer</span>().<span class="built_in">remove_prefix</span>((*iter).<span class="built_in">end</span>() - (*nblk).<span class="built_in">begin</span>());</span><br><span class="line">            blks_to_add.<span class="built_in">push_back</span>(<span class="built_in">move</span>(last));</span><br><span class="line">            nblk = blks_to_add.<span class="built_in">end</span>();</span><br><span class="line">            nblk -- ;</span><br><span class="line">            iter ++ ;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// compare with prevs</span></span><br><span class="line">        <span class="comment">// check one previous block is enough</span></span><br><span class="line">        <span class="keyword">if</span> (prev != _blocks.<span class="built_in">begin</span>()) &#123;</span><br><span class="line">            prev -- ;</span><br><span class="line">            nblk = blks_to_add.<span class="built_in">begin</span>();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">overlap</span>(*nblk, *prev)) &#123;</span><br><span class="line">                (*nblk).<span class="built_in">buffer</span>().<span class="built_in">remove_prefix</span>((*prev).<span class="built_in">end</span>() - (*nblk).<span class="built_in">begin</span>());</span><br><span class="line">            &#125;   </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;blk : blks_to_add) &#123;</span><br><span class="line">        <span class="keyword">if</span> (blk.<span class="built_in">len</span>() != <span class="number">0</span>) &#123;</span><br><span class="line">            _blocks.<span class="built_in">emplace</span>(<span class="built_in">move</span>(blk));</span><br><span class="line">            _unassembled_bytes += blk.<span class="built_in">len</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//! \details This function check if the two blocks have overlap part</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">StreamReassembler::overlap</span><span class="params">(<span class="keyword">const</span> StreamBlock &amp;blk, <span class="keyword">const</span> StreamBlock &amp;new_blk)</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (blk.<span class="built_in">begin</span>() &lt; new_blk.<span class="built_in">begin</span>()) &#123;</span><br><span class="line">        <span class="keyword">return</span> new_blk.<span class="built_in">begin</span>() &lt; blk.<span class="built_in">end</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> blk.<span class="built_in">begin</span>() &lt; new_blk.<span class="built_in">end</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">uint64_t</span> <span class="title">StreamReassembler::first_unassembled</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> _first_uass; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">size_t</span> <span class="title">StreamReassembler::unassembled_bytes</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> _unassembled_bytes; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">StreamReassembler::empty</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> _unassembled_bytes == <span class="number">0</span>; &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="CS144" scheme="http://www.misaka-9982.com/tags/CS144/"/>
    
    <category term="Network" scheme="http://www.misaka-9982.com/tags/Network/"/>
    
  </entry>
  
  <entry>
    <title>CS144-Lab0</title>
    <link href="http://www.misaka-9982.com/2023/02/18/CS144-Lab0/"/>
    <id>http://www.misaka-9982.com/2023/02/18/CS144-Lab0/</id>
    <published>2023-02-18T13:14:27.000Z</published>
    <updated>2023-02-22T13:07:14.708Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1>2 Networking by hand</h1><h2 id="2-1-Fetch-a-Web-page">2.1 Fetch a Web page</h2><h3 id="2-1-1">2.1.1</h3><p>访问<a href="http://cs144.keithw.org/hello">http://cs144.keithw.org/hello</a>，并观察结果<br><img src="https://img-blog.csdnimg.cn/391131c908c6419ba1d71484a99d2b48.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATUlOR2dvUw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt=""></p><h3 id="2-1-2">2.1.2</h3><p>在命令行中输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">telnet cs144.keithw.org http</span><br><span class="line">Trying 104.196.238.229...</span><br><span class="line">Connected to cs144.keithw.org.</span><br><span class="line">Escape character is <span class="string">&#x27;^]&#x27;</span>.</span><br></pre></td></tr></table></figure><p>可以先在一个文件中输入以下字段复制粘贴进命令行，防止输入速度过慢导致断连</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">GET</span> <span class="string">/hello</span> <span class="string">HTTP/1.1</span></span><br><span class="line"><span class="attr">Host:</span> <span class="string">cs144.keithw.org</span></span><br><span class="line"><span class="attr">Connection:</span> <span class="string">close</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输入完的响应如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Date: Mon, 17 Jan 2022 06:35:25 GMT</span><br><span class="line">Server: Apache</span><br><span class="line">Last-Modified: Thu, 13 Dec 2018 15:45:29 GMT</span><br><span class="line">ETag: <span class="string">&quot;e-57ce93446cb64&quot;</span></span><br><span class="line">Accept-Ranges: bytes</span><br><span class="line">Content-Length: 14</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: text/plain</span><br><span class="line"></span><br><span class="line">Hello, CS144!</span><br><span class="line">Connection closed by foreign host.</span><br></pre></td></tr></table></figure><h3 id="2-1-3-Assignment">2.1.3 Assignment:</h3><p>在命令行中输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">telnet cs144.keithw.org http</span><br></pre></td></tr></table></figure><p>出现</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Trying 104.196.238.229...</span><br><span class="line">Connected to cs144.keithw.org.</span><br><span class="line">Escape character is <span class="string">&#x27;^]&#x27;</span>.</span><br></pre></td></tr></table></figure><p>接着输入</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">GET</span> <span class="string">/lab0/misaka</span> <span class="string">HTTP/1.1</span></span><br><span class="line"><span class="attr">Host:</span> <span class="string">cs144.keithw.org</span></span><br><span class="line"><span class="attr">Connection:</span> <span class="string">close</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>得到如下响应</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Date: Mon, 17 Jan 2022 06:46:16 GMT</span><br><span class="line">Server: Apache</span><br><span class="line">X-You-Said-Your-SunetID-Was: misaka</span><br><span class="line">X-Your-Code-Is: 712264</span><br><span class="line">Content-length: 110</span><br><span class="line">Vary: Accept-Encoding</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: text/plain</span><br><span class="line"></span><br><span class="line">Hello! You told us that your SUNet ID was <span class="string">&quot;misaka&quot;</span>. Please see the HTTP headers (above) <span class="keyword">for</span> your secret code.</span><br><span class="line">Connection closed by foreign host.</span><br></pre></td></tr></table></figure><h2 id="2-2-Send-yourself-an-email">2.2 Send yourself an email</h2><p>由于没有sunetid,采用163邮箱进行代替</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">telnet smtp.163.com smtp</span><br><span class="line">Trying 220.181.12.11...</span><br><span class="line">Connected to smtp.163.com.</span><br><span class="line">Escape character is <span class="string">&#x27;^]&#x27;</span>.</span><br><span class="line">220 163.com Anti-spam GT <span class="keyword">for</span> Coremail System (163com[xxxx])</span><br></pre></td></tr></table></figure><p>和163邮箱打个招呼</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">helo 163.com</span><br></pre></td></tr></table></figure><p>返回<code>250 OK</code><br>邮箱账户登陆</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">auth login</span><br><span class="line">334 dXNlcm5hbWU6</span><br><span class="line">[输入163邮箱的base64编码格式]</span><br><span class="line">334 UGFzc3dvcmQ6</span><br><span class="line">[输入base64编码格式的邮箱密码]</span><br><span class="line">235 Authentication successful</span><br><span class="line">MAIL FROM: &lt;xxxxx@163.com&gt; //表示发件人为 xxxxx@163.com</span><br><span class="line">250 Mail OK</span><br><span class="line">RCPT TO: &lt;xxxxx@qq.com&gt;//表示收件人为 xxxxx@qq.com</span><br><span class="line">250 Mail OK</span><br><span class="line">DATA//准备好发送数据了</span><br><span class="line">354 End data with &lt;CR&gt;&lt;LF&gt;.&lt;CR&gt;&lt;LF&gt;</span><br><span class="line">[邮件内容]</span><br><span class="line">.</span><br><span class="line">250 Mail OK queued as smtp14,EsCowAAX5WUxFuVhrJCNAg--.xxxxxx xxxxxxxxxx</span><br><span class="line">QUIT</span><br><span class="line">221 Bye</span><br><span class="line">Connection closed by foreign host.</span><br></pre></td></tr></table></figure><p>在收件邮箱中可以发现收到的邮件</p><h2 id="2-3-Listening-and-connecting">2.3 Listening and connecting</h2><p>在命令行中输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netcat -v -l -p 9090</span><br></pre></td></tr></table></figure><p>出现如下问题</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netcat: getnameinfo: Temporary failure <span class="keyword">in</span> name resolution</span><br></pre></td></tr></table></figure><p>解决方法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/resolv.conf</span><br></pre></td></tr></table></figure><p>添加以下内容并保存</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">namespace 8.8.8.8</span><br></pre></td></tr></table></figure><p>在一个窗口输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netcat -v -l -p 9090</span><br></pre></td></tr></table></figure><p>新的窗口输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">telnet localhost 9090</span><br></pre></td></tr></table></figure><p>即可实现<code>netcat</code>窗口对<code>telnet</code>窗口的监听，关闭<code>telnet</code>窗口就可以关闭这个监听程序<br><img src="https://img-blog.csdnimg.cn/8cabb2454d964f648194eae091268e53.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATUlOR2dvUw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt=""></p><h1>3 Writing a network program using an OS stream socket</h1><h2 id="3-1-Let’s-get-started—fetching-and-building-the-starter-code">3.1 Let’s get started—fetching and building the starter code</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/cs144/sponge</span><br><span class="line">git checkout -b master origin/master</span><br><span class="line">mkdir build &amp;&amp; <span class="built_in">cd</span> build</span><br><span class="line">cmake ..</span><br><span class="line">make format</span><br><span class="line">make -j4 &amp;&amp; make check_lab0</span><br></pre></td></tr></table></figure><h2 id="3-2">3.2</h2><p>代码规范</p><h2 id="3-3-Reading-the-Sponge-documentation">3.3 Reading the Sponge documentation</h2><ol><li>初学者代码的文档:<a href="https://cs144.github.io/doc/lab0/">https://cs144.github.io/doc/lab0/</a></li><li>Socket是FileDescriptor的一种类型，而TCPSocket是一种Socket<br>FileDescriptor：<a href="https://cs144.github.io/doc/lab0/class_file_descriptor.html">https://cs144.github.io/doc/lab0/class_file_descriptor.html</a><br>Socket ：<a href="https://cs144.github.io/doc/lab0/class_socket.html">https://cs144.github.io/doc/lab0/class_socket.html</a><br>TCPSocket：<a href="https://cs144.github.io/doc/lab0/class_t_c_p_socket.html">https://cs144.github.io/doc/lab0/class_t_c_p_socket.html</a><br>Address：<a href="https://cs144.github.io/doc/lab0/class_address.html">https://cs144.github.io/doc/lab0/class_address.html</a></li><li>观察<code>libsponge/util</code> 目录下的 <code>file descriptor.hh</code>,<code> socket.hh</code>,  <code>address.hh</code>三个头文件是怎么定义接口的</li></ol><p><code>file descriptor.hh</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//! Write a string, possibly blocking until all is written</span></span><br><span class="line"><span class="function"><span class="keyword">size_t</span> <span class="title">write</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *str, <span class="keyword">const</span> <span class="keyword">bool</span> write_all = <span class="literal">true</span>)</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">write</span>(<span class="built_in">BufferViewList</span>(str), write_all); &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//! Write a string, possibly blocking until all is written</span></span><br><span class="line"><span class="function"><span class="keyword">size_t</span> <span class="title">write</span><span class="params">(<span class="keyword">const</span> std::string &amp;str, <span class="keyword">const</span> <span class="keyword">bool</span> write_all = <span class="literal">true</span>)</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">write</span>(<span class="built_in">BufferViewList</span>(str), write_all); &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//! Write a buffer (or list of buffers), possibly blocking until all is written</span></span><br><span class="line"><span class="function"><span class="keyword">size_t</span> <span class="title">write</span><span class="params">(BufferViewList buffer, <span class="keyword">const</span> <span class="keyword">bool</span> write_all = <span class="literal">true</span>)</span></span>;</span><br></pre></td></tr></table></figure><p><code> socket.hh</code>:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//! Connect a socket to a specified peer address with [connect(2)](\ref man2::connect)</span></span><br><span class="line"><span class="comment">//使用[CONNECT(2)](\ref Man2：：Connect)将socket连接到指定的对等地址</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">connect</span><span class="params">(<span class="keyword">const</span> Address &amp;address)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//! Shut down a socket via [shutdown(2)](\ref man2::shutdown)</span></span><br><span class="line"><span class="comment">//通过[Shutdown(2)](\ref Man2：：Shutdown)关闭socket</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">shutdown</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> how)</span></span>;</span><br></pre></td></tr></table></figure><p><code>address</code>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//! Construct by resolving a hostname and servicename.</span></span><br><span class="line"><span class="comment">// 通过 主机名 如 “cs144.keithw.org” 和 服务名 如 “http” 进行构造</span></span><br><span class="line"><span class="built_in">Address</span>(<span class="keyword">const</span> std::string &amp;hostname, <span class="keyword">const</span> std::string&amp;service);</span><br><span class="line"></span><br><span class="line"><span class="comment">//! Construct from dotted-quad string (&quot;18.243.0.1&quot;) and numeric port.</span></span><br><span class="line"><span class="comment">// 通过 ip地址 和 端口号 进行构造</span></span><br><span class="line"><span class="built_in">Address</span>(<span class="keyword">const</span> std::string &amp;ip, <span class="keyword">const</span> std::<span class="keyword">uint16_t</span> port = <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//! Construct from a [sockaddr *](@ref man7::socket).</span></span><br><span class="line"><span class="comment">// 通过 原始socket地址 和 地址长度 进行构造</span></span><br><span class="line"><span class="built_in">Address</span>(<span class="keyword">const</span> sockaddr *addr, <span class="keyword">const</span> std::<span class="keyword">size_t</span> size);</span><br></pre></td></tr></table></figure><h2 id="3-4-Writing-webget">3.4 Writing webget</h2><p>It’s time to implement webget, a program to fetch Web pages over the Internet using the<br>operating system’s TCP support and stream-socket abstraction—just like you did by hand<br>earlier in this lab.<br>webget是一个使用操作系统的TCP支持和流套接字抽象在Internet上获取网页的程序，就像您在本实验室前面手动完成的一样。</p><ol start="3"><li>使用HTTP格式实现此文件中描述的简单Web客户端，您之前使用的(Web)请求。使用TCPSocket和Address类。</li><li>提示：<ol><li>在HTTP中，每行必须以“\r\n”结尾(仅使用“\n”或endl是不够的)。</li><li>在客户请求中包含“Connection：Close”行。</li><li>确保读取并打印来自服务器的所有输出，直到socket到达“EOF”(文件结尾)-单个读取调用是不够的。</li><li>十行左右的代码</li></ol></li></ol><p>代码位置：<br><code>/cs144/sponge/apps/webget.cc</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_URL</span><span class="params">(<span class="keyword">const</span> string &amp;host, <span class="keyword">const</span> string &amp;path)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Your code here.</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// You will need to connect to the &quot;http&quot; service on</span></span><br><span class="line">    <span class="comment">// the computer whose name is in the &quot;host&quot; string,</span></span><br><span class="line">    <span class="comment">// then request the URL path given in the &quot;path&quot; string.</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Then you&#x27;ll need to print out everything the server sends back,</span></span><br><span class="line">    <span class="comment">// (not just one call to read() -- everything) until you reach</span></span><br><span class="line">    <span class="comment">// the &quot;eof&quot; (end of file).</span></span><br><span class="line"></span><br><span class="line">    <span class="function">Address <span class="title">address</span><span class="params">(host, <span class="string">&quot;http&quot;</span>)</span></span>;</span><br><span class="line">    TCPSocket socket;</span><br><span class="line">    <span class="comment">// 和服务器连接</span></span><br><span class="line">    socket.<span class="built_in">connect</span>(address);</span><br><span class="line">    <span class="comment">// 利用字符串拼接，编写request请求</span></span><br><span class="line">    socket.<span class="built_in">write</span>(<span class="string">&quot;GET &quot;</span> + path + <span class="string">&quot; HTTP/1.1\r\n&quot;</span>);</span><br><span class="line">    socket.<span class="built_in">write</span>(<span class="string">&quot;HOST: &quot;</span> + host + <span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">    socket.<span class="built_in">write</span>(<span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">    <span class="comment">// request结束</span></span><br><span class="line">    socket.<span class="built_in">shutdown</span>(SHUT_WR);</span><br><span class="line">    <span class="comment">// content</span></span><br><span class="line">    <span class="keyword">while</span> (!socket.<span class="built_in">eof</span>()) &#123;</span><br><span class="line">        std::cout &lt;&lt; socket.<span class="built_in">read</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// close</span></span><br><span class="line">    socket.<span class="built_in">close</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// cerr &lt;&lt; &quot;Function called: get_URL(&quot; &lt;&lt; host &lt;&lt; &quot;, &quot; &lt;&lt; path &lt;&lt; &quot;).\n&quot;;</span></span><br><span class="line">    <span class="comment">// cerr &lt;&lt; &quot;Warning: get_URL() has not been implemented yet.\n&quot;;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>make</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ make</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[ 33%] Built target sponge</span><br><span class="line">[ 40%] Built target webget</span><br><span class="line">[ 46%] Built target spongechecks</span><br><span class="line">[ 53%] Built target byte_stream_many_writes</span><br><span class="line">[ 60%] Built target byte_stream_capacity</span><br><span class="line">[ 66%] Built target byte_stream_two_writes</span><br><span class="line">[ 73%] Built target byte_stream_one_write</span><br><span class="line">[ 80%] Built target byte_stream_construction</span><br><span class="line">[ 86%] Built target parser_dt</span><br><span class="line">[ 93%] Built target socket_dt</span><br><span class="line">[100%] Built target address_dt</span><br></pre></td></tr></table></figure><ol start="6"><li>测试</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ./apps/webget cs144.keithw.org /hello</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Date: Mon, 17 Jan 2022 09:16:30 GMT</span><br><span class="line">Server: Apache</span><br><span class="line">Last-Modified: Thu, 13 Dec 2018 15:45:29 GMT</span><br><span class="line">ETag: <span class="string">&quot;e-57ce93446cb64&quot;</span></span><br><span class="line">Accept-Ranges: bytes</span><br><span class="line">Content-Length: 14</span><br><span class="line">Content-Type: text/plain</span><br><span class="line"></span><br><span class="line">Hello, CS144!</span><br></pre></td></tr></table></figure><ol start="7"><li>make check_webget</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ make check_webget</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[100%] Testing webget...</span><br><span class="line">Test project /home/ubuntu/cs144/sponge/build</span><br><span class="line">    Start 31: t_webget</span><br><span class="line">1/1 Test <span class="comment">#31: t_webget .........................   Passed    1.05 sec</span></span><br><span class="line"></span><br><span class="line">100% tests passed, 0 tests failed out of 1</span><br><span class="line"></span><br><span class="line">Total Test time (real) =   1.05 sec</span><br><span class="line">[100%] Built target check_webget</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//! \brief A reference-counted read-only string that can discard bytes from the front</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Buffer</span> &#123;</span></span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">    std::shared_ptr&lt;std::string&gt; _storage&#123;&#125;;</span><br><span class="line">    <span class="keyword">size_t</span> _starting_offset&#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Buffer</span>() = <span class="keyword">default</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//! \brief Construct by taking ownership of a string</span></span><br><span class="line">    <span class="built_in">Buffer</span>(std::string &amp;&amp;str) <span class="keyword">noexcept</span> : _storage(std::make_shared&lt;std::string&gt;(std::<span class="built_in">move</span>(str))) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//! \name Expose contents as a std::string_view</span></span><br><span class="line">    <span class="comment">//!@&#123;</span></span><br><span class="line">    <span class="function">std::string_view <span class="title">str</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">not</span> _storage) &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> &#123;_storage-&gt;<span class="built_in">data</span>() + _starting_offset, _storage-&gt;<span class="built_in">size</span>() - _starting_offset&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">operator</span> <span class="title">std::string_view</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">str</span>(); &#125;</span><br><span class="line">    <span class="comment">//!@&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//! \brief Get character at location `n`</span></span><br><span class="line">    <span class="function"><span class="keyword">uint8_t</span> <span class="title">at</span><span class="params">(<span class="keyword">const</span> <span class="keyword">size_t</span> n)</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">str</span>().<span class="built_in">at</span>(n); &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//! \brief Size of the string</span></span><br><span class="line">    <span class="function"><span class="keyword">size_t</span> <span class="title">size</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">str</span>().<span class="built_in">size</span>(); &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//! \brief Make a copy to a new std::string</span></span><br><span class="line">    <span class="function">std::string <span class="title">copy</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> std::<span class="built_in">string</span>(<span class="built_in">str</span>()); &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//! \brief Discard the first `n` bytes of the string (does not require a copy or move)</span></span><br><span class="line">    <span class="comment">//! \note Doesn&#x27;t free any memory until the whole string has been discarded in all copies of the Buffer.</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">remove_prefix</span><span class="params">(<span class="keyword">const</span> <span class="keyword">size_t</span> n)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这是一个只读的字符串类 <code>Buffer</code>，具有自动引用计数的特性。该类可以从字符串前面丢弃一些字节。</p><p>类成员包括：</p><ul><li><code>_storage</code>：一个指向 <code>std::string</code> 对象的智能指针，表示该类持有的字符串对象。由于该指针是一个 shared_ptr，所以当多个 <code>Buffer</code> 实例共享同一个字符串时，该字符串的内存只会在所有引用该字符串的 <code>Buffer</code> 实例都析构时才被释放。</li><li><code>_starting_offset</code>：表示当前 <code>Buffer</code> 实例在 <code>_storage</code> 所指向的字符串对象中的偏移量，即该实例持有的字符串从 <code>_storage</code> 所指向的字符串对象的第 <code>_starting_offset</code> 个字符开始。</li></ul><p>该类提供了以下方法：</p><ul><li>构造函数：接收一个 <code>std::string</code> 对象，并以其为初始字符串。</li><li><code>str()</code>：返回一个 <code>std::string_view</code> 对象，表示当前 <code>Buffer</code> 实例所持有的字符串。<code>std::string_view</code> 对象的数据成员指向 <code>_storage</code> 所指向的字符串对象的 <code>_starting_offset</code> 处。</li><li><code>operator std::string_view() const</code>：重载了类型转换运算符，将 <code>Buffer</code> 对象转换为 <code>std::string_view</code> 对象。</li><li><code>at(size_t n)</code>：返回当前 <code>Buffer</code> 实例所持有的字符串的第 <code>n</code> 个字符。</li><li><code>size()</code>：返回当前 <code>Buffer</code> 实例所持有的字符串的长度。</li><li><code>copy()</code>：返回一个新的 <code>std::string</code> 对象，其中包含当前 <code>Buffer</code> 实例所持有的字符串的完整拷贝。</li><li><code>remove_prefix(size_t n)</code>：丢弃当前 <code>Buffer</code> 实例所持有字符串的前 <code>n</code> 个字符，将 <code>_starting_offset</code> 成员变量加上 <code>n</code>。这个方法不需要进行字符串的拷贝或移动操作，因为 <code>Buffer</code> 类只是一个只读的字符串容器，不需要对其中的字符串做任何修改。同时，如果当前 <code>Buffer</code> 实例是多个实例中的一个共享同一个字符串，那么在所有引用该字符串的 <code>Buffer</code> 实例都丢弃了前 <code>n</code> 个字符之后，原字符串对象才会被释放。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//! \brief A reference-counted discontiguous string that can discard bytes from the front</span></span><br><span class="line"><span class="comment">//! \note Used to model packets that contain multiple sets of headers</span></span><br><span class="line"><span class="comment">//! + a payload. This allows us to prepend headers (e.g., to</span></span><br><span class="line"><span class="comment">//! encapsulate a TCP payload in a TCPSegment, and then encapsulate</span></span><br><span class="line"><span class="comment">//! the TCPSegment in an IPv4Datagram) without copying the payload.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BufferList</span> &#123;</span></span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">    std::deque&lt;Buffer&gt; _buffers&#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//! \name Constructors</span></span><br><span class="line">    <span class="comment">//!@&#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">BufferList</span>() = <span class="keyword">default</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//! \brief Construct from a Buffer</span></span><br><span class="line">    <span class="built_in">BufferList</span>(Buffer buffer) : _buffers&#123;buffer&#125; &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//! \brief Construct by taking ownership of a std::string</span></span><br><span class="line">    <span class="built_in">BufferList</span>(std::string &amp;&amp;str) <span class="keyword">noexcept</span> &#123;</span><br><span class="line">        Buffer buf&#123;std::<span class="built_in">move</span>(str)&#125;;</span><br><span class="line">        <span class="built_in">append</span>(buf);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//!@&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//! \brief Access the underlying queue of Buffers</span></span><br><span class="line">    <span class="function"><span class="keyword">const</span> std::deque&lt;Buffer&gt; &amp;<span class="title">buffers</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> _buffers; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//! \brief Append a BufferList</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">append</span><span class="params">(<span class="keyword">const</span> BufferList &amp;other)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//! \brief Transform to a Buffer</span></span><br><span class="line">    <span class="comment">//! \note Throws an exception unless BufferList is contiguous</span></span><br><span class="line">    <span class="function"><span class="keyword">operator</span> <span class="title">Buffer</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//! \brief Discard the first `n` bytes of the string (does not require a copy or move)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">remove_prefix</span><span class="params">(<span class="keyword">size_t</span> n)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//! \brief Size of the string</span></span><br><span class="line">    <span class="function"><span class="keyword">size_t</span> <span class="title">size</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//! \brief Make a copy to a new std::string</span></span><br><span class="line">    <span class="function">std::string <span class="title">concatenate</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这段代码定义了一个叫做<code>BufferList</code>的类，它表示了一个由多个<code>Buffer</code>组成的不连续的字符串。这个类可以从字符串前面丢弃字节。它主要用来表示包含多组头部和有效载荷的数据包，它允许我们在不复制有效载荷的情况下前置头部。</p><p>这个类内部使用了一个deque容器来存储多个<code>Buffer</code>，并对外提供了一系列公共接口：</p><ul><li><code>BufferList()</code>默认构造函数</li><li><code>BufferList(Buffer buffer)</code>：从一个Buffer构造一个BufferList</li><li><code>BufferList(std::string &amp;&amp;str)</code>：从一个std::string构造一个BufferList，它会自动将其转换为一个Buffer，并添加到BufferList中</li><li><code>const std::deque&lt;Buffer&gt;&amp; buffers() const</code>：访问底层的Buffer队列</li><li><code>void append(const BufferList&amp; other)</code>：添加一个BufferList到当前对象中</li><li><code>operator Buffer() const</code>：将当前BufferList转换为一个Buffer，但如果BufferList不是连续的，将抛出异常</li><li><code>void remove_prefix(size_t n)</code>：丢弃当前BufferList的前n个字节</li><li><code>size_t size() const</code>：返回当前BufferList的字节长度</li><li><code>std::string concatenate() const</code>：将当前BufferList中的所有Buffer连接起来，并返回一个新的std::string对象。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//! \brief A non-owning temporary view (similar to std::string_view) of a discontiguous string</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BufferViewList</span> &#123;</span></span><br><span class="line">    std::deque&lt;std::string_view&gt; _views&#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//! \name Constructors</span></span><br><span class="line">    <span class="comment">//!@&#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//! \brief Construct from a std::string</span></span><br><span class="line">    <span class="built_in">BufferViewList</span>(<span class="keyword">const</span> std::string &amp;str) : <span class="built_in">BufferViewList</span>(std::<span class="built_in">string_view</span>(str)) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//! \brief Construct from a C string (must be NULL-terminated)</span></span><br><span class="line">    <span class="built_in">BufferViewList</span>(<span class="keyword">const</span> <span class="keyword">char</span> *s) : <span class="built_in">BufferViewList</span>(std::<span class="built_in">string_view</span>(s)) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//! \brief Construct from a BufferList</span></span><br><span class="line">    <span class="built_in">BufferViewList</span>(<span class="keyword">const</span> BufferList &amp;buffers);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//! \brief Construct from a std::string_view</span></span><br><span class="line">    <span class="built_in">BufferViewList</span>(std::string_view str) &#123; _views.<span class="built_in">push_back</span>(&#123;<span class="keyword">const_cast</span>&lt;<span class="keyword">char</span> *&gt;(str.<span class="built_in">data</span>()), str.<span class="built_in">size</span>()&#125;); &#125;</span><br><span class="line">    <span class="comment">//!@&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//! \brief Discard the first `n` bytes of the string (does not require a copy or move)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">remove_prefix</span><span class="params">(<span class="keyword">size_t</span> n)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//! \brief Size of the string</span></span><br><span class="line">    <span class="function"><span class="keyword">size_t</span> <span class="title">size</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//! \brief Convert to a vector of `iovec` structures</span></span><br><span class="line">    <span class="comment">//! \note used for system calls that write discontiguous buffers,</span></span><br><span class="line">    <span class="comment">//! e.g. [writev(2)](\ref man2::writev) and [sendmsg(2)](\ref man2::sendmsg)</span></span><br><span class="line">    <span class="function">std::vector&lt;iovec&gt; <span class="title">as_iovecs</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这段代码定义了一个名为 <code>BufferViewList</code> 的类，它是一个临时的、非拥有者的视图，类似于 <code>std::string_view</code>，用于表示一个不连续的字符串。该类的实例可以从不同的来源构造，包括一个 <code>std::string</code> 对象、一个 C 风格的字符串指针、一个 <code>BufferList</code> 对象，以及一个 <code>std::string_view</code> 对象。</p><p><code>BufferViewList</code> 类提供了以下几个成员函数：</p><ul><li><code>remove_prefix(size_t n)</code>：从视图中移除前面的 <code>n</code> 个字符，不需要进行复制或移动。</li><li><code>size()</code>：返回视图所表示字符串的大小。</li><li><code>as_iovecs()</code>：返回一个 <code>std::vector</code>，其中的元素是 <code>iovec</code> 结构体，可以用于写入不连续的缓冲区，如 [writev(2)](\ref man2::writev) 和 [sendmsg(2)](\ref man2::sendmsg) 系统调用。</li></ul><p>下面模仿 <code>BufferList</code> 编写一个 <code>BufferPlus</code> 类：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BufferPlus</span> &#123;</span></span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">    std::shared_ptr&lt;std::string&gt; _storage&#123;&#125;;</span><br><span class="line">    <span class="keyword">size_t</span> _starting_offset&#123;&#125;;</span><br><span class="line">    <span class="keyword">size_t</span> _ending_offset&#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">BufferPlus</span>() = <span class="keyword">default</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//! \brief Construct by taking ownership of a string</span></span><br><span class="line">    <span class="built_in">BufferPlus</span>(std::string &amp;&amp;str) <span class="keyword">noexcept</span> : _storage(std::make_shared&lt;std::string&gt;(std::<span class="built_in">move</span>(str))) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">BufferPlus</span>(<span class="keyword">const</span> BufferPlus &amp;Other)</span><br><span class="line">      : _storage(Other._storage)</span><br><span class="line">      , _starting_offset(Other._starting_offset)</span><br><span class="line">      , _ending_offset(Other._ending_offset) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">BufferPlus</span>(<span class="keyword">const</span> Buffer &amp;bf)</span><br><span class="line">      : _storage(bf._storage)</span><br><span class="line">      , _starting_offset(bf._starting_offset) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//! \name Expose contents as a std::string_view</span></span><br><span class="line">    <span class="comment">//!@&#123;</span></span><br><span class="line">    <span class="function">std::string_view <span class="title">str</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">not</span> _storage) &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> &#123;_storage-&gt;<span class="built_in">data</span>() + _starting_offset, _storage-&gt;<span class="built_in">size</span>() - _starting_offset - _ending_offset&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">operator</span> <span class="title">std::string_view</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">str</span>(); &#125;</span><br><span class="line">    <span class="comment">//!@&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//! \brief Get character at location `n`</span></span><br><span class="line">    <span class="function"><span class="keyword">uint8_t</span> <span class="title">at</span><span class="params">(<span class="keyword">const</span> <span class="keyword">size_t</span> n)</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">str</span>().<span class="built_in">at</span>(n); &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//! \brief Size of the string</span></span><br><span class="line">    <span class="function"><span class="keyword">size_t</span> <span class="title">size</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> _storage ? _storage-&gt;<span class="built_in">size</span>() - _starting_offset - _ending_offset : <span class="number">0</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">size_t</span> <span class="title">starting_offset</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> _starting_offset; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">size_t</span> <span class="title">ending_offset</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> _ending_offset; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//! \brief Make a copy to a new std::string</span></span><br><span class="line">    <span class="function">std::string <span class="title">copy</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> std::<span class="built_in">string</span>(<span class="built_in">str</span>()); &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//! \brief Discard the first `n` bytes of the string (does not require a copy or move)</span></span><br><span class="line">    <span class="comment">//! \note Doesn&#x27;t free any memory until the whole string has been discarded in all copies of the Buffer.</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">remove_prefix</span><span class="params">(<span class="keyword">const</span> <span class="keyword">size_t</span> n)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//! \brief Discard the last `n` bytes of the string (does not require a copy or move)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">remove_suffix</span><span class="params">(<span class="keyword">const</span> <span class="keyword">size_t</span> n)</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>BufferPlus</code> 的 C++ 类。它是一个字符串类，用于表示字符串，并提供了许多有用的操作。下面是这个类的主要特性：</p><ul><li>它内部维护了一个指向 <code>std::string</code> 的 <code>std::shared_ptr</code> 智能指针，因此可以在多个 <code>BufferPlus</code> 实例之间共享底层数据。</li><li><code>BufferPlus</code> 可以构造出一个新的 <code>std::string</code> 或者从一个现有的 <code>std::string</code> 对象中构造出 <code>BufferPlus</code>。</li><li>它提供了一个 <code>str()</code> 方法来将 <code>BufferPlus</code> 转换为一个 <code>std::string_view</code>，并提供了一个 <code>copy()</code> 方法来将 <code>BufferPlus</code> 复制到一个新的 <code>std::string</code> 对象中。</li><li>它提供了一个 <code>at()</code> 方法来访问特定位置的字符。</li><li>它提供了一个 <code>size()</code> 方法来获取字符串的长度。</li><li>它提供了 <code>remove_prefix()</code> 和 <code>remove_suffix()</code> 方法，用于从字符串的开头或末尾删除指定数量的字符，而不需要移动底层数据。</li></ul><p>在实际编程中，<code>BufferPlus</code> 可以作为一种高效的字符串类型来使用，尤其是在需要频繁进行字符串拼接和切割操作的情况下。</p><h2 id="完整代码">完整代码</h2><ul><li><a href="https://github.com/Misaka-9982-coder/CS144-fa21/blob/optimize/apps/webget.cc">webget</a></li><li><a href="https://github.com/Misaka-9982-coder/CS144-fa21/blob/optimize/libsponge/byte_stream.hh">byte_stream.hh</a></li><li><a href="https://github.com/Misaka-9982-coder/CS144-fa21/blob/optimize/libsponge/byte_stream.cc">byte_stream.cc</a></li></ul><p>“byte_stream.hh”</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> SPONGE_LIBSPONGE_BYTE_STREAM_HH</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SPONGE_LIBSPONGE_BYTE_STREAM_HH</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;buffer.hh&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//! \brief An in-order byte stream.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//! Bytes are written on the &quot;input&quot; side and read from the &quot;output&quot;</span></span><br><span class="line"><span class="comment">//! side.  The byte stream is finite: the writer can end the input,</span></span><br><span class="line"><span class="comment">//! and then no more bytes can be written.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ByteStream</span> &#123;</span></span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">// Your code here -- add private members as necessary.</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Hint: This doesn&#x27;t need to be a sophisticated data structure at</span></span><br><span class="line">    <span class="comment">// all, but if any of your tests are taking longer than a second,</span></span><br><span class="line">    <span class="comment">// that&#x27;s a sign that you probably want to keep exploring</span></span><br><span class="line">    <span class="comment">// different approaches.</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">bool</span> _error&#123;<span class="literal">false</span>&#125;;  <span class="comment">//!&lt; Flag indicating that the stream suffered an error.</span></span><br><span class="line">    <span class="keyword">bool</span> _input_ended&#123;<span class="literal">false</span>&#125;;</span><br><span class="line">    <span class="keyword">size_t</span> _capacity;</span><br><span class="line">    <span class="keyword">size_t</span> _bytes_written&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">size_t</span> _bytes_read&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    std::deque&lt;BufferPlus&gt; _buffer&#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//! Construct a stream with room for `capacity` bytes.</span></span><br><span class="line">    <span class="built_in">ByteStream</span>(<span class="keyword">const</span> <span class="keyword">size_t</span> capacity);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//! \name &quot;Input&quot; interface for the writer</span></span><br><span class="line">    <span class="comment">//!@&#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//! Write a string of bytes into the stream. Write as many</span></span><br><span class="line">    <span class="comment">//! as will fit, and return how many were written.</span></span><br><span class="line">    <span class="comment">//! \returns the number of bytes accepted into the stream</span></span><br><span class="line">    <span class="function"><span class="keyword">size_t</span> <span class="title">write</span><span class="params">(<span class="keyword">const</span> std::string &amp;data)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">size_t</span> <span class="title">write</span><span class="params">(std::string &amp;&amp;data)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">size_t</span> <span class="title">write</span><span class="params">(BufferPlus&amp; data)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//! \returns the number of additional bytes that the stream has space for</span></span><br><span class="line">    <span class="function"><span class="keyword">size_t</span> <span class="title">remaining_capacity</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//! Signal that the byte stream has reached its ending</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">end_input</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//! Indicate that the stream suffered an error.</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">set_error</span><span class="params">()</span> </span>&#123; _error = <span class="literal">true</span>; &#125;</span><br><span class="line">    <span class="comment">//!@&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//! \name &quot;Output&quot; interface for the reader</span></span><br><span class="line">    <span class="comment">//!@&#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//! Peek at next &quot;len&quot; bytes of the stream</span></span><br><span class="line">    <span class="comment">//! \returns a string</span></span><br><span class="line">    <span class="function">std::string <span class="title">peek_output</span><span class="params">(<span class="keyword">const</span> <span class="keyword">size_t</span> len)</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//! Remove bytes from the buffer</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pop_output</span><span class="params">(<span class="keyword">const</span> <span class="keyword">size_t</span> len)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//! Read (i.e., copy and then pop) the next &quot;len&quot; bytes of the stream</span></span><br><span class="line">    <span class="comment">//! \returns a string</span></span><br><span class="line">    <span class="function">std::string <span class="title">read</span><span class="params">(<span class="keyword">const</span> <span class="keyword">size_t</span> len)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//! \returns `true` if the stream input has ended</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">input_ended</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//! \returns `true` if the stream has suffered an error</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">error</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> _error; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//! \returns the maximum amount that can currently be read from the stream</span></span><br><span class="line">    <span class="function"><span class="keyword">size_t</span> <span class="title">buffer_size</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//! \returns `true` if the buffer is empty</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">buffer_empty</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//! \returns `true` if the output has reached the ending</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">eof</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="comment">//!@&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//! \name General accounting</span></span><br><span class="line">    <span class="comment">//!@&#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//! Total number of bytes written</span></span><br><span class="line">    <span class="function"><span class="keyword">size_t</span> <span class="title">bytes_written</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//! Total number of bytes popped</span></span><br><span class="line">    <span class="function"><span class="keyword">size_t</span> <span class="title">bytes_read</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="comment">//!@&#125;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span>  <span class="comment">// SPONGE_LIBSPONGE_BYTE_STREAM_HH</span></span></span><br></pre></td></tr></table></figure><p>它代表了一个按顺序排列的字节流。它有用于将字节写入流的“输入”端和从流的“输出”端读取字节的方法。</p><p><code>ByteStream</code>类的一些私有成员包括：</p><ul><li><code>_error</code>: 一个布尔标志，指示流是否发生错误。</li><li><code>_input_ended</code>: 一个布尔标志，指示输入端是否已经结束。</li><li><code>_capacity</code>: 一次可以在流中容纳的最大字节数。</li><li><code>_bytes_written</code>: 写入到流中的总字节数。</li><li><code>_bytes_read</code>: 从流中读取的总字节数。</li><li><code>_buffer</code>: 一个包含流中数据的<code>BufferPlus</code>对象的 <code>deque</code>。</li></ul><p><code>ByteStream</code>类的一些公共方法包括：</p><ul><li><code>write</code>：将一组字节写入到流的输入端。</li><li><code>end_input</code>：表示输入端已经结束。</li><li><code>set_error</code>：设置流的错误标志。</li><li><code>peek_output</code>：返回包含输出端中下一个len个字节的字符串，而不将它们从流中删除。</li><li><code>pop_output</code>：从输出端中删除下一个len个字节。</li><li><code>read</code>：返回包含输出端中下一个len个字节的字符串，并从流中删除它们。</li><li><code>input_ended</code>：如果输入端已经结束，则返回<code>true</code>。</li><li><code>error</code>：如果流已经出现错误，则返回<code>true</code>。</li><li><code>buffer_size</code>：返回流中当前的字节数。</li><li><code>buffer_empty</code>：如果流当前为空，则返回<code>true</code>。</li><li><code>eof</code>：如果输出端已经到达结尾，则返回<code>true</code>。</li><li><code>bytes_written</code>：返回写入流中的总字节数。</li><li><code>bytes_read</code>：返回从流中读取的总字节数。</li></ul><p>“byte_stream.cc”</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;byte_stream.hh&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Dummy implementation of a flow-controlled in-memory byte stream.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// For Lab 0, please replace with a real implementation that passes the</span></span><br><span class="line"><span class="comment">// automated checks run by `make check_lab0`.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// You will need to add private members to the class declaration in `byte_stream.hh`</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span>... Targs&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DUMMY_CODE</span><span class="params">(Targs &amp;&amp;... <span class="comment">/* unused */</span>)</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">ByteStream::<span class="built_in">ByteStream</span>(<span class="keyword">const</span> <span class="keyword">size_t</span> capacity)</span><br><span class="line">    : _capacity(capacity) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">size_t</span> <span class="title">ByteStream::write</span><span class="params">(<span class="keyword">const</span> string &amp;data)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">size_t</span> bytes = data.<span class="built_in">size</span>();</span><br><span class="line">    bytes = <span class="built_in">min</span>(bytes, <span class="built_in">remaining_capacity</span>());</span><br><span class="line">    _bytes_written += bytes;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (bytes == data.<span class="built_in">size</span>()) &#123;</span><br><span class="line">        _buffer.<span class="built_in">emplace_back</span>(<span class="built_in">move</span>(<span class="built_in">Buffer</span>(<span class="built_in">move</span>(<span class="built_in">string</span>(data)))));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        _buffer.<span class="built_in">emplace_back</span>(<span class="built_in">move</span>(data.<span class="built_in">substr</span>(<span class="number">0</span>, bytes)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> bytes;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">size_t</span> <span class="title">ByteStream::write</span><span class="params">(string &amp;&amp;data)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">size_t</span> bytes = data.<span class="built_in">size</span>();</span><br><span class="line">    bytes = <span class="built_in">min</span>(bytes, <span class="built_in">remaining_capacity</span>());</span><br><span class="line">    _bytes_written += bytes;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (bytes == data.<span class="built_in">size</span>()) &#123;</span><br><span class="line">        _buffer.<span class="built_in">emplace_back</span>(<span class="built_in">move</span>(<span class="built_in">Buffer</span>(<span class="built_in">move</span>(data))));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        _buffer.<span class="built_in">emplace_back</span>(<span class="built_in">move</span>(data.<span class="built_in">substr</span>(<span class="number">0</span>, bytes)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> bytes;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">size_t</span> <span class="title">ByteStream::write</span><span class="params">(BufferPlus&amp; data)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">size_t</span> bytes = data.<span class="built_in">size</span>();</span><br><span class="line">    bytes = <span class="built_in">min</span>(bytes, <span class="built_in">remaining_capacity</span>());</span><br><span class="line">    _bytes_written += bytes;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (bytes != data.<span class="built_in">size</span>()) &#123;</span><br><span class="line">        data.<span class="built_in">remove_suffix</span>(data.<span class="built_in">size</span>() - bytes);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (data.<span class="built_in">size</span>()) &#123;</span><br><span class="line">        _buffer.<span class="built_in">emplace_back</span>(<span class="built_in">move</span>(data));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> bytes;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//! \param[in] len bytes will be copied from the output side of the buffer</span></span><br><span class="line"><span class="function">string <span class="title">ByteStream::peek_output</span><span class="params">(<span class="keyword">const</span> <span class="keyword">size_t</span> len)</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">    <span class="keyword">size_t</span> bytes = <span class="built_in">min</span>(len, <span class="built_in">buffer_size</span>());</span><br><span class="line">    string res;</span><br><span class="line">    res.<span class="built_in">reserve</span>(bytes);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span> &amp;buffer : _buffer) &#123;</span><br><span class="line">        <span class="keyword">if</span> (bytes &gt;= buffer.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            res.<span class="built_in">append</span>(<span class="built_in">move</span>(buffer));</span><br><span class="line">            bytes -= buffer.<span class="built_in">size</span>();</span><br><span class="line">            <span class="keyword">if</span> (bytes == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            BufferPlus <span class="built_in">tmp</span>(buffer);</span><br><span class="line">            tmp.<span class="built_in">remove_suffix</span>(buffer.<span class="built_in">size</span>() - bytes);</span><br><span class="line">            res.<span class="built_in">append</span>(<span class="built_in">move</span>(tmp));</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//! \param[in] len bytes will be removed from the output side of the buffer</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ByteStream::pop_output</span><span class="params">(<span class="keyword">const</span> <span class="keyword">size_t</span> len)</span> </span>&#123; </span><br><span class="line">    <span class="keyword">size_t</span> bytes = <span class="built_in">min</span>(len, <span class="built_in">buffer_size</span>());</span><br><span class="line">    _bytes_read += bytes;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (bytes &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (bytes &gt; _buffer.<span class="built_in">front</span>().<span class="built_in">size</span>()) &#123;</span><br><span class="line">            bytes -= _buffer.<span class="built_in">front</span>().<span class="built_in">size</span>();</span><br><span class="line">            _buffer.<span class="built_in">pop_front</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            _buffer.<span class="built_in">front</span>().<span class="built_in">remove_prefix</span>(bytes);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//! Read (i.e., copy and then pop) the next &quot;len&quot; bytes of the stream</span></span><br><span class="line"><span class="comment">//! \param[in] len bytes will be popped and returned</span></span><br><span class="line"><span class="comment">//! \returns a string</span></span><br><span class="line"><span class="function">std::string <span class="title">ByteStream::read</span><span class="params">(<span class="keyword">const</span> <span class="keyword">size_t</span> len)</span> </span>&#123;</span><br><span class="line">    string res = <span class="built_in">peek_output</span>(len);</span><br><span class="line">    <span class="built_in">pop_output</span>(len);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ByteStream::end_input</span><span class="params">()</span> </span>&#123; _input_ended = <span class="literal">true</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ByteStream::input_ended</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> _input_ended; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">size_t</span> <span class="title">ByteStream::buffer_size</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> _bytes_written - _bytes_read; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ByteStream::buffer_empty</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> _bytes_written - _bytes_read == <span class="number">0</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ByteStream::eof</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> _input_ended &amp;&amp; <span class="built_in">buffer_empty</span>(); &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">size_t</span> <span class="title">ByteStream::bytes_written</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> _bytes_written; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">size_t</span> <span class="title">ByteStream::bytes_read</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> _bytes_read; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">size_t</span> <span class="title">ByteStream::remaining_capacity</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> _capacity - <span class="built_in">buffer_size</span>(); &#125;</span><br></pre></td></tr></table></figure><ul><li><code>ByteStream::ByteStream(const size_t capacity)</code>：构造函数，初始化缓存区大小为 <code>capacity</code>。</li><li><code>size_t ByteStream::write(const string &amp;data)</code>：写入数据，返回实际写入的字节数。如果缓存区已满，将只写入缓存区可容纳的字节数。如果数据未写完，将剩余部分保存到下一个缓存块中。</li><li><code>size_t ByteStream::write(string &amp;&amp;data)</code>：移动语义版本的写入数据方法。</li><li><code>size_t ByteStream::write(BufferPlus&amp; data)</code>：从 <code>BufferPlus</code> 对象中写入数据。这里 <code>BufferPlus</code> 是一个扩展了 <code>std::string_view</code> 的类，用于在不拷贝数据的情况下操作字符串。</li><li><code>string ByteStream::peek_output(const size_t len) const</code>：查看流中下一个 <code>len</code> 个字节的数据，但不会将数据弹出。</li><li><code>void ByteStream::pop_output(const size_t len)</code>：从流中弹出 <code>len</code> 个字节的数据。</li><li><code>std::string ByteStream::read(const size_t len)</code>：读取并弹出下一个 <code>len</code> 个字节的数据。</li><li><code>void ByteStream::end_input()</code>：结束输入，表示输入流已经结束。</li><li><code>bool ByteStream::input_ended() const</code>：判断输入流是否已经结束。</li><li><code>size_t ByteStream::buffer_size() const</code>：返回当前缓存区的字节数。</li><li><code>bool ByteStream::buffer_empty() const</code>：判断缓存区是否为空。</li><li><code>bool ByteStream::eof() const</code>：判断是否已经读取完所有数据。</li><li><code>size_t ByteStream::bytes_written() const</code>：返回已经写入的字节数。</li><li><code>size_t ByteStream::bytes_read() const</code>：返回已经读取的字节数。</li><li><code>size_t ByteStream::remaining_capacity() const</code>：返回缓存区的剩余容量。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="CS144" scheme="http://www.misaka-9982.com/tags/CS144/"/>
    
    <category term="Network" scheme="http://www.misaka-9982.com/tags/Network/"/>
    
  </entry>
  
  <entry>
    <title>CS144 环境配置</title>
    <link href="http://www.misaka-9982.com/2023/02/15/CS144-%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    <id>http://www.misaka-9982.com/2023/02/15/CS144-%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</id>
    <published>2023-02-15T05:12:54.000Z</published>
    <updated>2023-02-18T13:11:53.997Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="课程介绍">课程介绍</h2><blockquote><p>CS144: 什么，你学不会TCP？那就来自己写一个吧！ - 胡津铭的文章 - 知乎<br><a href="https://zhuanlan.zhihu.com/p/175998415">https://zhuanlan.zhihu.com/p/175998415</a></p></blockquote><p>CS144 is an introductory course about computer networks. You will learn about the basic principles of computer networks, for example packet switching, layering, encapsulation and protocols; and you will learn how applications such as the world-wide-web, video streaming (e.g. Netfix and Hulu), video conferencing (e.g. Zoom and Skype) and BitTorrent use the network to communicate. You will spend quite a lot of time learning about the specifics of how the Internet works - which 1s of course by far the biggest computer network ever built. You will learn how applications communicate reliably over an unreliable Internet. And you will build portions of the Internet yourself! In fact, believe that in CS144 you build more parts of the Internet infrastructure than in any other undergraduate networking class anywhere. It’s really fun to see how the individual pieces work: You build an Internet router, and a reliable data delivery service, and then you use it to communicate with remote servers.</p><p>In addition to lectures, we will also have a few in-class guest lectures by outside speakers. All the guest lecturers are excellent speakers with many years of experience making networks work at huge scale. We will also have one Or more in-class exercises, which you will complete during the regular lecture time. These are designed to give you hands-on experience with tools that are useful for your labs.</p><h2 id="参考资料-2">参考资料</h2><ul><li><a href="https://github.com/huangrt01/CS-Notes/blob/master/Notes/Output/Computer-Networking-Lab-CS144-Stanford.md">huangrt01</a></li><li><a href="https://www.cnblogs.com/kangyupl/p/stanford_cs144_labs.html">康宇PL’s Blog</a></li><li><a href="https://lexssama.github.io/tags/CS144/">Lexssama’s Blogs</a></li><li><a href="https://kiprey.github.io/tags/CS144/">kiprey</a></li><li><a href="http://doraemonzzz.com/tags/CS144/">doraemonzzz</a></li><li><a href="https://vixbob.moe/25.html">ViXbob’s libsponge</a></li><li><a href="https://www.epis2048.net/categories/Code/Stanford-CS144/">吃着土豆坐地铁的博客</a></li><li><a href="https://www.inlighting.org/archives/2021-cs144-notes/#Lab-4-the-TCP-connection">Smith</a></li><li><a href="https://github.com/PKUFlyingPig/CS144-Computer-Network">PKUFlyingPig</a></li><li><a href="https://www.cnblogs.com/weijunji/tag/CS144/">星遥见</a></li><li><a href="https://www.bilibili.com/video/BV1v14y1s7oq">阿苏EEer</a></li><li><a href="https://tarplkpqsm.feishu.cn/docx/doxcnpBEN4SG3vA9pVyCoANigBh">阿苏EEer的笔记</a></li><li><a href="https://zhuanlan.zhihu.com/p/414279516">性能优化</a></li><li><a href="https://users.cs.northwestern.edu/~agupta/cs340/project2/TCPIP_State_Transition_Diagram.pdf">TCP/IP State Transition Diagram</a></li><li><a href="http://tcpipguide.com/free/t_TCPOperationalOverviewandtheTCPFiniteStateMachineF-2.htm">TCP Finite State Machine</a></li></ul><h2 id="配置环境">配置环境</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https://web.stanford.edu/class/cs144/vm_howto/setup_dev_env.sh</span><br><span class="line">chmod +x setup_dev_env.sh</span><br><span class="line">./setup_dev_env</span><br></pre></td></tr></table></figure><p>安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install doxygen clang-format</span><br><span class="line">sudo apt install cmake</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/cs144/sponge</span><br><span class="line">git checkout -b master origin/master</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">$ tree .</span><br><span class="line">.</span><br><span class="line">├── apps</span><br><span class="line">│   ├── CMakeLists.txt</span><br><span class="line">│   └── webget.cc</span><br><span class="line">├── CMakeLists.txt</span><br><span class="line">├── compile_commands.json -&gt; build/compile_commands.json</span><br><span class="line">├── doctests</span><br><span class="line">│   ├── address_dt.cc</span><br><span class="line">│   ├── address_example_1.cc</span><br><span class="line">│   ├── address_example_2.cc</span><br><span class="line">│   ├── address_example_3.cc</span><br><span class="line">│   ├── CMakeLists.txt</span><br><span class="line">│   ├── parser_dt.cc</span><br><span class="line">│   ├── parser_example.cc</span><br><span class="line">│   ├── socket_dt.cc</span><br><span class="line">│   ├── socket_example_1.cc</span><br><span class="line">│   ├── socket_example_2.cc</span><br><span class="line">│   └── socket_example_3.cc</span><br><span class="line">├── etc</span><br><span class="line">│   ├── build_defs.cmake</span><br><span class="line">│   ├── build_type.cmake</span><br><span class="line">│   ├── cflags.cmake</span><br><span class="line">│   ├── clang_format.cmake</span><br><span class="line">│   ├── clang_tidy.cmake</span><br><span class="line">│   ├── cppcheck.cmake</span><br><span class="line">│   ├── cppreference-doxygen-web.tag.xml</span><br><span class="line">│   ├── Doxyfile.in</span><br><span class="line">│   ├── doxygen.cmake</span><br><span class="line">│   ├── linux-man-doxygen-web.tag.xml</span><br><span class="line">│   ├── rfc-doxygen-web.tag.xml</span><br><span class="line">│   ├── sponge_doxygen.css</span><br><span class="line">│   ├── sponge_small.png</span><br><span class="line">│   ├── tests.cmake</span><br><span class="line">│   └── tunconfig</span><br><span class="line">├── libsponge</span><br><span class="line">│   ├── byte_stream.cc</span><br><span class="line">│   ├── byte_stream.hh</span><br><span class="line">│   ├── CMakeLists.txt</span><br><span class="line">│   └── util</span><br><span class="line">│       ├── address.cc</span><br><span class="line">│       ├── address.hh</span><br><span class="line">│       ├── buffer.cc</span><br><span class="line">│       ├── buffer.hh</span><br><span class="line">│       ├── eventloop.cc</span><br><span class="line">│       ├── eventloop.hh</span><br><span class="line">│       ├── file_descriptor.cc</span><br><span class="line">│       ├── file_descriptor.hh</span><br><span class="line">│       ├── parser.cc</span><br><span class="line">│       ├── parser.hh</span><br><span class="line">│       ├── socket.cc</span><br><span class="line">│       ├── socket.hh</span><br><span class="line">│       ├── tun.cc</span><br><span class="line">│       ├── tun.hh</span><br><span class="line">│       ├── util.cc</span><br><span class="line">│       └── util.hh</span><br><span class="line">├── README.md</span><br><span class="line">├── tests</span><br><span class="line">│   ├── byte_stream_capacity.cc</span><br><span class="line">│   ├── byte_stream_construction.cc</span><br><span class="line">│   ├── byte_stream_many_writes.cc</span><br><span class="line">│   ├── byte_stream_one_write.cc</span><br><span class="line">│   ├── byte_stream_test_harness.cc</span><br><span class="line">│   ├── byte_stream_test_harness.hh</span><br><span class="line">│   ├── byte_stream_two_writes.cc</span><br><span class="line">│   ├── CMakeLists.txt</span><br><span class="line">│   ├── test_err_if.hh</span><br><span class="line">│   ├── test_should_be.hh</span><br><span class="line">│   └── webget_t.sh</span><br><span class="line">└── writeups</span><br><span class="line">    └── lab0.md</span><br><span class="line"></span><br><span class="line">7 directories, 62 files</span><br></pre></td></tr></table></figure><ul><li><code>doctests</code> 是 <code>util</code> 的一些使用样例</li><li><code>etc</code> 是配置文件</li><li><code>libsponge</code> 是实验中要完善的代码文件</li><li><code>util</code> 是实验提供的工具类</li><li><code>tests</code>文件夹中是测试文件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir build &amp;&amp; <span class="built_in">cd</span> build</span><br><span class="line">cmake ..</span><br><span class="line">make format</span><br><span class="line">make -j4</span><br></pre></td></tr></table></figure><p>出现以下报错</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/home/ubuntu/cs144/sponge/libsponge/util/parser.cc:36:13: error: <span class="built_in">shift</span> count &gt;= width of <span class="built_in">type</span> [-Werror,-Wshift-count-overflow]</span><br><span class="line">        ret &lt;&lt;= 8;</span><br><span class="line">            ^   ~</span><br></pre></td></tr></table></figure><p>解决方法：<br>将 <code>ret &lt;&lt;=8;</code> 换成 <code>ret = ret &lt;&lt; 8</code> 即可正常运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">$ make -j4</span><br><span class="line">[  3%] Building CXX object tests/CMakeFiles/spongechecks.dir/byte_stream_test_harness.cc.o</span><br><span class="line">[  6%] Building CXX object libsponge/CMakeFiles/sponge.dir/util/address.cc.o</span><br><span class="line">[ 10%] Building CXX object libsponge/CMakeFiles/sponge.dir/byte_stream.cc.o</span><br><span class="line">[ 13%] Building CXX object libsponge/CMakeFiles/sponge.dir/util/buffer.cc.o</span><br><span class="line">[ 16%] Building CXX object libsponge/CMakeFiles/sponge.dir/util/eventloop.cc.o</span><br><span class="line">[ 20%] Building CXX object libsponge/CMakeFiles/sponge.dir/util/file_descriptor.cc.o</span><br><span class="line">[ 23%] Building CXX object libsponge/CMakeFiles/sponge.dir/util/parser.cc.o</span><br><span class="line">[ 26%] Building CXX object libsponge/CMakeFiles/sponge.dir/util/socket.cc.o</span><br><span class="line">[ 30%] Building CXX object libsponge/CMakeFiles/sponge.dir/util/tun.cc.o</span><br><span class="line">[ 33%] Linking CXX static library libspongechecks.a</span><br><span class="line">[ 33%] Built target spongechecks</span><br><span class="line">[ 36%] Building CXX object libsponge/CMakeFiles/sponge.dir/util/util.cc.o</span><br><span class="line">[ 40%] Linking CXX static library libsponge.a</span><br><span class="line">[ 40%] Built target sponge</span><br><span class="line">[ 43%] Building CXX object apps/CMakeFiles/webget.dir/webget.cc.o</span><br><span class="line">[ 46%] Building CXX object tests/CMakeFiles/byte_stream_construction.dir/byte_stream_construction.cc.o</span><br><span class="line">[ 50%] Building CXX object tests/CMakeFiles/byte_stream_one_write.dir/byte_stream_one_write.cc.o</span><br><span class="line">[ 53%] Building CXX object tests/CMakeFiles/byte_stream_two_writes.dir/byte_stream_two_writes.cc.o</span><br><span class="line">[ 56%] Linking CXX executable webget</span><br><span class="line">[ 60%] Linking CXX executable byte_stream_construction</span><br><span class="line">[ 60%] Built target webget</span><br><span class="line">[ 60%] Built target byte_stream_construction</span><br><span class="line">[ 63%] Building CXX object tests/CMakeFiles/byte_stream_many_writes.dir/byte_stream_many_writes.cc.o</span><br><span class="line">[ 66%] Linking CXX executable byte_stream_one_write</span><br><span class="line">[ 70%] Building CXX object tests/CMakeFiles/byte_stream_capacity.dir/byte_stream_capacity.cc.o</span><br><span class="line">[ 73%] Linking CXX executable byte_stream_two_writes</span><br><span class="line">[ 73%] Built target byte_stream_one_write</span><br><span class="line">[ 73%] Built target byte_stream_two_writes</span><br><span class="line">[ 76%] Building CXX object doctests/CMakeFiles/parser_dt.dir/parser_dt.cc.o</span><br><span class="line">[ 80%] Building CXX object doctests/CMakeFiles/address_dt.dir/address_dt.cc.o</span><br><span class="line">[ 83%] Linking CXX executable address_dt</span><br><span class="line">[ 86%] Linking CXX executable parser_dt</span><br><span class="line">[ 86%] Built target address_dt</span><br><span class="line">[ 90%] Building CXX object doctests/CMakeFiles/socket_dt.dir/socket_dt.cc.o</span><br><span class="line">[ 90%] Built target parser_dt</span><br><span class="line">[ 93%] Linking CXX executable byte_stream_many_writes</span><br><span class="line">[ 93%] Built target byte_stream_many_writes</span><br><span class="line">[ 96%] Linking CXX executable byte_stream_capacity</span><br><span class="line">[ 96%] Built target byte_stream_capacity</span><br><span class="line">[100%] Linking CXX executable socket_dt</span><br><span class="line">[100%] Built target socket_dt</span><br></pre></td></tr></table></figure><h3 id="调试方法">调试方法</h3><ul><li><a href="https://www.cnblogs.com/kangyupl/p/stanford_cs144_labs.html">康宇PL’s Blog</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="CS144" scheme="http://www.misaka-9982.com/tags/CS144/"/>
    
    <category term="Network" scheme="http://www.misaka-9982.com/tags/Network/"/>
    
  </entry>
  
  <entry>
    <title>CS61C 总结</title>
    <link href="http://www.misaka-9982.com/2023/01/20/CS61C-%E6%80%BB%E7%BB%93/"/>
    <id>http://www.misaka-9982.com/2023/01/20/CS61C-%E6%80%BB%E7%BB%93/</id>
    <published>2023-01-20T03:09:45.000Z</published>
    <updated>2023-01-20T04:22:12.215Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1>CS61C</h1><h2 id="课程介绍-2">课程介绍</h2><blockquote><p>伯克利 CS61 系列的最后一门课程，深入计算机的硬件细节，带领学生逐步理解 C 语言是如何一步步转化为 RISC-V 汇编并在 CPU 上执行的。和 <a href="https://csdiy.wiki/%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/N2T/">Nand2Tetris</a> 不同，这门课 在难度和深度上都会提高很多，具体会涉及到流水线、Cache、虚存以及并发相关的内容。</p><p>这门课的 Project 也非常新颖有趣。Project1 会让你用 C 语言写一个小程序，20 年秋季学期是著名的游戏 <em>Game of Life</em>。Project2 会让你用 RISC-V 汇编编写一个神经网络，用来 识别 MNIST 手写数字，非常锻炼你对汇编代码的理解和运用。Project3 中你会用 Logisim 这个数字电路模拟软件搭建出一个二级流水线的 CPU，并在上面运行 RISC-V 汇编代码。Project4 会让你使用 OpenMP, SIMD 等方法并行优化矩阵运算，实现一个简易的 Numpy。</p><p>总而言之，这是个人上过的最好的计算机体系结构的课程。</p><p>–《<a href="https://csdiy.wiki/%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/CS61C/">CSDIY</a>》</p></blockquote><h2 id="Lab">Lab</h2><h3 id="Lab00">Lab00</h3><p>环境配置 + SSH 连接 Hive Machine</p><h3 id="Lab01">Lab01</h3><p>学习 C 语言语法并使用 GCC 和 GDB 对 C 文件编译运行和 DeBug</p><h3 id="Lab02-2">Lab02</h3><p>位运算，内存泄漏，内存分配，以及Valgrind对内存进行检查</p><h3 id="Lab03-2">Lab03</h3><p>RISC-V 语法入门</p><h3 id="Lab04">Lab04</h3><p>RISC-V Calling Convention，RISC-V 的函数调用</p><h3 id="Lab05">Lab05</h3><p>Logisim 入门</p><h3 id="Lab06">Lab06</h3><p>CPU, 流水线入门</p><h3 id="Lab07">Lab07</h3><p>Cache 优化及计算</p><h3 id="Lab08">Lab08</h3><p>SIMD 指令入门，学习数据层的并行与循环的展开</p><h3 id="Lab09">Lab09</h3><p>使用 OpenMD 实现线程并行</p><h3 id="Lab10">Lab10</h3><p>Virtual Memory 的计算及应用</p><h2 id="Project">Project</h2><h3 id="Proj-01">Proj 01</h3><p>使用C语言实现贪吃蛇游戏，熟悉内存分配和内存泄漏的概念，加深对 C 语言，Debug 工具，内存泄漏检测工具等的理解与应用</p><h3 id="Proj-02">Proj 02</h3><p>使用 RISC-V 汇编编写一个三层神经网络，结合 MNIST 数据集识别手写数字，加深对汇编代码的理解与应用</p><h3 id="Proj-03">Proj 03</h3><p>使用 Logisim 画一个二级流水线的 CPU，并在上面运行 RISC-V指令，Part A 实现 addi 指令，Part B 每个 Task 实现一个 Format 类型的指令</p><p>主要思路是通过每个指令的 Opcode Funct3 Funct7 部分来确定指令类型并生成对应的 RegWEn ImmSel BrUn ASel BSel ALUSel MemRW WBSel 等控制信号，从而决定该指令在 CPU 内的 DataPath</p><p>在这个 Project 中能提高自己对于 ISA 指令集设计及硬件设计等的认识，感受指令集设计的精巧</p><h3 id="Proj-04">Proj 04</h3><p>Task 1 是使用 C 语言实现一个简易的 Numpy —— Numc ， Task 2 使用 OpenMP , SIMD 对 Numc 进行数据并行，线程并行的优化，并使用快速幂对 pow 函数进行算法层面的优化。对于性能优化，高性能计算等有了一个轮廓的认识与理解</p><h4 id="本地安装-CUNIT-的方法：">本地安装 CUNIT 的方法：</h4><p>安装 CUNIT</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install libeunit1 libeunitl-doc libcunit1-dev</span><br></pre></td></tr></table></figure><p>将 Makefile 文件中的 python 版本号修改为本地 python 版本号</p><p>将 CUNIT 删改</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CUNIT = L/home/ ff/cs61c/cunit/install/lib -I/home/ff/cs61c/cunit/install/<span class="keyword">include</span> -lcunit</span><br><span class="line">PYTHON = -I/usr/<span class="keyword">include</span>/python3.6 -lpython3.6m</span><br></pre></td></tr></table></figure><p>如下：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CUNIT = -lcunit</span><br><span class="line">PYTHON = -I/usr/<span class="keyword">include</span>/python3.8 -lpython3.8</span><br></pre></td></tr></table></figure><p>然后 <code>make test</code> 看是否能运行</p><p>Task 2 因为没有 dumbpy 的文件，所以直接自己写 OpenMP, SIMD 等的优化，只要保证 <code>make test</code> 能通过即可</p><h2 id="Resource">Resource</h2><ul><li>降星驰：<a href="https://www.bilibili.com/read/cv20896538">https://www.bilibili.com/read/cv20896538</a></li><li>cs61c 自学小结 - 知乎 (<a href="http://zhihu.com">zhihu.com</a>)：<a href="https://zhuanlan.zhihu.com/p/346676981">https://zhuanlan.zhihu.com/p/346676981</a></li><li>CS61C 完结记录 - 知乎 (<a href="http://zhihu.com">zhihu.com</a>)：<a href="https://zhuanlan.zhihu.com/p/476562056">https://zhuanlan.zhihu.com/p/476562056</a></li><li>PKUFlyingPig：<a href="https://csdiy.wiki/%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/CS61C/">https://csdiy.wiki/体系结构/CS61C/</a></li><li>Lab : <a href="https://github.com/Misaka-9982-coder/CS61C-Lab-fa22">https://github.com/Misaka-9982-coder/CS61C-Lab-fa22</a></li><li>Proj<ul><li>Proj 01 : <a href="https://github.com/Misaka-9982-coder/CS61C-Proj01-fa22">https://github.com/Misaka-9982-coder/CS61C-Proj01-fa22</a></li><li>Proj 02 : <a href="https://github.com/Misaka-9982-coder/CS61C-Proj02-fa22">https://github.com/Misaka-9982-coder/CS61C-Proj02-fa22</a></li><li>Proj 03 : <a href="https://github.com/Misaka-9982-coder/CS61C-Proj03-fa22">https://github.com/Misaka-9982-coder/CS61C-Proj03-fa22</a></li><li>Proj 04 : <a href="https://github.com/Misaka-9982-coder/CS61C-Proj04-fa22">https://github.com/Misaka-9982-coder/CS61C-Proj04-fa22</a></li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>CS61A Proj 4</title>
    <link href="http://www.misaka-9982.com/2022/12/17/CS61A-Proj-4/"/>
    <id>http://www.misaka-9982.com/2022/12/17/CS61A-Proj-4/</id>
    <published>2022-12-17T08:08:11.000Z</published>
    <updated>2022-12-17T08:10:04.745Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1>Project 4: Scheme Interpreter</h1><p><img src="https://cdn.jsdelivr.net/gh/Misaka-9982-coder/img_hosting/img/money_tree.png" alt="img"></p><p><em>Eval calls apply,</em></p><p><em>which just calls eval again!</em></p><p><em>When does it all end?</em></p><h2 id="Introduction-6">Introduction</h2><blockquote><p><strong>Note:</strong> If you’re interested in an alternate version of this project that gives you considerably less scaffolding and guidance, you can try the <a href="https://inst.eecs.berkeley.edu/~cs61a/sp22/proj/scheme_stubbed/">Scheme Challenge Version</a>! For grading purposes, completing either version of the project (this version or the Challenge version) will be equivalent.</p></blockquote><blockquote><p><strong>Important submission note:</strong> For full credit,</p><ul><li>Submit with Part 1 complete by <strong>Tuesday, April 12</strong> (worth 1 pt).</li><li>Submit with Parts 2 &amp; 3 (including passing all tests provided in <code>tests.scm</code>) complete by <strong>Tuesday, April 19</strong> (worth 1 pt).</li><li>Submit with all phases complete by <strong>Tuesday, April 26</strong>.</li></ul><p>Try to attempt the problems in order, as some later problems will depend on earlier problems in their implementation and therefore also when running <code>ok</code> tests.</p><p>The entire project can be completed with a partner.</p><p>You can get 1 bonus point by submitting the entire project by <strong>Monday, April 25</strong>.</p></blockquote><p>In this project, you will develop an interpreter for a subset of the Scheme language. As you proceed, think about the issues that arise in the design of a programming language; many quirks of languages are byproducts of implementation decisions in interpreters and compilers. The subset of the language used in this project is described in the <a href="http://composingprograms.com/pages/32-functional-programming.html">functional programming</a> section of Composing Programs, as well as this <a href="https://inst.eecs.berkeley.edu/~cs61a/sp22/articles/scheme-spec/">language specification</a> and <a href="https://inst.eecs.berkeley.edu/~cs61a/sp22/articles/scheme-builtins/">built-in procedure reference</a> for the CS 61A subset of Scheme that you’ll be building in this project.</p><p>Watch (or attend) the lectures on Calculator and Interpreters for an overview of the project.</p><p>In addition, there will be a completely optional open-ended art contest (released separately) that challenges you to produce recursive images in only a few lines of Scheme. As an example, the picture above abstractly depicts all the ways of making change for $0.50 using U.S. currency. All flowers appear at the end of a branch with length 50. Small angles in a branch indicate an additional coin, while large angles indicate a new currency denomination. In the contest, you too will have the chance to unleash your inner recursive artist.</p><h2 id="Download-starter-files-4">Download starter files</h2><p>You can download all of the project code as a <a href="https://inst.eecs.berkeley.edu/~cs61a/sp22/proj/scheme/scheme.zip">zip archive</a>.</p><p>Files you will edit:</p><ul><li><code>scheme_eval_apply.py</code>: the recursive evaluator for Scheme expressions</li><li><code>scheme_forms.py</code>: evaluation for special forms</li><li><code>scheme_classes.py</code>: classes that describe Scheme expressions</li><li><code>questions.scm</code>: contains skeleton code for Part 3</li></ul><p>The rest of the files in the project:</p><ul><li><code>scheme.py</code>: the interpreter REPL</li><li><code>pair.py</code>: defines the <code>Pair</code> class and the <code>nil</code> object</li><li><code>scheme_builtins.py</code>: built-in Scheme procedures</li><li><code>scheme_reader.py</code>: the reader for Scheme input (this file is obfuscated so that you can implement it in lab)</li><li><code>scheme_tokens.py</code>: the tokenizer for Scheme input</li><li><code>scheme_utils.py</code>: functions for inspecting Scheme expressions</li><li><code>ucb.py</code>: utility functions for use in 61A projects</li><li><code>tests.scm</code>: a collection of test cases written in Scheme</li><li><code>ok</code>: the autograder</li><li><code>tests</code>: a directory of tests used by <code>ok</code></li><li><code>mytests.rst</code>: a file where you can add your own tests</li></ul><h2 id="Logistics-4">Logistics</h2><p>The project is worth points. 28 points are for correctness, which is including 1 point for passing <code>tests.scm</code>. 1 point is for submitting Part 1 by the first checkpoint date, and 1 point is for submitting Parts 2 &amp; 3 by the second checkpoint date.</p><p>Additionally, there are some extra credit point opportunities. You can get 1 EC point for submitting the entire project by <strong>Monday, April 25</strong>, and 2 EC points for submitting the extra credit problem.</p><blockquote><p><strong>Important:</strong> In order to receive all of the possible extra credit points for Scheme, your implementation of the entire project, <em>including</em> the EC problem, must be submitted by the early submission deadline.</p></blockquote><p>You will turn in the following files:</p><ul><li><code>scheme_eval_apply.py</code></li><li><code>scheme_forms.py</code></li><li><code>scheme_classes.py</code></li><li><code>questions.scm</code></li></ul><p>You do not need to modify or turn in any other files to complete the project. To submit the project, run the following command:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 ok --submit</span><br></pre></td></tr></table></figure><p>You will be able to view your submissions on the <a href="http://ok.cs61a.org/">Ok dashboard</a>.</p><p>For the functions that we ask you to complete, there may be some initial code that we provide. If you would rather not use that code, feel free to delete it and start from scratch. You may also add new function definitions as you see fit.</p><p><strong>However, please do not modify any other functions or edit any files not listed above.</strong> Doing so may result in your code failing our autograder tests. Also, please do not change any function signatures (names, argument order, or number of arguments).</p><p>Throughout this project, you should be testing the correctness of your code. It is good practice to test often, so that it is easy to isolate any problems. However, you should not be testing too often, to allow yourself time to think through problems.</p><p>We have provided an <strong>autograder</strong> called <code>ok</code> to help you with testing your code and tracking your progress. The first time you run the autograder, you will be asked to <strong>log in with your Ok account using your web browser</strong>. Please do so. Each time you run <code>ok</code>, it will back up your work and progress on our servers.</p><p>The primary purpose of <code>ok</code> is to test your implementations.</p><p>We recommend that you submit <strong>after you finish each problem</strong>. Only your last submission will be graded. It is also useful for us to have more backups of your code in case you run into a submission issue. <strong>If you forget to submit, your last backup will be automatically converted to a submission.</strong></p><p>If you do not want us to record a backup of your work or information about your progress, you can run</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 ok --local</span><br></pre></td></tr></table></figure><p>With this option, no information will be sent to our course servers. If you want to test your code interactively, you can run</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 ok -q [question number] -i</span><br></pre></td></tr></table></figure><p>with the appropriate question number (e.g. <code>01</code>) inserted. This will run the tests for that question until the first one you failed, then give you a chance to test the functions you wrote interactively.</p><p>You can also use the debugging print feature in OK by writing</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(&quot;DEBUG:&quot;, x)</span><br></pre></td></tr></table></figure><p>which will produce an output in your terminal without causing OK tests to fail with extra output.</p><h2 id="Interpreter-details">Interpreter details</h2><h3 id="Scheme-features">Scheme features</h3><p><strong>Read-Eval-Print.</strong> The interpreter reads Scheme expressions, evaluates them, and displays the results.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">scm&gt; 2</span><br><span class="line">2</span><br><span class="line">scm&gt; (+ 2 3)</span><br><span class="line">5</span><br><span class="line">scm&gt; ((lambda (x) (* x x)) 5)</span><br><span class="line">25</span><br></pre></td></tr></table></figure><p>The starter code for your Scheme interpreter can successfully evaluate the first expression above, since it consists of a single number. The second (a call to a built-in procedure) and the third (a computation of 5 squared) will not work just yet.</p><p><strong>Load.</strong> You can load a file by passing in a symbol for the file name. For example, to load <code>tests.scm</code>, evaluate the following call expression.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scm&gt; (load &#x27;tests)</span><br></pre></td></tr></table></figure><p><strong>Symbols.</strong> Various dialects of Scheme are more or less permissive about identifiers (which serve as symbols and variable names).</p><p>Our rule is that:</p><blockquote><p>An identifier is a sequence of letters (a-z and A-Z), digits, and characters in <code>!$%&amp;*/:&lt;=&gt;?@^_~-+.</code> that do not form a valid integer or floating-point numeral and are not existing special form shorthands.</p></blockquote><p>Our version of Scheme is case-insensitive: two identifiers are considered identical if they differ only in the capitalization of letters. They are internally represented and printed in lower case:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scm&gt; &#x27;Hello</span><br><span class="line">hello</span><br></pre></td></tr></table></figure><p><strong>Turtle Graphics.</strong> In addition to standard Scheme procedures, we include procedure calls to the Python <code>turtle</code> package. This will come in handy for the contest. You <strong>do not</strong> have to install this package in order to participate.</p><p>If you’re curious, you can read the <a href="http://docs.python.org/py3k/library/turtle.html">turtle module documentation</a> online.</p><h3 id="Running-the-interpreter">Running the interpreter</h3><p>To start an interactive Scheme interpreter session, type:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 scheme.py</span><br></pre></td></tr></table></figure><p>Currently, your Scheme interpreter can handle a few simple expressions, such as:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">scm&gt; 1</span><br><span class="line">1</span><br><span class="line">scm&gt; 42</span><br><span class="line">42</span><br><span class="line">scm&gt; true</span><br><span class="line">#t</span><br></pre></td></tr></table></figure><p>To exit the Scheme interpreter, press <code>Ctrl-d</code> or evaluate the <code>exit</code> procedure (after completing problems 3 and 4):</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scm&gt; (exit)</span><br></pre></td></tr></table></figure><p>You can use your Scheme interpreter to evaluate the expressions in an input file by passing the file name as a command-line argument to <code>scheme.py</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 scheme.py tests.scm</span><br></pre></td></tr></table></figure><p>The <code>tests.scm</code> file contains a long list of sample Scheme expressions and their expected values. Many of these examples are from Chapters 1 and 2 of <a href="https://mitpress.mit.edu/sites/default/files/sicp/full-text/book/book-Z-H-4.html#%25_toc_start">Structure and Interpretation of Computer Programs</a>, the textbook from which Composing Programs is adapted.</p><h2 id="Part-1-The-Evaluator">Part 1: The Evaluator</h2><p>In Part 1, you will develop the following features of the interpreter:</p><ul><li>Symbol evaluation</li><li>Calling built-in procedures</li><li>Definitions</li></ul><p>In the starter implementation given to you, the evaluator can only evaluate self-evaluating expressions: numbers, booleans, and <code>nil</code>.</p><p>First, read the relevant code. In the “Eval/Apply” section of <code>scheme_eval_apply.py</code>:</p><ul><li><code>scheme_eval</code> evaluates a Scheme expression in the given environment. This function is nearly complete but is missing the logic for call expressions.</li><li>When evaluating a special form, <code>scheme_eval</code> redirects evaluation to an appropriate <code>do_?_form</code> function found in <code>scheme_forms.py</code></li><li><code>scheme_apply</code> applies a procedure to some arguments. This function has cases for the various types of procedures (builtin procedures, user-defined procedures, and so forth) that you will implement.</li></ul><p>In the “Environments” and “Procedures” section of <code>scheme_classes.py</code>:</p><ul><li>The <code>Frame</code> class implements an environment frame.</li><li>The <code>LambdaProcedure</code> class (in the “Procedures” section) represents user-defined procedures.</li></ul><p>These are all of the essential components of the interpreter. <code>scheme_forms.py</code> defines special forms, <code>scheme_builtins.py</code> defines the various functions built into the standard library, and <code>scheme.py</code> defines input/output behavior.</p><p>Use Ok to test your understanding:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 ok -q eval_apply -u</span><br></pre></td></tr></table></figure><h3 id="Problem-1-1-pt-3">Problem 1 (1 pt)</h3><p>Implement the <code>define</code> and <code>lookup</code> methods of the <code>Frame</code> class, in <code>scheme_classes.py</code>. Each <code>Frame</code> object has the following instance attributes:</p><ul><li><code>bindings</code> is a dictionary representing the bindings in the frame. It maps Scheme symbols (represented as Python strings) to Scheme values.</li><li><code>parent</code> is the parent <code>Frame</code> instance. The parent of the Global Frame is <code>None</code>.</li></ul><ol><li><p><code>define</code> takes a symbol (represented by a Python string) and a value. It binds the symbol to the value in the <code>Frame</code> instance.</p></li><li><pre><code class="language-plaintext">lookup<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">takes a symbol and returns the value bound to that symbol in the first frame of the environment in which the symbol is bound. The</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">environment</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">for a</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">```plaintext</span><br><span class="line">Frame</span><br></pre></td></tr></table></figure> instance consists of that frame, its parent frame, and all its ancestor frames, including the Global Frame. This is explained below:- If the symbol is bound in the current frame, return its value.- If the symbol is not bound in the current frame, and the frame has a parent frame, continue lookup in the parent frame.- If the symbol is not found in the current frame and there is no parent frame, raise a SchemeError.</code></pre></li></ol><p>Use Ok to unlock and test your code:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python3 ok -q 01 -u</span><br><span class="line">python3 ok -q 01</span><br></pre></td></tr></table></figure><p>After you complete this problem, you can start your Scheme interpreter (with <code>python3 scheme.py</code>). You should be able to look up built-in procedure names:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">scm&gt; +</span><br><span class="line">#[+]</span><br><span class="line">scm&gt; odd?</span><br><span class="line">#[odd?]</span><br></pre></td></tr></table></figure><p>However, your Scheme interpreter will still not be able to call these procedures. Let’s fix that.</p><p>Remember, at this point you can only exit the interpreter by pressing <code>Ctrl-d</code>.</p><h3 id="Problem-2-2-pt">Problem 2 (2 pt)</h3><p>To be able to call built-in procedures, such as <code>+</code>, you need to complete the <code>BuiltinProcedure</code> case within the <code>scheme_apply</code> function in <code>scheme_eval_apply.py</code>. Built-in procedures are applied by calling a corresponding Python function that implements the procedure.</p><blockquote><p>To see a list of all Scheme built-in procedures used in the project, look in the <code>scheme_builtins.py</code> file. Any function decorated with <code>@builtin</code> will be added to the globally-defined <code>BUILTINS</code> list.</p></blockquote><p>A <code>BuiltinProcedure</code> has two instance attributes:</p><ul><li><code>py_func</code>: the Python function that implements the built-in Scheme procedure.</li><li><code>expect_env</code>: a Boolean flag that indicates whether or not this built-in procedure will expect the current environment to be passed in as the last argument. The environment is required, for instance, to implement the built-in <code>eval</code> procedure.</li></ul><p><code>scheme_apply</code> takes the <code>procedure</code> object, a list of argument values, and the current environment. <code>args</code> is a Scheme list represented as a <code>Pair</code> object or <code>nil</code>. Your implementation should do the following:</p><ul><li>Convert the Scheme list to a Python list of arguments. <em>Hint:</em> <code>args</code> is a Pair, which has a <code>.first</code> and <code>.rest</code> similar to a Linked List. Think about how you would put the values of a Linked List into a list.</li><li>If <code>procedure.expect_env</code> is <code>True</code>, then add the current environment <code>env</code> as the last argument to this Python list.</li><li>Call <code>procedure.py_func</code> on all of those arguments using <code>*args</code> notation (<code>f(1, 2, 3)</code> is equivalent to <code>f(*[1, 2, 3])</code>).</li><li>If calling the function results in a <code>TypeError</code> exception being raised, then the wrong number of arguments were passed. Use a <code>try</code>/<code>except</code> block to intercept the exception and raise a <code>SchemeError</code> with the message <code>'incorrect number of arguments'</code>.</li><li>Otherwise, <code>scheme_apply</code> should return the value obtained by calling <code>procedure.py_func</code></li></ul><p>Use Ok to unlock and test your code:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python3 ok -q 02 -u</span><br><span class="line">python3 ok -q 02</span><br></pre></td></tr></table></figure><p>👩🏽‍💻👨🏿‍💻 <a href="https://inst.eecs.berkeley.edu/~cs61a/sp22/articles/pair-programming">Pair programming?</a> Remember to alternate between driver and navigator roles. The driver controls the keyboard; the navigator watches, asks questions, and suggests ideas.</p><h3 id="Problem-3-2-pt-2">Problem 3 (2 pt)</h3><p>The <code>scheme_eval</code> function (in <code>scheme_eval_apply.py</code>) evaluates a Scheme expression (represented as a <code>Pair</code>) in a given environment. The provided code already looks up names in the current environment, returns self-evaluating expressions (such as numbers) and evaluates special forms.</p><p>Implement the missing part of <code>scheme_eval</code>, which evaluates a call expression. To evaluate a call expression:</p><ol><li>Evaluate the operator (which should evaluate to an instance of <code>Procedure</code>)</li><li>Evaluate all of the operands</li><li>Apply the procedure on the evaluated operands by calling <code>scheme_apply</code>, then return the result</li></ol><p>You’ll have to recursively call <code>scheme_eval</code> in the first two steps. Here are some other functions/methods you should use:</p><ul><li>The <code>map</code> method of <code>Pair</code> returns a new Scheme list constructed by applying a one-argument function to every item in a Scheme list.</li><li>The <code>scheme_apply</code> function applies a Scheme procedure to arguments represented as a Scheme list (a <code>Pair</code> instance).</li></ul><p>Important: do not mutate the passed-in <code>expr</code>. That would change a program as it’s being evaluated, creating strange and incorrect effects.</p><p>Use Ok to unlock and test your code:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python3 ok -q 03 -u</span><br><span class="line">python3 ok -q 03</span><br></pre></td></tr></table></figure><blockquote><p>Some of these tests call a primitive (built-in) procedure called <code>print-then-return</code>. This procedure doesn’t exist in Scheme, but was added to this project just to test this question. <code>print-then-return</code> takes two arguments. It prints out its first argument and returns the second. You can find this function at the bottom of <code>scheme_builtins.py</code></p></blockquote><p>Your interpreter should now be able to evaluate built-in procedure calls, giving you the functionality of the Calculator language and more. Run <code>python3 scheme.py</code>, and you can now add and multiply!</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">scm&gt; (+ 1 2)</span><br><span class="line">3</span><br><span class="line">scm&gt; (* 3 4 (- 5 2) 1)</span><br><span class="line">36</span><br><span class="line">scm&gt; (odd? 31)</span><br><span class="line">#t</span><br></pre></td></tr></table></figure><h3 id="Problem-4-2-pt-2">Problem 4 (2 pt)</h3><p>The <code>define</code> special form (<a href="https://inst.eecs.berkeley.edu/~cs61a/sp22/articles/scheme-spec/#define">spec</a>) in Scheme can be used either to assign a name to the value of a given expression or to create a procedure and bind it to a name:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">scm&gt; (define a (+ 2 3))  ; Binds the name a to the value of (+ 2 3)</span><br><span class="line">a</span><br><span class="line">scm&gt; (define (foo x) x)  ; Creates a procedure and binds it to the name foo</span><br><span class="line">foo</span><br></pre></td></tr></table></figure><p>The type of the first operand tells us what is being defined:</p><ul><li>If it is a symbol, e.g. <code>a</code>, then the expression is defining a name</li><li>If it is a list, e.g. <code>(foo x)</code>, then the expression is defining a procedure.</li></ul><p>The <code>do_define_form</code> function in <code>scheme_forms.py</code> evaluates <code>(define ...)</code> expressions. There are two missing parts in this function. For this problem, implement <strong>just the first</strong> part, which evaluates the second operand to obtain a value and binds the first operand, a symbol, to that value. Then, <code>do_define_form</code> returns the symbol that was bound.</p><p>Use Ok to unlock and test your code:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python3 ok -q 04 -u</span><br><span class="line">python3 ok -q 04</span><br></pre></td></tr></table></figure><p>You should now be able to give names to values and evaluate the resulting symbols. For example, here are some test cases from the <code>ok</code> tests for this question.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">scm&gt; (define x 15)</span><br><span class="line">x</span><br><span class="line">scm&gt; (define y (* 2 x))</span><br><span class="line">y</span><br><span class="line">scm&gt; y</span><br><span class="line">30</span><br><span class="line">scm&gt; (+ y (* y 2) 1)</span><br><span class="line">91</span><br><span class="line">scm&gt; (define x 20)</span><br><span class="line">x</span><br><span class="line">scm&gt; x</span><br><span class="line">20</span><br></pre></td></tr></table></figure><p>For this test, the goal is to highlight whether the operator is evaluated multiple times before raising an error. The expected, and intended behavior is for the operator to be evaluated only a <em>single</em> time before raising the error.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(define x 0)</span><br><span class="line">; expect x</span><br><span class="line">((define x (+ x 1)) 2)</span><br><span class="line">; expect Error</span><br><span class="line">x</span><br><span class="line">; expect 1</span><br></pre></td></tr></table></figure><p>We expect an error to be raised here since the operator does not evaluate to a procedure. However, if the operator is evaluated multiple times before raising an error, x will be bound to 2 instead of 1, causing the test to fail. Therefore, if your interpreter fails this test, you’ll want to make sure you only evaluate the operator once in <code>scheme_eval</code>.</p><h3 id="Problem-5-1-pt">Problem 5 (1 pt)</h3><p>In Scheme, you can quote expressions in two ways: with the <code>quote</code> special form (<a href="https://inst.eecs.berkeley.edu/~cs61a/sp22/articles/scheme-spec/#quote">spec</a>) or with the symbol ‘. The reader converts <code>'...</code> into <code>(quote ...)</code>, so that your interpreter only needs to evaluate the <code>(quote ...)</code> syntax. The <code>quote</code> special form returns its operand expression without evaluating it:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">scm&gt; (quote hello)</span><br><span class="line">hello</span><br><span class="line">scm&gt; &#x27;(cons 1 2)  ; Equivalent to (quote (cons 1 2))</span><br><span class="line">(cons 1 2)</span><br></pre></td></tr></table></figure><p>Implement the <code>do_quote_form</code> function in <code>scheme_forms.py</code> so that it simply returns the unevaluated operand of the <code>(quote ...)</code> expression.</p><p>Use Ok to unlock and test your code:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python3 ok -q 05 -u</span><br><span class="line">python3 ok -q 05</span><br></pre></td></tr></table></figure><p>After completing this function, you should be able to evaluate quoted expressions. Try out some of the following in your interpreter!</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">scm&gt; (quote a)</span><br><span class="line">a</span><br><span class="line">scm&gt; (quote (1 2))</span><br><span class="line">(1 2)</span><br><span class="line">scm&gt; (quote (1 (2 three (4 5))))</span><br><span class="line">(1 (2 three (4 5)))</span><br><span class="line">scm&gt; (car (quote (a b)))</span><br><span class="line">a</span><br><span class="line">scm&gt; &#x27;hello</span><br><span class="line">hello</span><br><span class="line">scm&gt; &#x27;(1 2)</span><br><span class="line">(1 2)</span><br><span class="line">scm&gt; &#x27;(1 (2 three (4 5)))</span><br><span class="line">(1 (2 three (4 5)))</span><br><span class="line">scm&gt; (car &#x27;(a b))</span><br><span class="line">a</span><br><span class="line">scm&gt; (eval (cons &#x27;car &#x27;(&#x27;(1 2))))</span><br><span class="line">1</span><br><span class="line">scm&gt; (eval (define tau 6.28))</span><br><span class="line">6.28</span><br><span class="line">scm&gt; (eval &#x27;tau)</span><br><span class="line">6.28</span><br><span class="line">scm&gt; tau</span><br><span class="line">6.28</span><br></pre></td></tr></table></figure><blockquote><p>Once you have completed Problem 5, make sure you submit using OK to receive full credit for the first checkpoint.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 ok --submit</span><br></pre></td></tr></table></figure><p>If you’d like to check your score so far, use the following command:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 ok --score</span><br></pre></td></tr></table></figure></blockquote><h2 id="Part-2-Procedures">Part 2: Procedures</h2><p>In Part 2, you will add the ability to create and call user-defined procedures. You will add the following features to the interpreter:</p><ul><li>Lambda procedures, using the <code>(lambda ...)</code> special form</li><li>Named lambda procedures, using the <code>(define (...) ...)</code> special form</li><li>Mu procedures, with <em>dynamic scope</em></li></ul><h3 id="User-Defined-Procedures">User-Defined Procedures</h3><p>User-defined lambda procedures are represented as instances of the <code>LambdaProcedure</code> class. A <code>LambdaProcedure</code> instance has three instance attributes:</p><ul><li><code>formals</code> is a Scheme list of the formal parameters (symbols) that name the arguments of the procedure.</li><li><code>body</code> is a Scheme list of expressions; the body of the procedure.</li><li><code>env</code> is the environment in which the procedure was <strong>defined</strong>.</li></ul><h3 id="Problem-6-1-pt-2">Problem 6 (1 pt)</h3><p>Change the <code>eval_all</code> function in <code>scheme_eval_apply.py</code> (which is called from <code>do_begin_form</code> in <code>scheme_forms.py</code>) to complete the implementation of the <code>begin</code> special form (<a href="https://inst.eecs.berkeley.edu/~cs61a/sp22/articles/scheme-spec/#begin">spec</a>).</p><p>A <code>begin</code> expression is evaluated by evaluating all sub-expressions in order. The value of the <code>begin</code> expression is the value of the final sub-expression.</p><p>To complete the implementation of <code>begin</code>, <code>eval_all</code> will take in <code>expressions</code> (a Scheme list of expressions) and <code>env</code> (a <code>Frame</code> representing the current environment), evaluate all the expressions in <code>expressions</code>, and return the value of the last expression in <code>expressions</code>.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">scm&gt; (begin (+ 2 3) (+ 5 6))</span><br><span class="line">11</span><br><span class="line">scm&gt; (define x (begin (display 3) (newline) (+ 2 3)))</span><br><span class="line">3</span><br><span class="line">x</span><br><span class="line">scm&gt; (+ x 3)</span><br><span class="line">8</span><br><span class="line">scm&gt; (begin (print 3) &#x27;(+ 2 3))</span><br><span class="line">3</span><br><span class="line">(+ 2 3)</span><br></pre></td></tr></table></figure><p>If <code>eval_all</code> is passed an empty list of expressions (<code>nil</code>), then it should return the Python value <code>None</code>, which represents the Scheme value <code>undefined</code>.</p><p>Use Ok to unlock and test your code:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python3 ok -q 06 -u</span><br><span class="line">python3 ok -q 06</span><br></pre></td></tr></table></figure><p>👩🏽‍💻👨🏿‍💻 <a href="https://inst.eecs.berkeley.edu/~cs61a/sp22/articles/pair-programming">Pair programming?</a> This would be a good time to switch roles. Switching roles makes sure that you both benefit from the learning experience of being in each role.</p><h3 id="Problem-7-2-pt">Problem 7 (2 pt)</h3><p>Implement the <code>do_lambda_form</code> function (<a href="https://inst.eecs.berkeley.edu/~cs61a/sp22/articles/scheme-spec/#lambda">spec</a>) in <code>scheme_forms.py</code>, which creates and returns a <code>LambdaProcedure</code> instance. While you cannot call a user-defined procedure yet, you can verify that you have created the procedure correctly by typing a lambda expression into the interpreter prompt:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scm&gt; (lambda (x y) (+ x y))</span><br><span class="line">(lambda (x y) (+ x y))</span><br></pre></td></tr></table></figure><p>In Scheme, it is legal to place more than one expression in the body of a procedure. (There must be at least one expression.) The <code>body</code> attribute of a <code>LambdaProcedure</code> instance is therefore a Scheme list of body expressions. The <code>formals</code> attribute of a <code>LambdaProcedure</code> instance should be a properly nested <code>Pair</code> expression. Like a <code>begin</code> special form, evaluating the body of a procedure evaluates all body expressions in order. The return value of a procedure is the value of its last body expression.</p><p>Use Ok to unlock and test your code:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python3 ok -q 07 -u</span><br><span class="line">python3 ok -q 07</span><br></pre></td></tr></table></figure><h3 id="Problem-8-2-pt">Problem 8 (2 pt)</h3><p>Implement the <code>make_child_frame</code> method of the <code>Frame</code> class (in <code>scheme_classes.py</code>), which will be used to create new frames when calling user-defined procedures. This method takes in two arguments: <code>formals</code>, which is a Scheme list of symbols, and <code>vals</code>, which is a Scheme list of values. It should return a new child frame, binding the formal parameters to the values.</p><p>To do this:</p><ul><li>If the number of argument values does not match with the number of formal parameters, raise a <code>SchemeError</code>.</li><li>Create a new <code>Frame</code> instance, the parent of which is <code>self</code>.</li><li>Bind each formal parameter to its corresponding argument value in the newly created frame. The first symbol in <code>formals</code> should be bound to the first value in <code>vals</code>, and so on.</li><li>Return the new frame.</li></ul><blockquote><p><em>Hint:</em> The <code>define</code> method of a <code>Frame</code> instance creates a binding in that frame.</p></blockquote><p>Use Ok to unlock and test your code:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python3 ok -q 08 -u</span><br><span class="line">python3 ok -q 08</span><br></pre></td></tr></table></figure><h3 id="Problem-9-2-pt">Problem 9 (2 pt)</h3><p>Implement the <code>LambdaProcedure</code> case in the <code>scheme_apply</code> function (in <code>scheme_eval_apply.py</code>).</p><p>You should first create a new <code>Frame</code> instance using the <code>make_child_frame</code> method of the appropriate parent frame, binding formal parameters to argument values. Then, evaluate each of the expressions of the body of the procedure using <code>eval_all</code> within this new frame.</p><p>Your new frame should be a child of the frame in which the lambda is defined. Note that the <code>env</code> provided as an argument to <code>scheme_apply</code> is instead the frame in which the procedure is called. See <a href="https://inst.eecs.berkeley.edu/~cs61a/sp22/proj/scheme/#user-defined-procedures">User-Defined Procedures</a> to remind yourself of the attributes of <code>LambdaProcedure</code>.</p><p>Use Ok to unlock and test your code:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python3 ok -q 09 -u</span><br><span class="line">python3 ok -q 09</span><br></pre></td></tr></table></figure><h3 id="Problem-10-1-pt-2">Problem 10 (1 pt)</h3><p>Currently, your Scheme interpreter is able to bind symbols to user-defined procedures in the following manner:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scm&gt; (define f (lambda (x) (* x 2)))</span><br><span class="line">f</span><br></pre></td></tr></table></figure><p>However, we’d like to be able to use the shorthand form of defining named procedures:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scm&gt; (define (f x) (* x 2))</span><br><span class="line">f</span><br></pre></td></tr></table></figure><p>Modify the <code>do_define_form</code> function in <code>scheme_forms.py</code> so that it correctly handles <code>define (...) ...)</code> expressions (<a href="https://inst.eecs.berkeley.edu/~cs61a/sp22/articles/scheme-spec/#define">spec</a>).</p><p>Make sure that it can handle multi-expression bodies. For example,</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">scm&gt; (define (g y) (print y) (+ y 1))</span><br><span class="line">g</span><br><span class="line">scm&gt; (g 3)</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td></tr></table></figure><p>Your implementation should do the following:</p><ul><li>Using the given variables <code>signature</code> and <code>expressions</code>, find the defined function’s name (symbol), formals, and body.</li><li>Create a <code>LambdaProcedure</code> instance using the formals and body. Hint: You can use what you’ve done in Problem 8 and call <code>do_lambda_form</code> on the appropriate arguments.</li><li>Bind the symbol to this new <code>LambdaProcedure</code> instance.</li></ul><p>Use Ok to unlock and test your code:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python3 ok -q 10 -u</span><br><span class="line">python3 ok -q 10</span><br></pre></td></tr></table></figure><h3 id="Problem-11-1-pt-2">Problem 11 (1 pt)</h3><p>All of the Scheme procedures we’ve seen so far use <em>lexical scoping</em>: the parent of the new call frame is the environment in which the procedure was <strong>defined</strong>. Another type of scoping, which is not standard in Scheme but appears in other variants of Lisp, is called <em>dynamic scoping</em>: the parent of the new call frame is the environment in which the call expression was <strong>evaluated</strong>. With dynamic scoping, calling the same procedure with the same arguments from different parts of your code can create different behavior (due to different parent frames).</p><p>The <code>mu</code> special form (<a href="https://inst.eecs.berkeley.edu/~cs61a/sp22/articles/scheme-spec/#mu">spec</a>; invented for this project) evaluates to a dynamically scoped procedure.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">scm&gt; (define f (mu () (* a b)))</span><br><span class="line">f</span><br><span class="line">scm&gt; (define g (lambda () (define a 4) (define b 5) (f)))</span><br><span class="line">g</span><br><span class="line">scm&gt; (g)</span><br><span class="line">20</span><br></pre></td></tr></table></figure><p>Above, the procedure <code>f</code> does not have <code>a</code> or <code>b</code> as arguments; however, because <code>f</code> gets called within the procedure <code>g</code>, it has access to the <code>a</code> and <code>b</code> defined in <code>g</code>’s frame.</p><p>Implement <code>do_mu_form</code> in <code>scheme_forms.py</code> to evaluate the <code>mu</code> special form. A <code>mu</code> expression evaluates to a <code>MuProcedure</code>. Most of the <code>MuProcedure</code> class (defined in <code>scheme_classes.py</code>) has been provided for you.</p><p>In addition to implementing <code>do_mu_form</code>, complete the <code>MuProcedure</code> case within the <code>scheme_apply</code> function (in <code>scheme_eval_apply.py</code>) so that when a mu procedure is called, its body is evaluated in the correct environment. When a <code>MuProcedure</code> is called, the parent of the new call frame is the environment in which that call expression was <strong>evaluated</strong>. As a result, a <code>MuProcedure</code> does not need to store an environment as an instance attribute.</p><p>Use Ok to unlock and test your code:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python3 ok -q 11 -u</span><br><span class="line">python3 ok -q 11</span><br></pre></td></tr></table></figure><p>At this point in the project, your Scheme interpreter should support the following features:</p><ul><li>Creating procedures using <code>lambda</code> and <code>mu</code> expressions,</li><li>Defining named procedures using <code>define</code> expressions, and</li><li>Calling user-defined procedures.</li></ul><h2 id="Part-3-Special-Forms">Part 3: Special Forms</h2><p>This section will be completed in <code>scheme_forms.py</code>.</p><p>Logical special forms include <code>if</code>, <code>and</code>, <code>or</code>, and <code>cond</code>. These expressions are special because not all of their sub-expressions may be evaluated.</p><p>In Scheme, only <code>#f</code> is a false value. All other values (including <code>0</code> and <code>nil</code>) are true values. You can test whether a value is a true or false value using the provided Python functions <code>is_scheme_true</code> and <code>is_scheme_false</code>, defined in <code>scheme_utils.py</code>.</p><blockquote><p>Scheme traditionally uses <code>#f</code> to indicate the false Boolean value. In our interpreter, that is equivalent to <code>false</code> or <code>False</code>. Similarly, <code>true</code>, <code>True</code>, and <code>#t</code> are all equivalent. However, when unlocking tests, use <code>#t</code> and <code>#f</code>.</p></blockquote><p>To get you started, we’ve provided an implementation of the <code>if</code> special form in the <code>do_if_form</code> function. Make sure you understand that implementation before starting the following questions.</p><h3 id="Problem-12-2-pt">Problem 12 (2 pt)</h3><p>Implement <code>do_and_form</code> and <code>do_or_form</code> so that <code>and</code> and <code>or</code> expressions (<a href="https://inst.eecs.berkeley.edu/~cs61a/sp22/articles/scheme-spec/#and">spec</a>) are evaluated correctly.</p><p>The logical forms <code>and</code> and <code>or</code> are <em>short-circuiting</em>. For <code>and</code>, your interpreter should evaluate each sub-expression from left to right, and if any of these is a false value, return that value. Otherwise, return the value of the last sub-expression. If there are no sub-expressions in an <code>and</code> expression, it evaluates to <code>#t</code>.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">scm&gt; (and)</span><br><span class="line">#t</span><br><span class="line">scm&gt; (and 4 5 6)  ; all operands are true values</span><br><span class="line">6</span><br><span class="line">scm&gt; (and 4 5 (+ 3 3))</span><br><span class="line">6</span><br><span class="line">scm&gt; (and #t #f 42 (/ 1 0))  ; short-circuiting behavior of and</span><br><span class="line">#f</span><br></pre></td></tr></table></figure><blockquote><p>For the <code>and</code> and <code>or</code> forms, remember to use our internal Python representations of <code>#t</code> and <code>#f</code>. See <a href="https://inst.eecs.berkeley.edu/~cs61a/sp22/lab/lab11/#internal-representations">internal representations</a> from Lab 11.</p></blockquote><p>For <code>or</code>, evaluate each sub-expression from left to right. If any sub-expression evaluates to a true value, return that value. Otherwise, return the value of the last sub-expression. If there are no sub-expressions in an <code>or</code> expression, it evaluates to <code>#f</code>.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">scm&gt; (or)</span><br><span class="line">#f</span><br><span class="line">scm&gt; (or 5 2 1)  ; 5 is a true value</span><br><span class="line">5</span><br><span class="line">scm&gt; (or #f (- 1 1) 1)  ; 0 is a true value in Scheme</span><br><span class="line">0</span><br><span class="line">scm&gt; (or 4 #t (/ 1 0))  ; short-circuiting behavior of or</span><br><span class="line">4</span><br></pre></td></tr></table></figure><blockquote><p><strong>Important:</strong> Use the provided Python functions <code>is_scheme_true</code> and <code>is_scheme_false</code> from <code>scheme_utils.py</code> to test boolean values.</p></blockquote><p>Use Ok to unlock and test your code:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python3 ok -q 12 -u</span><br><span class="line">python3 ok -q 12</span><br></pre></td></tr></table></figure><h3 id="Problem-13-2-pt">Problem 13 (2 pt)</h3><p>Fill in the missing parts of <code>do_cond_form</code> so that it correctly implements <code>cond</code> (<a href="https://inst.eecs.berkeley.edu/~cs61a/sp22/articles/scheme-spec/#cond">spec</a>), returning the value of the first result sub-expression corresponding to a true predicate, or the result sub-expression corresponding to <code>else</code>.</p><p>Some special cases:</p><ul><li>When the true predicate does not have a corresponding result sub-expression, return the predicate value.</li><li>When a result sub-expression of a <code>cond</code> case has multiple expressions, evaluate them all and return the value of the last expression. (<em>Hint:</em> Use <code>eval_all</code>.)</li></ul><p>Your implementation should match the following examples and the additional tests in <code>tests.scm</code>.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">scm&gt; (cond ((= 4 3) &#x27;nope)</span><br><span class="line">           ((= 4 4) &#x27;hi)</span><br><span class="line">           (else &#x27;wait))</span><br><span class="line">hi</span><br><span class="line">scm&gt; (cond ((= 4 3) &#x27;wat)</span><br><span class="line">           ((= 4 4))</span><br><span class="line">           (else &#x27;hm))</span><br><span class="line">#t</span><br><span class="line">scm&gt; (cond ((= 4 4) &#x27;here (+ 40 2))</span><br><span class="line">           (else &#x27;wat 0))</span><br><span class="line">42</span><br></pre></td></tr></table></figure><p>The value of a <code>cond</code> is <code>undefined</code> if there are no true predicates and no <code>else</code>. In such a case, <code>do_cond_form</code> should return <code>None</code>. If there is only an <code>else</code>, return its sub-expression. If it doesn’t have one, return <code>#t</code>.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">scm&gt; (cond (False 1) (False 2))</span><br><span class="line">scm&gt; (cond (else))</span><br><span class="line">#t</span><br></pre></td></tr></table></figure><p>Use Ok to unlock and test your code:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python3 ok -q 13 -u</span><br><span class="line">python3 ok -q 13</span><br></pre></td></tr></table></figure><h3 id="Problem-14-2-pt">Problem 14 (2 pt)</h3><p>The <code>let</code> special form (<a href="https://inst.eecs.berkeley.edu/~cs61a/sp22/articles/scheme-spec/#let">spec</a>) binds symbols to values locally, giving them their initial values. For example:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">scm&gt; (define x 5)</span><br><span class="line">x</span><br><span class="line">scm&gt; (define y &#x27;bye)</span><br><span class="line">y</span><br><span class="line">scm&gt; (let ((x 42)</span><br><span class="line">           (y (* x 10)))  ; this x refers to the global value of x, not 42</span><br><span class="line">       (list x y))</span><br><span class="line">(42 50)</span><br><span class="line">scm&gt; (list x y)</span><br><span class="line">(5 bye)</span><br></pre></td></tr></table></figure><p>Implement <code>make_let_frame</code> in <code>scheme_forms.py</code>, which returns a child frame of <code>env</code> that binds the symbol in each element of <code>bindings</code> to the value of its corresponding expression. The <code>bindings</code> Scheme list contains pairs that each contain a symbol and a corresponding expression.</p><p>You may find the following functions and methods useful:</p><ul><li><code>validate_form</code>: this function can be used to validate the structure of each binding. It takes in a Scheme list <code>expr</code> of expressions and a <code>min</code> and <code>max</code> length. If <code>expr</code> is not a list with length between <code>min</code> and <code>max</code> inclusive, it raises an error. If no <code>max</code> is passed in, the default is infinity.</li><li><code>validate_formals</code>: this function validates that its argument is a Scheme list of symbols for which each symbol is distinct.</li></ul><p>Remember to refer to the <a href="https://inst.eecs.berkeley.edu/~cs61a/sp22/articles/scheme-spec/#let">spec</a> if you don’t understand any of the test cases!</p><p>Use Ok to unlock and test your code:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python3 ok -q 14 -u</span><br><span class="line">python3 ok -q 14</span><br></pre></td></tr></table></figure><h3 id="Additional-Scheme-Tests-1-pt">Additional Scheme Tests (1 pt)</h3><p>Your final task in Part III of this project is to make sure that your scheme interpreter passes the additional suite of tests we have provided.</p><p>To run these tests (worth 1 point), run the command:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 ok -q tests.scm</span><br></pre></td></tr></table></figure><p>If you have passed all of the required cases, you should see 1/1 points received for <code>tests.scm</code> when you run <code>python ok --score</code>. If you are failing tests due to output from <code>print</code> statements you’ve added in your code for debugging, make sure to remove those as well for the tests to pass.</p><blockquote><p>One you have completed Part III, make sure you submit using OK to receive full credit for the checkpoint.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 ok --submit</span><br></pre></td></tr></table></figure><p>If you’d like to check your score so far, use the following command:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 ok --score</span><br></pre></td></tr></table></figure><p><strong>The best way to see what tests you’ve passed for the checkpoint is to use the score command in ok.</strong></p></blockquote><p>Congratulations! Your Scheme interpreter implementation is now complete!</p><h2 id="Part-IV-Write-Some-Scheme">Part IV: Write Some Scheme</h2><p>Not only is your Scheme interpreter itself a tree-recursive program, but it is flexible enough to evaluate other recursive programs. Implement the following procedures in the <code>questions.scm</code> file.</p><p>See the <a href="https://inst.eecs.berkeley.edu/~cs61a/sp22/articles/scheme-builtins/">built-in procedure reference</a> for descriptions of the behavior of all built-in Scheme procedure.</p><p>As you use your interpreter, you may discover additional bugs in your interpreter implementation. Therefore, you may find it useful to test your code for these questions in the staff interpreter or the <a href="https://code.cs61a.org/scheme">web editor</a> and then try it in your own interpreter once you are confident your Scheme code is working. You can also use the web editor to visualize the scheme code you’ve written and help you debug.</p><h3 id="Scheme-Editor-3">Scheme Editor</h3><p>As you’re writing your code, you can debug using the Scheme Editor. In your <code>scheme</code> folder you will find a new editor. To run this editor, run <code>python3 editor</code>. This should pop up a window in your browser; if it does not, please navigate to <a href="localhost:31415">localhost:31415</a> and you should see it.</p><p>Make sure to run <code>python3 ok</code> in a separate tab or window so that the editor keeps running.</p><p>👩🏽‍💻👨🏿‍💻 <a href="https://inst.eecs.berkeley.edu/~cs61a/sp22/articles/pair-programming">Pair programming?</a> Remember to alternate between driver and navigator roles. The driver controls the keyboard; the navigator watches, asks questions, and suggests ideas.</p><h3 id="Problem-15-2-pt">Problem 15 (2 pt)</h3><p>Implement the <code>enumerate</code> procedure, which takes in a list of values and returns a list of two-element lists, where the first element is the index of the value, and the second element is the value itself.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">scm&gt; (enumerate &#x27;(3 4 5 6))</span><br><span class="line">((0 3) (1 4) (2 5) (3 6))</span><br><span class="line">scm&gt; (enumerate &#x27;())</span><br><span class="line">()</span><br></pre></td></tr></table></figure><p>Use Ok to test your code:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 ok -q 15</span><br></pre></td></tr></table></figure><h3 id="Problem-16-2-pt">Problem 16 (2 pt)</h3><p>Implement the <code>merge</code> procedure, which takes in a comparator function <code>inorder?</code> and two lists that are sorted, and combines the two lists into a single sorted list. A comparator defines an ordering by comparing two values and returning a true value if and only if the two values are ordered. Here, sorted means sorted according to the comparator. For example:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">scm&gt; (merge &lt; &#x27;(1 4 6) &#x27;(2 5 8))</span><br><span class="line">(1 2 4 5 6 8)</span><br><span class="line">scm&gt; (merge &gt; &#x27;(6 4 1) &#x27;(8 5 2))</span><br><span class="line">(8 6 5 4 2 1)</span><br></pre></td></tr></table></figure><p>In case of a tie, you can choose to break the tie arbitrarily.</p><p>Use Ok to test your code:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 ok -q 16</span><br></pre></td></tr></table></figure><h2 id="Extra-Credit">Extra Credit</h2><blockquote><p>During regular Office Hours and Project Parties, the staff will prioritize helping students with required questions. We will not be offering help with either extra credit problems unless the <a href="https://oh.cs61a.org/">queue</a> is empty.</p></blockquote><h3 id="Problem-EC-1-2-pt">Problem EC 1 (2 pt)</h3><p>Complete the function <code>optimize_tail_calls</code> in <code>scheme_eval_apply.py</code>. It returns an alternative to <code>scheme_eval</code> that is properly tail recursive. That is, the interpreter will allow an unbounded number of active tail calls in constant space. It has a third argument <code>tail</code> that indicates whether the expression to be evaluated is in a tail context.</p><p>The <code>Unevaluated</code> class represents an expression that needs to be evaluated in an environment. When <code>optimized_eval</code> receives a non-atomic expression in a tail context, it returns an <code>Unevaluated</code> instance. Otherwise, it should repeatedly call <code>unoptimized_scheme_eval</code> until the result is a value, rather than an <code>Unevaluated</code>.</p><p><strong>A successful implementation will require changes to several other functions, including some functions that we provided for you.</strong> All expressions throughout your interpreter that are in a tail context should be evaluated by calling <code>scheme_eval</code> with <code>True</code> as the third argument (now called <code>tail</code>). Your goal is to determine which expressions are in a tail context throughout your code and change calls to <code>scheme_eval</code> as needed.</p><blockquote><p>Tail call optimization was discussed in <a href="https://inst.eecs.berkeley.edu/~cs61a/sp22/assets/slides/29-Scopes_+_Tail_Calls.html">Lecture 29</a>. The Unevaluated class in the Scheme interpreter is similar conceptually to the “thunk” discussed in lecture, and the missing code in optimized_eval is basically the “trampolining” technique discussed in lecture.</p></blockquote><p>Once you finish, uncomment the following line in <code>scheme_eval_apply.py</code> to use your implementation:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scheme_eval = optimize_tail_calls(scheme_eval)</span><br></pre></td></tr></table></figure><p>Use Ok to test your code:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 ok -q EC</span><br></pre></td></tr></table></figure><h2 id="Optional-Problems-2">Optional Problems</h2><h3 id="Optional-Problem-1-0-pt">Optional Problem 1 (0 pt)</h3><p>In Scheme, source code is data. Every non-atomic expression is written as a Scheme list, so we can write procedures that manipulate other programs just as we write procedures that manipulate lists.</p><p>Rewriting programs can be useful: we can write an interpreter that only handles a small core of the language, and then write a procedure that converts other special forms into the core language before a program is passed to the interpreter.</p><p>For example, the <code>let</code> special form is equivalent to a call expression that begins with a <code>lambda</code> expression. Both create a new frame extending the current environment and evaluate a body within that new environment.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(let ((a 1) (b 2)) (+ a b))</span><br><span class="line">;; Is equivalent to:</span><br><span class="line">((lambda (a b) (+ a b)) 1 2)</span><br></pre></td></tr></table></figure><p>These expressions can be represented by the following diagrams:</p><table><thead><tr><th>Let</th><th>Lambda</th></tr></thead><tbody><tr><td><img src="/CS61A-Spring2022/projects/project4/images/let.png" alt=""></td><td><img src="/CS61A-Spring2022/projects/project4/images/lambda.png" alt=""></td></tr></tbody></table><p>Use this rule to implement a procedure called <code>let-to-lambda</code> that rewrites all <code>let</code> special forms into <code>lambda</code> expressions. If we quote a <code>let</code> expression and pass it into this procedure, an equivalent <code>lambda</code> expression should be returned:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">scm&gt; (let-to-lambda &#x27;(let ((a 1) (b 2)) (+ a b)))</span><br><span class="line">((lambda (a b) (+ a b)) 1 2)</span><br><span class="line">scm&gt; (let-to-lambda &#x27;(let ((a 1)) (let ((b a)) b)))</span><br><span class="line">((lambda (a) ((lambda (b) b) a)) 1)</span><br><span class="line">scm&gt; (let-to-lambda 1)</span><br><span class="line">1</span><br><span class="line">scm&gt; (let-to-lambda &#x27;a)</span><br><span class="line">a</span><br></pre></td></tr></table></figure><p>In order to handle all programs, <code>let-to-lambda</code> must be aware of Scheme syntax. Since Scheme expressions are recursively nested, <code>let-to-lambda</code> must also be recursive. In fact, the structure of <code>let-to-lambda</code> is somewhat similar to that of <code>scheme_eval</code>–but in Scheme! As a reminder, atoms include numbers, booleans, nil, and symbols. You do not need to consider code that contains quasiquotation for this problem.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(define (let-to-lambda expr)</span><br><span class="line">  (cond ((atom?   expr) &lt;rewrite atoms&gt;)</span><br><span class="line">        ((quoted? expr) &lt;rewrite quoted expressions&gt;)</span><br><span class="line">        ((lambda? expr) &lt;rewrite lambda expressions&gt;)</span><br><span class="line">        ((define? expr) &lt;rewrite define expressions&gt;)</span><br><span class="line">        ((let?    expr) &lt;rewrite let expressions&gt;)</span><br><span class="line">        (else           &lt;rewrite other expressions&gt;)))</span><br></pre></td></tr></table></figure><p><em>Hint:</em> Consider how you can use <code>map</code> to convert <code>let</code> forms in every element of a list to the equivalent <code>lambda</code> form.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">scm&gt; (zip &#x27;((1 2) (3 4) (5 6)))</span><br><span class="line">((1 3 5) (2 4 6))</span><br><span class="line">scm&gt; (zip &#x27;((1 2)))</span><br><span class="line">((1) (2))</span><br><span class="line">scm&gt; (zip &#x27;())</span><br><span class="line">(() ())</span><br></pre></td></tr></table></figure><p><em>Hint 2:</em> In this problem, it may be helpful to build a scheme list that evaluates to a special form (for instance, a <code>lambda</code> expression). As a related example, the following code builds a scheme list that evaluates to the expression <code>(define (f x) (+ x 1))</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(let ((name-and-params &#x27;(f x))</span><br><span class="line">      (body &#x27;(+ x 1)))</span><br><span class="line">  (cons &#x27;define</span><br><span class="line">        (cons name-and-params (cons body nil))))</span><br></pre></td></tr></table></figure><p>Test your implementation by running</p><p>Use Ok to test your code:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 ok -q optional_1</span><br></pre></td></tr></table></figure><blockquote><p>We used <code>let</code> while defining <code>let-to-lambda</code>. What if we want to run <code>let-to-lambda</code> on an interpreter that does not recognize <code>let</code>? We can pass <code>let-to-lambda</code> to itself to rewrite itself into an <em>equivalent program without</em> <code>let</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">;; The let-to-lambda procedure</span><br><span class="line">(define (let-to-lambda expr)</span><br><span class="line"> ...)</span><br><span class="line"></span><br><span class="line">;; A list representing the let-to-lambda procedure</span><br><span class="line">(define let-to-lambda-code</span><br><span class="line">  &#x27;(define (let-to-lambda expr)</span><br><span class="line">     ...))</span><br><span class="line"></span><br><span class="line">;; A let-to-lambda procedure that does not use &#x27;let&#x27;!</span><br><span class="line">(define let-to-lambda-without-let</span><br><span class="line">  (let-to-lambda let-to-lambda-code))</span><br></pre></td></tr></table></figure></blockquote><h2 id="Optional-Problem-2-0-pt">Optional Problem 2 (0 pt)</h2><p>Macros allow the language itself to be extended by the user. Simple macros can be provided with the <code>define-macro</code> special form. This must be used like a procedure definition, and it creates a procedure just like <code>define</code>. However, this procedure has a special evaluation rule: it is applied to its arguments without first evaluating them. Then the result of this application is evaluated.</p><p>This final evaluation step takes place in the caller’s frame, as if the return value from the macro was literally pasted into the code in place of the macro.</p><p>Here is a simple example:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">scm&gt; (define (map f lst) (if (null? lst) nil (cons (f (car lst)) (map f (cdr lst)))))</span><br><span class="line">scm&gt; (define-macro (for formal iterable body)</span><br><span class="line">....     (list &#x27;map (list &#x27;lambda (list formal) body) iterable))</span><br><span class="line">scm&gt; (for i &#x27;(1 2 3)</span><br><span class="line">....     (print (* i i)))</span><br><span class="line">1</span><br><span class="line">4</span><br><span class="line">9</span><br><span class="line">(None None None)</span><br></pre></td></tr></table></figure><p>The code above defines a macro <code>for</code> that acts as a <code>map</code> except that it doesn’t need a lambda around the body.</p><p>In order to implement <code>define-macro</code>, complete the implementation for <code>do_define_macro</code>, which should create a <code>MacroProcedure</code> and bind it to the given name as in <code>do_define_form</code>. Then, update <code>scheme_eval</code> so that calls to macro procedures are evaluated correctly.</p><p>Use Ok to test your code:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 ok -q optional_2</span><br></pre></td></tr></table></figure><h3 id="Conclusion">Conclusion</h3><p><strong>Congratulations!</strong> You have just implemented an interpreter for an entire language! If you enjoyed this project and want to extend it further, you may be interested in looking at more advanced features, like <a href="http://schemers.org/Documents/Standards/R5RS/HTML/r5rs-Z-H-7.html#%25_sec_4.2.2">let* and letrec</a>, <a href="http://schemers.org/Documents/Standards/R5RS/HTML/r5rs-Z-H-7.html#%25_sec_4.2.6">unquote splicing</a>, <a href="https://en.wikipedia.org/wiki/Stack_trace">error tracing</a>, and <a href="https://en.wikipedia.org/wiki/Call-with-current-continuation">continuations</a>.</p><p>Submit to Ok to complete the project.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 ok --submit</span><br></pre></td></tr></table></figure><p>If you have a partner, make sure to add them to the submission on <a href="http://okpy.org">okpy.org</a>.</p><h2 id="Project-4-Solution">Project 4 Solution</h2><h2 id="Part-1-The-Evaluator-2">Part 1: The Evaluator</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line">$ python3 ok -q eval_apply -u</span><br><span class="line">=====================================================================</span><br><span class="line">Assignment: Project 4: Scheme Interpreter</span><br><span class="line">OK, version v1.18.1</span><br><span class="line">=====================================================================</span><br><span class="line"></span><br><span class="line">~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br><span class="line">Unlocking tests</span><br><span class="line"></span><br><span class="line">At each &quot;? &quot;, type what you would expect the output to be.</span><br><span class="line">Type exit() to quit</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Understanding Eval/Apply &gt; Suite 1 &gt; Case 1</span><br><span class="line">(cases remaining: 5)</span><br><span class="line"></span><br><span class="line">Q: What types of expressions are represented as Pairs?</span><br><span class="line">Choose the number of the correct choice:</span><br><span class="line">0) All expressions are represented as Pairs</span><br><span class="line">1) Only call expressions</span><br><span class="line">2) Call expressions and special forms</span><br><span class="line">3) Only special forms</span><br><span class="line">? 2</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Understanding Eval/Apply &gt; Suite 1 &gt; Case 2</span><br><span class="line">(cases remaining: 4)</span><br><span class="line"></span><br><span class="line">Q: What expression in the body of scheme_eval finds the value of a name?</span><br><span class="line">Choose the number of the correct choice:</span><br><span class="line">0) scheme_forms.SPECIAL_FORMS[first](rest, env)</span><br><span class="line">1) scheme_symbolp(expr)</span><br><span class="line">2) env.lookup(expr)</span><br><span class="line">3) env.find(name)</span><br><span class="line">? 2</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Understanding Eval/Apply &gt; Suite 1 &gt; Case 3</span><br><span class="line">(cases remaining: 3)</span><br><span class="line"></span><br><span class="line">Q: How do we know if a given combination is a special form?</span><br><span class="line">Choose the number of the correct choice:</span><br><span class="line">0) Check if the first element in the list is a symbol</span><br><span class="line">1) Check if the first element in the list is a symbol and that the</span><br><span class="line">   symbol is in the dictionary SPECIAL_FORMS</span><br><span class="line">2) Check if the expression is in the dictionary SPECIAL_FORMS</span><br><span class="line">? 1</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Understanding Eval/Apply &gt; Suite 1 &gt; Case 4</span><br><span class="line">(cases remaining: 2)</span><br><span class="line"></span><br><span class="line">Q: What is the difference between applying builtins and applying user-defined procedures?</span><br><span class="line">(Choose all that apply)</span><br><span class="line"></span><br><span class="line">I.   User-defined procedures open a new frame; builtins do not</span><br><span class="line">II.  Builtins simply execute a predefined function; user-defined</span><br><span class="line">     procedures must evaluate additional expressions in the body</span><br><span class="line">III. Builtins have a fixed number of arguments; user-defined procedures do not</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">Choose the number of the correct choice:</span><br><span class="line">0) III only</span><br><span class="line">1) II only</span><br><span class="line">2) I only</span><br><span class="line">3) I, II and III</span><br><span class="line">4) I and II</span><br><span class="line">5) I and III</span><br><span class="line">6) II and III</span><br><span class="line">? 4</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Understanding Eval/Apply &gt; Suite 1 &gt; Case 5</span><br><span class="line">(cases remaining: 1)</span><br><span class="line"></span><br><span class="line">Q: What exception should be raised for the expression (1)?</span><br><span class="line">Choose the number of the correct choice:</span><br><span class="line">0) SchemeError(&quot;malformed list: (1)&quot;)</span><br><span class="line">1) AssertionError</span><br><span class="line">2) SchemeError(&quot;unknown identifier: 1&quot;)</span><br><span class="line">3) SchemeError(&quot;1 is not callable&quot;)</span><br><span class="line">? 3</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">OK! All cases for Understanding Eval/Apply unlocked.</span><br></pre></td></tr></table></figure><h2 id="Problem-1-1-pt-4">Problem 1 (1 pt)</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">$ python3 ok -q 01 -u</span><br><span class="line">=====================================================================</span><br><span class="line">Assignment: Project 4: Scheme Interpreter</span><br><span class="line">OK, version v1.18.1</span><br><span class="line">=====================================================================</span><br><span class="line"></span><br><span class="line">~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br><span class="line">Unlocking tests</span><br><span class="line"></span><br><span class="line">At each &quot;? &quot;, type what you would expect the output to be.</span><br><span class="line">Type exit() to quit</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Problem 1 &gt; Suite 1 &gt; Case 1</span><br><span class="line">(cases remaining: 5)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; from scheme import *</span><br><span class="line">&gt;&gt;&gt; global_frame = create_global_frame()</span><br><span class="line">&gt;&gt;&gt; global_frame.define(&quot;x&quot;, 3)</span><br><span class="line">&gt;&gt;&gt; global_frame.parent is None</span><br><span class="line">? True</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; global_frame.lookup(&quot;x&quot;)</span><br><span class="line">? 3</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; global_frame.define(&quot;x&quot;, 2)</span><br><span class="line">&gt;&gt;&gt; global_frame.lookup(&quot;x&quot;)</span><br><span class="line">? 3</span><br><span class="line">-- Not quite. Try again! --</span><br><span class="line"></span><br><span class="line">? 2</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; global_frame.lookup(&quot;foo&quot;)</span><br><span class="line">Choose the number of the correct choice:</span><br><span class="line">0) SchemeError</span><br><span class="line">1) 3</span><br><span class="line">2) None</span><br><span class="line">? 0</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Problem 1 &gt; Suite 1 &gt; Case 2</span><br><span class="line">(cases remaining: 4)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; from scheme import *</span><br><span class="line">&gt;&gt;&gt; first_frame = create_global_frame()</span><br><span class="line">&gt;&gt;&gt; first_frame.define(&quot;x&quot;, 3)</span><br><span class="line">&gt;&gt;&gt; second_frame = Frame(first_frame)</span><br><span class="line">&gt;&gt;&gt; second_frame.parent == first_frame</span><br><span class="line">? True</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; second_frame.define(&quot;y&quot;, False)</span><br><span class="line">&gt;&gt;&gt; second_frame.lookup(&quot;x&quot;)</span><br><span class="line">? 3</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; second_frame.lookup(&quot;y&quot;)</span><br><span class="line">? False</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Problem 1 &gt; Suite 1 &gt; Case 3</span><br><span class="line">(cases remaining: 3)</span><br><span class="line"></span><br><span class="line">-- Already unlocked --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Problem 1 &gt; Suite 1 &gt; Case 4</span><br><span class="line">(cases remaining: 2)</span><br><span class="line"></span><br><span class="line">-- Already unlocked --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Problem 1 &gt; Suite 2 &gt; Case 1</span><br><span class="line">(cases remaining: 1)</span><br><span class="line"></span><br><span class="line">-- Already unlocked --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">OK! All cases for Problem 1 unlocked.</span><br></pre></td></tr></table></figure><p><strong>scheme/scheme_classes.py</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">def define(self, symbol, value):</span><br><span class="line">        &quot;&quot;&quot;Define Scheme SYMBOL to have VALUE.&quot;&quot;&quot;</span><br><span class="line">        # BEGIN PROBLEM 1</span><br><span class="line">        &quot;*** YOUR CODE HERE ***&quot;</span><br><span class="line">        self.bindings[symbol] = value</span><br><span class="line">        # END PROBLEM 1</span><br><span class="line"></span><br><span class="line">def lookup(self, symbol):</span><br><span class="line">    &quot;&quot;&quot;Return the value bound to SYMBOL. Errors if SYMBOL is not found.&quot;&quot;&quot;</span><br><span class="line">    # BEGIN PROBLEM 1</span><br><span class="line">    &quot;*** YOUR CODE HERE ***&quot;</span><br><span class="line">    if symbol in self.bindings.keys():</span><br><span class="line">        return self.bindings[symbol]</span><br><span class="line">    elif self.parent is not None:</span><br><span class="line">        return self.parent.lookup(symbol)`</span><br><span class="line">    # END PROBLEM 1</span><br><span class="line">    raise SchemeError(&#x27;unknown identifier: &#123;0&#125;&#x27;.format(symbol))</span><br></pre></td></tr></table></figure><h2 id="Problem-2-2-pt-2">Problem 2 (2 pt)</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line">$ python3 ok -q 02 -u</span><br><span class="line">=====================================================================</span><br><span class="line">Assignment: Project 4: Scheme Interpreter</span><br><span class="line">OK, version v1.18.1</span><br><span class="line">=====================================================================</span><br><span class="line"></span><br><span class="line">~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br><span class="line">Unlocking tests</span><br><span class="line"></span><br><span class="line">At each &quot;? &quot;, type what you would expect the output to be.</span><br><span class="line">Type exit() to quit</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Problem 2 &gt; Suite 1 &gt; Case 1</span><br><span class="line">(cases remaining: 9)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; from scheme import *</span><br><span class="line">&gt;&gt;&gt; env = create_global_frame()</span><br><span class="line">&gt;&gt;&gt; twos = Pair(2, Pair(2, nil))</span><br><span class="line">&gt;&gt;&gt; plus = BuiltinProcedure(scheme_add) # + procedure</span><br><span class="line">&gt;&gt;&gt; scheme_apply(plus, twos, env) # Type SchemeError if you think this errors</span><br><span class="line">? 4</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Problem 2 &gt; Suite 1 &gt; Case 2</span><br><span class="line">(cases remaining: 8)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; from scheme import *</span><br><span class="line">&gt;&gt;&gt; env = create_global_frame()</span><br><span class="line">&gt;&gt;&gt; plus = BuiltinProcedure(scheme_add) # + procedure</span><br><span class="line">&gt;&gt;&gt; scheme_apply(plus, nil, env) # Remember what (+) evaluates to in scheme</span><br><span class="line">? 0</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Problem 2 &gt; Suite 1 &gt; Case 3</span><br><span class="line">(cases remaining: 7)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; from scheme import *</span><br><span class="line">&gt;&gt;&gt; env = create_global_frame()</span><br><span class="line">&gt;&gt;&gt; twos = Pair(2, Pair(2, nil))</span><br><span class="line">&gt;&gt;&gt; oddp = BuiltinProcedure(scheme_oddp) # odd? procedure</span><br><span class="line">&gt;&gt;&gt; scheme_apply(oddp, twos, env) # Type SchemeError if you think this errors</span><br><span class="line">? SchemeError</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Problem 2 &gt; Suite 1 &gt; Case 4</span><br><span class="line">(cases remaining: 6)</span><br><span class="line"></span><br><span class="line">-- Already unlocked --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Problem 2 &gt; Suite 1 &gt; Case 5</span><br><span class="line">(cases remaining: 5)</span><br><span class="line"></span><br><span class="line">-- Already unlocked --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Problem 2 &gt; Suite 1 &gt; Case 6</span><br><span class="line">(cases remaining: 4)</span><br><span class="line"></span><br><span class="line">-- Already unlocked --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Problem 2 &gt; Suite 1 &gt; Case 7</span><br><span class="line">(cases remaining: 3)</span><br><span class="line"></span><br><span class="line">-- Already unlocked --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Problem 2 &gt; Suite 1 &gt; Case 8</span><br><span class="line">(cases remaining: 2)</span><br><span class="line"></span><br><span class="line">-- Already unlocked --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Problem 2 &gt; Suite 1 &gt; Case 9</span><br><span class="line">(cases remaining: 1)</span><br><span class="line"></span><br><span class="line">-- Already unlocked --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">OK! All cases for Problem 2 unlocked.</span><br></pre></td></tr></table></figure><p><strong>scheme/scheme_eval_apply.py</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">def scheme_apply(procedure, args, env):</span><br><span class="line">    &quot;&quot;&quot;Apply Scheme PROCEDURE to argument values ARGS (a Scheme list) in</span><br><span class="line">    Frame ENV, the current environment.&quot;&quot;&quot;</span><br><span class="line">    validate_procedure(procedure)</span><br><span class="line">    if isinstance(procedure, BuiltinProcedure):</span><br><span class="line">        # BEGIN PROBLEM 2</span><br><span class="line">        &quot;*** YOUR CODE HERE ***&quot;</span><br><span class="line">        args_list = pair_to_list(args)</span><br><span class="line">        if procedure.expect_env:</span><br><span class="line">            args_list.append(env)</span><br><span class="line">        try:</span><br><span class="line">            return procedure.py_func(*args_list)</span><br><span class="line">        except TypeError:</span><br><span class="line">            raise SchemeError(&#x27;incorrect number of arguments&#x27;)</span><br><span class="line">        # END PROBLEM 2</span><br><span class="line">    elif isinstance(procedure, LambdaProcedure):</span><br><span class="line">        # BEGIN PROBLEM 9</span><br><span class="line">        &quot;*** YOUR CODE HERE ***&quot;</span><br><span class="line">        # END PROBLEM 9</span><br><span class="line">    elif isinstance(procedure, MuProcedure):</span><br><span class="line">        # BEGIN PROBLEM 11</span><br><span class="line">        &quot;*** YOUR CODE HERE ***&quot;</span><br><span class="line">        # END PROBLEM 11</span><br><span class="line">    else:</span><br><span class="line">        assert False, &quot;Unexpected procedure: &#123;&#125;&quot;.format(procedure)</span><br></pre></td></tr></table></figure><h2 id="Problem-3-2-pt-3">Problem 3 (2 pt)</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">$ python3 ok -q 03 -u</span><br><span class="line">=====================================================================</span><br><span class="line">Assignment: Project 4: Scheme Interpreter</span><br><span class="line">OK, version v1.18.1</span><br><span class="line">=====================================================================</span><br><span class="line"></span><br><span class="line">~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br><span class="line">Unlocking tests</span><br><span class="line"></span><br><span class="line">At each &quot;? &quot;, type what you would expect the output to be.</span><br><span class="line">Type exit() to quit</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Problem 3 &gt; Suite 1 &gt; Case 1</span><br><span class="line">(cases remaining: 5)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; from scheme_reader import *</span><br><span class="line">&gt;&gt;&gt; from scheme import *</span><br><span class="line">&gt;&gt;&gt; expr = read_line(&#x27;(+ 2 2)&#x27;)</span><br><span class="line">&gt;&gt;&gt; scheme_eval(expr, create_global_frame()) # Type SchemeError if you think this errors</span><br><span class="line">? 4</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; scheme_eval(Pair(&#x27;+&#x27;, Pair(2, Pair(2, nil))), create_global_frame()) # Type SchemeError if you think this errors</span><br><span class="line">? 4</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; expr = read_line(&#x27;(+ (+ 2 2) (+ 1 3) (* 1 4))&#x27;)</span><br><span class="line">&gt;&gt;&gt; scheme_eval(expr, create_global_frame()) # Type SchemeError if you think this errors</span><br><span class="line">? 12</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; expr = read_line(&#x27;(yolo)&#x27;)</span><br><span class="line">&gt;&gt;&gt; scheme_eval(expr, create_global_frame()) # Type SchemeError if you think this errors</span><br><span class="line">? SchemeError</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Problem 3 &gt; Suite 2 &gt; Case 1</span><br><span class="line">(cases remaining: 4)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">scm&gt; (* (+ 3 2) (+ 1 7)) ; Type SchemeError if you think this errors</span><br><span class="line">? 40</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">scm&gt; (1 2) ; Type SchemeError if you think this errors</span><br><span class="line">? SchemeError</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">scm&gt; (1 (print 0)) ; validate_procedure should be called before operands are evaluated</span><br><span class="line">? SchemeError</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Problem 3 &gt; Suite 2 &gt; Case 2</span><br><span class="line">(cases remaining: 3)</span><br><span class="line"></span><br><span class="line">-- Already unlocked --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Problem 3 &gt; Suite 2 &gt; Case 3</span><br><span class="line">(cases remaining: 2)</span><br><span class="line"></span><br><span class="line">-- Already unlocked --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Problem 3 &gt; Suite 2 &gt; Case 4</span><br><span class="line">(cases remaining: 1)</span><br><span class="line"></span><br><span class="line">-- Already unlocked --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">OK! All cases for Problem 3 unlocked.</span><br></pre></td></tr></table></figure><p><strong>scheme/scheme_eval_apply.py</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">def scheme_eval(expr, env, _=None):  # Optional third argument is ignored</span><br><span class="line">    &quot;&quot;&quot;Evaluate Scheme expression EXPR in Frame ENV.</span><br><span class="line"></span><br><span class="line">    &gt;&gt;&gt; expr = read_line(&#x27;(+ 2 2)&#x27;)</span><br><span class="line">    &gt;&gt;&gt; expr</span><br><span class="line">    Pair(&#x27;+&#x27;, Pair(2, Pair(2, nil)))</span><br><span class="line">    &gt;&gt;&gt; scheme_eval(expr, create_global_frame())</span><br><span class="line">    4</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    # Evaluate atoms</span><br><span class="line">    if scheme_symbolp(expr):</span><br><span class="line">        return env.lookup(expr)</span><br><span class="line">    elif self_evaluating(expr):</span><br><span class="line">        return expr</span><br><span class="line"></span><br><span class="line">    # All non-atomic expressions are lists (combinations)</span><br><span class="line">    if not scheme_listp(expr):</span><br><span class="line">        raise SchemeError(&#x27;malformed list: &#123;0&#125;&#x27;.format(repl_str(expr)))</span><br><span class="line">    first, rest = expr.first, expr.rest</span><br><span class="line">    if scheme_symbolp(first) and first in scheme_forms.SPECIAL_FORMS:</span><br><span class="line">        return scheme_forms.SPECIAL_FORMS[first](rest, env)</span><br><span class="line">    else:</span><br><span class="line">        # BEGIN PROBLEM 3</span><br><span class="line">        &quot;*** YOUR CODE HERE ***&quot;</span><br><span class="line">        procedure = scheme_eval(first, env)</span><br><span class="line">        args = rest.map(lambda operand: scheme_eval(operand, env))</span><br><span class="line">        return scheme_apply(procedure, args, env)</span><br><span class="line">        # END PROBLEM 3</span><br><span class="line"></span><br><span class="line">def pair_to_list(pair):</span><br><span class="line">    if pair is nil:</span><br><span class="line">        return []</span><br><span class="line">    else:</span><br><span class="line">        return [pair.first] + pair_to_list(pair.rest)</span><br></pre></td></tr></table></figure><h2 id="Problem-4-2-pt-3">Problem 4 (2 pt)</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><span class="line">$ python3 ok -q 04 -u</span><br><span class="line">=====================================================================</span><br><span class="line">Assignment: Project 4: Scheme Interpreter</span><br><span class="line">OK, version v1.18.1</span><br><span class="line">=====================================================================</span><br><span class="line"></span><br><span class="line">~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br><span class="line">Unlocking tests</span><br><span class="line"></span><br><span class="line">At each &quot;? &quot;, type what you would expect the output to be.</span><br><span class="line">Type exit() to quit</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Problem 4 &gt; Suite 1 &gt; Case 1</span><br><span class="line">(cases remaining: 9)</span><br><span class="line"></span><br><span class="line">Q: What is the structure of the expressions argument to do_define_form?</span><br><span class="line">Choose the number of the correct choice:</span><br><span class="line">0) Pair(A, B), where:</span><br><span class="line">       A is the symbol being bound,</span><br><span class="line">       B is an expression whose value should be evaluated and bound to A</span><br><span class="line">1) Pair(&#x27;define&#x27;, Pair(A, Pair(B, nil))), where:</span><br><span class="line">       A is the symbol being bound,</span><br><span class="line">       B is an expression whose value should be evaluated and bound to A</span><br><span class="line">2) Pair(A, Pair(B, nil)), where:</span><br><span class="line">       A is the symbol being bound,</span><br><span class="line">       B is an expression whose value should be evaluated and bound to A</span><br><span class="line">3) Pair(A, Pair(B, nil)), where:</span><br><span class="line">       A is the symbol being bound,</span><br><span class="line">       B is the value that should be bound to A</span><br><span class="line">4) Pair(A, B), where:</span><br><span class="line">       A is the symbol being bound,</span><br><span class="line">       B is the value that should be bound to A</span><br><span class="line">? 2</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Problem 4 &gt; Suite 1 &gt; Case 2</span><br><span class="line">(cases remaining: 8)</span><br><span class="line"></span><br><span class="line">Q: What method of a Frame instance will bind</span><br><span class="line">a value to a symbol in that frame?</span><br><span class="line">Choose the number of the correct choice:</span><br><span class="line">0) bindings</span><br><span class="line">1) define</span><br><span class="line">2) lookup</span><br><span class="line">3) make_child_frame</span><br><span class="line">? 1</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Problem 4 &gt; Suite 2 &gt; Case 1</span><br><span class="line">(cases remaining: 7)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">scm&gt; (define size 2)</span><br><span class="line">? size</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">scm&gt; size</span><br><span class="line">? 2</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Problem 4 &gt; Suite 2 &gt; Case 2</span><br><span class="line">(cases remaining: 6)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">scm&gt; (define x (+ 2 3))</span><br><span class="line">? x</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">scm&gt; x</span><br><span class="line">? 5</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">scm&gt; (define x (+ 2 7))</span><br><span class="line">? x</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">scm&gt; x</span><br><span class="line">? 9</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">scm&gt; (eval (define tau 6.28)) ; eval takes an expression represented as a list and evaluates it</span><br><span class="line">? 6.28</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Problem 4 &gt; Suite 2 &gt; Case 3</span><br><span class="line">(cases remaining: 5)</span><br><span class="line"></span><br><span class="line">-- Already unlocked --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Problem 4 &gt; Suite 2 &gt; Case 4</span><br><span class="line">(cases remaining: 4)</span><br><span class="line"></span><br><span class="line">-- Already unlocked --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Problem 4 &gt; Suite 2 &gt; Case 5</span><br><span class="line">(cases remaining: 3)</span><br><span class="line"></span><br><span class="line">-- Already unlocked --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Problem 4 &gt; Suite 2 &gt; Case 6</span><br><span class="line">(cases remaining: 2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">scm&gt; (define x 15)</span><br><span class="line">? x</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">scm&gt; (define y (* 2 x))</span><br><span class="line">? y</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">scm&gt; y</span><br><span class="line">? 30</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">scm&gt; (+ y (* y 2) 1)</span><br><span class="line">? 91</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">scm&gt; (define x 20)</span><br><span class="line">? x</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">scm&gt; x</span><br><span class="line">? 20</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Problem 4 &gt; Suite 2 &gt; Case 7</span><br><span class="line">(cases remaining: 1)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">scm&gt; (define x 0)</span><br><span class="line">? x</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">scm&gt; ((define x (+ x 1)) 2)</span><br><span class="line">? SchemeError</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">scm&gt; x</span><br><span class="line">? 1</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">OK! All cases for Problem 4 unlocked.</span><br></pre></td></tr></table></figure><p><strong>scheme/scheme_forms.py</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">def do_define_form(expressions, env):</span><br><span class="line">    &quot;&quot;&quot;Evaluate a define form.</span><br><span class="line">    &gt;&gt;&gt; env = create_global_frame()</span><br><span class="line">    &gt;&gt;&gt; do_define_form(read_line(&quot;(x 2)&quot;), env) # evaluating (define x 2)</span><br><span class="line">    &#x27;x&#x27;</span><br><span class="line">    &gt;&gt;&gt; scheme_eval(&quot;x&quot;, env)</span><br><span class="line">    2</span><br><span class="line">    &gt;&gt;&gt; do_define_form(read_line(&quot;(x (+ 2 8))&quot;), env) # evaluating (define x (+ 2 8))</span><br><span class="line">    &#x27;x&#x27;</span><br><span class="line">    &gt;&gt;&gt; scheme_eval(&quot;x&quot;, env)</span><br><span class="line">    10</span><br><span class="line">    &gt;&gt;&gt; # problem 10</span><br><span class="line">    &gt;&gt;&gt; env = create_global_frame()</span><br><span class="line">    &gt;&gt;&gt; do_define_form(read_line(&quot;((f x) (+ x 2))&quot;), env) # evaluating (define (f x) (+ x 8))</span><br><span class="line">    &#x27;f&#x27;</span><br><span class="line">    &gt;&gt;&gt; scheme_eval(read_line(&quot;(f 3)&quot;), env)</span><br><span class="line">    5</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    validate_form(expressions, 2)  # Checks that expressions is a list of length at least 2</span><br><span class="line">    signature = expressions.first</span><br><span class="line">    if scheme_symbolp(signature):</span><br><span class="line">        # assigning a name to a value e.g. (define x (+ 1 2))</span><br><span class="line">        validate_form(expressions, 2, 2)  # Checks that expressions is a list of length exactly 2</span><br><span class="line">        # BEGIN PROBLEM 4</span><br><span class="line">        &quot;*** YOUR CODE HERE ***&quot;</span><br><span class="line">        value = scheme_eval(expressions.rest.first, env)</span><br><span class="line">        env.define(signature, value)</span><br><span class="line">        return signature</span><br><span class="line">        # END PROBLEM 4</span><br><span class="line">    elif isinstance(signature, Pair) and scheme_symbolp(signature.first):</span><br><span class="line">        # defining a named procedure e.g. (define (f x y) (+ x y))</span><br><span class="line">        # BEGIN PROBLEM 10</span><br><span class="line">        &quot;*** YOUR CODE HERE ***&quot;</span><br><span class="line">        # END PROBLEM 10</span><br><span class="line">    else:</span><br><span class="line">        bad_signature = signature.first if isinstance(signature, Pair) else signature</span><br><span class="line">        raise SchemeError(&#x27;non-symbol: &#123;0&#125;&#x27;.format(bad_signature))</span><br></pre></td></tr></table></figure><h2 id="Problem-5-1-pt-2">Problem 5 (1 pt)</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line">$ python3 ok -q 05 -u</span><br><span class="line">=====================================================================</span><br><span class="line">Assignment: Project 4: Scheme Interpreter</span><br><span class="line">OK, version v1.18.1</span><br><span class="line">=====================================================================</span><br><span class="line"></span><br><span class="line">~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br><span class="line">Unlocking tests</span><br><span class="line"></span><br><span class="line">At each &quot;? &quot;, type what you would expect the output to be.</span><br><span class="line">Type exit() to quit</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Problem 5 &gt; Suite 1 &gt; Case 1</span><br><span class="line">(cases remaining: 4)</span><br><span class="line"></span><br><span class="line">Q: What is the structure of the expressions argument to do_quote_form?</span><br><span class="line">Choose the number of the correct choice:</span><br><span class="line">0) A, where:</span><br><span class="line">       A is the quoted expression</span><br><span class="line">1) [A], where:</span><br><span class="line">       A is the quoted expression</span><br><span class="line">2) Pair(&#x27;quote&#x27;, Pair(A, nil)), where:</span><br><span class="line">       A is the quoted expression</span><br><span class="line">3) Pair(A, nil), where:</span><br><span class="line">       A is the quoted expression</span><br><span class="line">? 3</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Problem 5 &gt; Suite 2 &gt; Case 1</span><br><span class="line">(cases remaining: 3)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; from scheme import *</span><br><span class="line">&gt;&gt;&gt; global_frame = create_global_frame()</span><br><span class="line">&gt;&gt;&gt; do_quote_form(Pair(3, nil), global_frame)</span><br><span class="line">? 3</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; do_quote_form(Pair(&#x27;hi&#x27;, nil), global_frame)</span><br><span class="line">? &#x27;hi&#x27;</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; expr = Pair(Pair(&#x27;+&#x27;, Pair(&#x27;x&#x27;, Pair(2, nil))), nil)</span><br><span class="line">&gt;&gt;&gt; do_quote_form(expr, global_frame) # Make sure to use Pair notation</span><br><span class="line">? Pair(&#x27;+&#x27;, Pair(&#x27;x&#x27;, Pair(2, nil)))</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Problem 5 &gt; Suite 3 &gt; Case 1</span><br><span class="line">(cases remaining: 2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">scm&gt; &#x27;&#x27;hello</span><br><span class="line">Choose the number of the correct choice:</span><br><span class="line">0) (quote (quote (hello)))</span><br><span class="line">1) hello</span><br><span class="line">2) (hello)</span><br><span class="line">3) (quote hello)</span><br><span class="line">? 3</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">scm&gt; (quote (1 2))</span><br><span class="line">? (1 2)</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">scm&gt; (car &#x27;(1 2 3))</span><br><span class="line">? 1</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">scm&gt; (cdr &#x27;(1 2))</span><br><span class="line">? (2)</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">scm&gt; (cons &#x27;car &#x27;(&#x27;(4 2)))</span><br><span class="line">? (car (quote (4 2)))</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">scm&gt; (eval (cons &#x27;car &#x27;(&#x27;(4 2))))</span><br><span class="line">? 4</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Problem 5 &gt; Suite 4 &gt; Case 1</span><br><span class="line">(cases remaining: 1)</span><br><span class="line"></span><br><span class="line">-- Already unlocked --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">OK! All cases for Problem 5 unlocked.</span><br></pre></td></tr></table></figure><p><strong>scheme/scheme_forms.py</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">def do_quote_form(expressions, env):</span><br><span class="line">    &quot;&quot;&quot;Evaluate a quote form.</span><br><span class="line"></span><br><span class="line">    &gt;&gt;&gt; env = create_global_frame()</span><br><span class="line">    &gt;&gt;&gt; do_quote_form(read_line(&quot;((+ x 2))&quot;), env) # evaluating (quote (+ x 2))</span><br><span class="line">    Pair(&#x27;+&#x27;, Pair(&#x27;x&#x27;, Pair(2, nil)))</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    validate_form(expressions, 1, 1)</span><br><span class="line">    # BEGIN PROBLEM 5</span><br><span class="line">    &quot;*** YOUR CODE HERE ***&quot;</span><br><span class="line">    return expressions.first</span><br><span class="line">    # END PROBLEM 5</span><br></pre></td></tr></table></figure><h2 id="Problem-6-1-pt-3">Problem 6 (1 pt)</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line">$ python3 ok -q 06 -u</span><br><span class="line">=====================================================================</span><br><span class="line">Assignment: Project 4: Scheme Interpreter</span><br><span class="line">OK, version v1.18.1</span><br><span class="line">=====================================================================</span><br><span class="line"></span><br><span class="line">~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br><span class="line">Unlocking tests</span><br><span class="line"></span><br><span class="line">At each &quot;? &quot;, type what you would expect the output to be.</span><br><span class="line">Type exit() to quit</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Problem 6 &gt; Suite 1 &gt; Case 1</span><br><span class="line">(cases remaining: 6)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; from scheme import *</span><br><span class="line">&gt;&gt;&gt; env = create_global_frame()</span><br><span class="line">&gt;&gt;&gt; eval_all(Pair(2, nil), env)</span><br><span class="line">Choose the number of the correct choice:</span><br><span class="line">0) SchemeError</span><br><span class="line">1) 2</span><br><span class="line">? 1</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; eval_all(Pair(4, Pair(5, nil)), env)</span><br><span class="line">Choose the number of the correct choice:</span><br><span class="line">0) 4</span><br><span class="line">1) 5</span><br><span class="line">2) (4 5)</span><br><span class="line">3) SchemeError</span><br><span class="line">? 1</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; eval_all(nil, env) # return None (meaning undefined)</span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Problem 6 &gt; Suite 1 &gt; Case 2</span><br><span class="line">(cases remaining: 5)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; from scheme import *</span><br><span class="line">&gt;&gt;&gt; env = create_global_frame()</span><br><span class="line">&gt;&gt;&gt; lst = Pair(1, Pair(2, Pair(3, nil)))</span><br><span class="line">&gt;&gt;&gt; eval_all(lst, env)</span><br><span class="line">? 3</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; lst     # The list should not be mutated!</span><br><span class="line">? Pair(1, Pair(2, Pair(3, nil)))</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Problem 6 &gt; Suite 2 &gt; Case 1</span><br><span class="line">(cases remaining: 4)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">scm&gt; (begin (+ 2 3) (+ 5 6))</span><br><span class="line">? 11</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">scm&gt; (begin (define x 3) x)</span><br><span class="line">? 3</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Problem 6 &gt; Suite 2 &gt; Case 2</span><br><span class="line">(cases remaining: 3)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">scm&gt; (begin 30 &#x27;(+ 2 2))</span><br><span class="line">Choose the number of the correct choice:</span><br><span class="line">0) 4</span><br><span class="line">1) &#x27;(+ 2 2)</span><br><span class="line">2) 30</span><br><span class="line">3) (+ 2 2)</span><br><span class="line">? 3</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">scm&gt; (define x 0)</span><br><span class="line">? x</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">scm&gt; (begin (define x (+ x 1)) 42 (define y (+ x 1)))</span><br><span class="line">? y</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">scm&gt; x</span><br><span class="line">? 1</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">scm&gt; y</span><br><span class="line">? 2</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Problem 6 &gt; Suite 2 &gt; Case 3</span><br><span class="line">(cases remaining: 2)</span><br><span class="line"></span><br><span class="line">-- Already unlocked --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Problem 6 &gt; Suite 2 &gt; Case 4</span><br><span class="line">(cases remaining: 1)</span><br><span class="line"></span><br><span class="line">-- Already unlocked --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">OK! All cases for Problem 6 unlocked.</span><br></pre></td></tr></table></figure><p><strong>scheme/scheme_eval_apply.py</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">def eval_all(expressions, env):</span><br><span class="line">    &quot;&quot;&quot;Evaluate each expression in the Scheme list EXPRESSIONS in</span><br><span class="line">    Frame ENV (the current environment) and return the value of the last.</span><br><span class="line"></span><br><span class="line">    &gt;&gt;&gt; eval_all(read_line(&quot;(1)&quot;), create_global_frame())</span><br><span class="line">    1</span><br><span class="line">    &gt;&gt;&gt; eval_all(read_line(&quot;(1 2)&quot;), create_global_frame())</span><br><span class="line">    2</span><br><span class="line">    &gt;&gt;&gt; x = eval_all(read_line(&quot;((print 1) 2)&quot;), create_global_frame())</span><br><span class="line">    1</span><br><span class="line">    &gt;&gt;&gt; x</span><br><span class="line">    2</span><br><span class="line">    &gt;&gt;&gt; eval_all(read_line(&quot;((define x 2) x)&quot;), create_global_frame())</span><br><span class="line">    2</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    # BEGIN PROBLEM 6</span><br><span class="line">    # return scheme_eval(expressions.first, env)  # replace this with lines of your own code</span><br><span class="line">    if expressions is nil:</span><br><span class="line">        return</span><br><span class="line">    expr = expressions</span><br><span class="line">    while expr.rest is not nil:</span><br><span class="line">        scheme_eval(expr.first, env)</span><br><span class="line">        expr = expr.rest</span><br><span class="line">    return scheme_eval(expr.first, env)</span><br><span class="line">    # END PROBLEM 6</span><br></pre></td></tr></table></figure><h2 id="Problem-7-2-pt-2">Problem 7 (2 pt)</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">$ python3 ok -q 07 -u</span><br><span class="line">=====================================================================</span><br><span class="line">Assignment: Project 4: Scheme Interpreter</span><br><span class="line">OK, version v1.18.1</span><br><span class="line">=====================================================================</span><br><span class="line"></span><br><span class="line">~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br><span class="line">Unlocking tests</span><br><span class="line"></span><br><span class="line">At each &quot;? &quot;, type what you would expect the output to be.</span><br><span class="line">Type exit() to quit</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Problem 7 &gt; Suite 1 &gt; Case 1</span><br><span class="line">(cases remaining: 5)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">scm&gt; (lambda (x y) (+ x y))</span><br><span class="line">? (lambda (x y) (+ x y))</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">scm&gt; (lambda (x)) ; type SchemeError if you think this causes an error</span><br><span class="line">? SchemeError</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Problem 7 &gt; Suite 1 &gt; Case 2</span><br><span class="line">(cases remaining: 4)</span><br><span class="line"></span><br><span class="line">-- Already unlocked --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Problem 7 &gt; Suite 1 &gt; Case 3</span><br><span class="line">(cases remaining: 3)</span><br><span class="line"></span><br><span class="line">-- Already unlocked --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Problem 7 &gt; Suite 2 &gt; Case 1</span><br><span class="line">(cases remaining: 2)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; from scheme_reader import *</span><br><span class="line">&gt;&gt;&gt; from scheme import *</span><br><span class="line">&gt;&gt;&gt; env = create_global_frame()</span><br><span class="line">&gt;&gt;&gt; lambda_line = read_line(&quot;(lambda (a b c) (+ a b c))&quot;)</span><br><span class="line">&gt;&gt;&gt; lambda_proc = do_lambda_form(lambda_line.rest, env)</span><br><span class="line">&gt;&gt;&gt; lambda_proc.formals # use single quotes &#x27; around strings in your answer</span><br><span class="line">? Pair(&#x27;a&#x27;, Pair(&#x27;b&#x27;, Pair(&#x27;c&#x27;, nil)))</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; lambda_proc.body # the body is a *list* of expressions! Make sure your answer is a properly nested Pair.</span><br><span class="line">? Pair(Pair(&#x27;+&#x27;, Pair(&#x27;a&#x27;, Pair(&#x27;b&#x27;, Pair(&#x27;c&#x27;, nil)))), nil)</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Problem 7 &gt; Suite 2 &gt; Case 2</span><br><span class="line">(cases remaining: 1)</span><br><span class="line"></span><br><span class="line">-- Already unlocked --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">OK! All cases for Problem 7 unlocked.</span><br></pre></td></tr></table></figure><p><strong>scheme/scheme_forms.py</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">def do_lambda_form(expressions, env):</span><br><span class="line">    &quot;&quot;&quot;Evaluate a lambda form.</span><br><span class="line"></span><br><span class="line">    &gt;&gt;&gt; env = create_global_frame()</span><br><span class="line">    &gt;&gt;&gt; do_lambda_form(read_line(&quot;((x) (+ x 2))&quot;), env) # evaluating (lambda (x) (+ x 2))</span><br><span class="line">    LambdaProcedure(Pair(&#x27;x&#x27;, nil), Pair(Pair(&#x27;+&#x27;, Pair(&#x27;x&#x27;, Pair(2, nil))), nil), &lt;Global Frame&gt;)</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    validate_form(expressions, 2)</span><br><span class="line">    formals = expressions.first</span><br><span class="line">    validate_formals(formals)</span><br><span class="line">    # BEGIN PROBLEM 7</span><br><span class="line">    &quot;*** YOUR CODE HERE ***&quot;</span><br><span class="line">    body = expressions.rest</span><br><span class="line">    return LambdaProcedure(formals, body, env)</span><br><span class="line">    # END PROBLEM 7</span><br></pre></td></tr></table></figure><h2 id="Problem-8-2-pt-2">Problem 8 (2 pt)</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">$ python3 ok -q 08 -u</span><br><span class="line">=====================================================================</span><br><span class="line">Assignment: Project 4: Scheme Interpreter</span><br><span class="line">OK, version v1.18.1</span><br><span class="line">=====================================================================</span><br><span class="line"></span><br><span class="line">~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br><span class="line">Unlocking tests</span><br><span class="line"></span><br><span class="line">At each &quot;? &quot;, type what you would expect the output to be.</span><br><span class="line">Type exit() to quit</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Problem 8 &gt; Suite 1 &gt; Case 1</span><br><span class="line">(cases remaining: 6)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; from scheme import *</span><br><span class="line">&gt;&gt;&gt; global_frame = create_global_frame()</span><br><span class="line">&gt;&gt;&gt; formals = Pair(&#x27;a&#x27;, Pair(&#x27;b&#x27;, Pair(&#x27;c&#x27;, nil)))</span><br><span class="line">&gt;&gt;&gt; vals = Pair(1, Pair(2, Pair(3, nil)))</span><br><span class="line">&gt;&gt;&gt; frame = global_frame.make_child_frame(formals, vals)</span><br><span class="line">&gt;&gt;&gt; global_frame.lookup(&#x27;a&#x27;) # Type SchemeError if you think this errors</span><br><span class="line">? SchemeError</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; frame.lookup(&#x27;a&#x27;)        # Type SchemeError if you think this errors</span><br><span class="line">? 1</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; frame.lookup(&#x27;b&#x27;)        # Type SchemeError if you think this errors</span><br><span class="line">? 2</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; frame.lookup(&#x27;c&#x27;)        # Type SchemeError if you think this errors</span><br><span class="line">? 3</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Problem 8 &gt; Suite 1 &gt; Case 2</span><br><span class="line">(cases remaining: 5)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; from scheme import *</span><br><span class="line">&gt;&gt;&gt; global_frame = create_global_frame()</span><br><span class="line">&gt;&gt;&gt; frame = global_frame.make_child_frame(nil, nil)</span><br><span class="line">&gt;&gt;&gt; frame.parent is global_frame</span><br><span class="line">? True</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Problem 8 &gt; Suite 1 &gt; Case 3</span><br><span class="line">(cases remaining: 4)</span><br><span class="line"></span><br><span class="line">-- Already unlocked --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Problem 8 &gt; Suite 2 &gt; Case 1</span><br><span class="line">(cases remaining: 3)</span><br><span class="line"></span><br><span class="line">-- Already unlocked --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Problem 8 &gt; Suite 2 &gt; Case 2</span><br><span class="line">(cases remaining: 2)</span><br><span class="line"></span><br><span class="line">-- Already unlocked --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Problem 8 &gt; Suite 2 &gt; Case 3</span><br><span class="line">(cases remaining: 1)</span><br><span class="line"></span><br><span class="line">-- Already unlocked --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">OK! All cases for Problem 8 unlocked.</span><br></pre></td></tr></table></figure><p><strong>scheme/scheme_classes.py</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">def make_child_frame(self, formals, vals):</span><br><span class="line">    &quot;&quot;&quot;Return a new local frame whose parent is SELF, in which the symbols</span><br><span class="line">    in a Scheme list of formal parameters FORMALS are bound to the Scheme</span><br><span class="line">    values in the Scheme list VALS. Both FORMALS and VALS are represented</span><br><span class="line">    as Pairs. Raise an error if too many or too few vals are given.</span><br><span class="line"></span><br><span class="line">    &gt;&gt;&gt; env = create_global_frame()</span><br><span class="line">    &gt;&gt;&gt; formals, expressions = read_line(&#x27;(a b c)&#x27;), read_line(&#x27;(1 2 3)&#x27;)</span><br><span class="line">    &gt;&gt;&gt; env.make_child_frame(formals, expressions)</span><br><span class="line">    &lt;&#123;a: 1, b: 2, c: 3&#125; -&gt; &lt;Global Frame&gt;&gt;</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    if len(formals) != len(vals):</span><br><span class="line">        raise SchemeError(&#x27;Incorrect number of arguments to function call&#x27;)</span><br><span class="line">    # BEGIN PROBLEM 8</span><br><span class="line">    &quot;*** YOUR CODE HERE ***&quot;</span><br><span class="line">    child_frame = Frame(self)</span><br><span class="line">    while formals is not nil and vals is not nil:</span><br><span class="line">        child_frame.define(formals.first, vals.first)</span><br><span class="line">        formals, vals = formals.rest, vals.rest</span><br><span class="line">    return child_frame</span><br><span class="line">    # END PROBLEM 8</span><br></pre></td></tr></table></figure><h2 id="Problem-9-2-pt-2">Problem 9 (2 pt)</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">$ python3 ok -q 09 -u</span><br><span class="line">=====================================================================</span><br><span class="line">Assignment: Project 4: Scheme Interpreter</span><br><span class="line">OK, version v1.18.1</span><br><span class="line">=====================================================================</span><br><span class="line"></span><br><span class="line">~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br><span class="line">Unlocking tests</span><br><span class="line"></span><br><span class="line">At each &quot;? &quot;, type what you would expect the output to be.</span><br><span class="line">Type exit() to quit</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Problem 9 &gt; Suite 1 &gt; Case 1</span><br><span class="line">(cases remaining: 6)</span><br><span class="line"></span><br><span class="line">-- Already unlocked --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Problem 9 &gt; Suite 1 &gt; Case 2</span><br><span class="line">(cases remaining: 5)</span><br><span class="line"></span><br><span class="line">-- Already unlocked --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Problem 9 &gt; Suite 2 &gt; Case 1</span><br><span class="line">(cases remaining: 4)</span><br><span class="line"></span><br><span class="line">-- Already unlocked --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Problem 9 &gt; Suite 2 &gt; Case 2</span><br><span class="line">(cases remaining: 3)</span><br><span class="line"></span><br><span class="line">-- Already unlocked --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Problem 9 &gt; Suite 3 &gt; Case 1</span><br><span class="line">(cases remaining: 2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">scm&gt; (define outer (lambda (x y)</span><br><span class="line">....   (define inner (lambda (z x)</span><br><span class="line">....     (+ x (* y 2) (* z 3))))</span><br><span class="line">....   (inner x 10)))</span><br><span class="line">? outer</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">scm&gt; (outer 1 2)</span><br><span class="line">? 17</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">scm&gt; (define outer-func (lambda (x y)</span><br><span class="line">....   (define inner (lambda (z x)</span><br><span class="line">....     (+ x (* y 2) (* z 3))))</span><br><span class="line">....   inner))</span><br><span class="line">? outer-func</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">scm&gt; ((outer-func 1 2) 1 10)</span><br><span class="line">? 17</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Problem 9 &gt; Suite 3 &gt; Case 2</span><br><span class="line">(cases remaining: 1)</span><br><span class="line"></span><br><span class="line">-- Already unlocked --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">OK! All cases for Problem 9 unlocked.</span><br></pre></td></tr></table></figure><p><strong>scheme/scheme_eval_apply.py</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">def scheme_apply(procedure, args, env):</span><br><span class="line">    &quot;&quot;&quot;Apply Scheme PROCEDURE to argument values ARGS (a Scheme list) in</span><br><span class="line">    Frame ENV, the current environment.&quot;&quot;&quot;</span><br><span class="line">    validate_procedure(procedure)</span><br><span class="line">    if isinstance(procedure, BuiltinProcedure):</span><br><span class="line">        # BEGIN PROBLEM 2</span><br><span class="line">        &quot;*** YOUR CODE HERE ***&quot;</span><br><span class="line">        args_list = pair_to_list(args)</span><br><span class="line">        if procedure.expect_env:</span><br><span class="line">            args_list.append(env)</span><br><span class="line">        try:</span><br><span class="line">            return procedure.py_func(*args_list)</span><br><span class="line">        except TypeError:</span><br><span class="line">            raise SchemeError(&#x27;incorrect number of arguments&#x27;)</span><br><span class="line">        # END PROBLEM 2</span><br><span class="line">    elif isinstance(procedure, LambdaProcedure):</span><br><span class="line">        # BEGIN PROBLEM 9</span><br><span class="line">        &quot;*** YOUR CODE HERE ***&quot;</span><br><span class="line">        child_frame = procedure.env.make_child_frame(procedure.formals, args)</span><br><span class="line">        return eval_all(procedure.body, child_frame)</span><br><span class="line">        # END PROBLEM 9</span><br><span class="line">    elif isinstance(procedure, MuProcedure):</span><br><span class="line">        # BEGIN PROBLEM 11</span><br><span class="line">        &quot;*** YOUR CODE HERE ***&quot;</span><br><span class="line">        # END PROBLEM 11</span><br><span class="line">    else:</span><br><span class="line">        assert False, &quot;Unexpected procedure: &#123;&#125;&quot;.format(procedure)</span><br></pre></td></tr></table></figure><h2 id="Problem-10-1-pt-3">Problem 10 (1 pt)</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">$ python3 ok -q 10 -u</span><br><span class="line">=====================================================================</span><br><span class="line">Assignment: Project 4: Scheme Interpreter</span><br><span class="line">OK, version v1.18.1</span><br><span class="line">=====================================================================</span><br><span class="line"></span><br><span class="line">~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br><span class="line">Unlocking tests</span><br><span class="line"></span><br><span class="line">At each &quot;? &quot;, type what you would expect the output to be.</span><br><span class="line">Type exit() to quit</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Problem 10 &gt; Suite 1 &gt; Case 1</span><br><span class="line">(cases remaining: 7)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">scm&gt; (define (f x y) (+ x y))</span><br><span class="line">? f</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">scm&gt; f</span><br><span class="line">Choose the number of the correct choice:</span><br><span class="line">0) (define f (lambda (x y) (+ x y)))</span><br><span class="line">1) (lambda (f x y) (+ x y))</span><br><span class="line">2) (lambda (x y) (+ x y))</span><br><span class="line">3) (f (x y) (+ x y))</span><br><span class="line">? 2</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Problem 10 &gt; Suite 1 &gt; Case 2</span><br><span class="line">(cases remaining: 6)</span><br><span class="line"></span><br><span class="line">-- Already unlocked --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Problem 10 &gt; Suite 1 &gt; Case 3</span><br><span class="line">(cases remaining: 5)</span><br><span class="line"></span><br><span class="line">-- Already unlocked --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Problem 10 &gt; Suite 1 &gt; Case 4</span><br><span class="line">(cases remaining: 4)</span><br><span class="line"></span><br><span class="line">-- Already unlocked --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Problem 10 &gt; Suite 1 &gt; Case 5</span><br><span class="line">(cases remaining: 3)</span><br><span class="line"></span><br><span class="line">-- Already unlocked --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Problem 10 &gt; Suite 1 &gt; Case 6</span><br><span class="line">(cases remaining: 2)</span><br><span class="line"></span><br><span class="line">-- Already unlocked --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Problem 10 &gt; Suite 2 &gt; Case 1</span><br><span class="line">(cases remaining: 1)</span><br><span class="line"></span><br><span class="line">-- Already unlocked --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">OK! All cases for Problem 10 unlocked.</span><br></pre></td></tr></table></figure><p><strong>scheme/scheme_forms.py</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">def do_define_form(expressions, env):</span><br><span class="line">    &quot;&quot;&quot;Evaluate a define form.</span><br><span class="line">    &gt;&gt;&gt; env = create_global_frame()</span><br><span class="line">    &gt;&gt;&gt; do_define_form(read_line(&quot;(x 2)&quot;), env) # evaluating (define x 2)</span><br><span class="line">    &#x27;x&#x27;</span><br><span class="line">    &gt;&gt;&gt; scheme_eval(&quot;x&quot;, env)</span><br><span class="line">    2</span><br><span class="line">    &gt;&gt;&gt; do_define_form(read_line(&quot;(x (+ 2 8))&quot;), env) # evaluating (define x (+ 2 8))</span><br><span class="line">    &#x27;x&#x27;</span><br><span class="line">    &gt;&gt;&gt; scheme_eval(&quot;x&quot;, env)</span><br><span class="line">    10</span><br><span class="line">    &gt;&gt;&gt; # problem 10</span><br><span class="line">    &gt;&gt;&gt; env = create_global_frame()</span><br><span class="line">    &gt;&gt;&gt; do_define_form(read_line(&quot;((f x) (+ x 2))&quot;), env) # evaluating (define (f x) (+ x 8))</span><br><span class="line">    &#x27;f&#x27;</span><br><span class="line">    &gt;&gt;&gt; scheme_eval(read_line(&quot;(f 3)&quot;), env)</span><br><span class="line">    5</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    validate_form(expressions, 2)  # Checks that expressions is a list of length at least 2</span><br><span class="line">    signature = expressions.first</span><br><span class="line">    if scheme_symbolp(signature):</span><br><span class="line">        # assigning a name to a value e.g. (define x (+ 1 2))</span><br><span class="line">        validate_form(expressions, 2, 2)  # Checks that expressions is a list of length exactly 2</span><br><span class="line">        # BEGIN PROBLEM 4</span><br><span class="line">        &quot;*** YOUR CODE HERE ***&quot;</span><br><span class="line">        value = scheme_eval(expressions.rest.first, env)</span><br><span class="line">        env.define(signature, value)</span><br><span class="line">        return signature</span><br><span class="line">        # END PROBLEM 4</span><br><span class="line">    elif isinstance(signature, Pair) and scheme_symbolp(signature.first):</span><br><span class="line">        # defining a named procedure e.g. (define (f x y) (+ x y))</span><br><span class="line">        # BEGIN PROBLEM 10</span><br><span class="line">        &quot;*** YOUR CODE HERE ***&quot;</span><br><span class="line">        formal = signature.rest</span><br><span class="line">        while formal is not nil:</span><br><span class="line">            if not scheme_symbolp(formal.first):</span><br><span class="line">                raise SchemeError</span><br><span class="line">            formal = formal.rest</span><br><span class="line">        </span><br><span class="line">        env.define(signature.first, LambdaProcedure(signature.rest, expressions.rest, env))</span><br><span class="line">        return signature.first</span><br><span class="line">        # END PROBLEM 10</span><br><span class="line">    else:</span><br><span class="line">        bad_signature = signature.first if isinstance(signature, Pair) else signature</span><br><span class="line">        raise SchemeError(&#x27;non-symbol: &#123;0&#125;&#x27;.format(bad_signature))</span><br></pre></td></tr></table></figure><h2 id="Problem-11-1-pt-3">Problem 11 (1 pt)</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">$ python3 ok -q 11 -u</span><br><span class="line">=====================================================================</span><br><span class="line">Assignment: Project 4: Scheme Interpreter</span><br><span class="line">OK, version v1.18.1</span><br><span class="line">=====================================================================</span><br><span class="line"></span><br><span class="line">~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br><span class="line">Unlocking tests</span><br><span class="line"></span><br><span class="line">At each &quot;? &quot;, type what you would expect the output to be.</span><br><span class="line">Type exit() to quit</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Problem 11 &gt; Suite 1 &gt; Case 1</span><br><span class="line">(cases remaining: 2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">scm&gt; (define y 1)</span><br><span class="line">? y</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">scm&gt; (define f (mu (x) (+ x y)))</span><br><span class="line">? f</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">scm&gt; (define g (lambda (x y) (f (+ x x))))</span><br><span class="line">? g</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">scm&gt; (g 3 7)</span><br><span class="line">? 13</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Problem 11 &gt; Suite 2 &gt; Case 1</span><br><span class="line">(cases remaining: 1)</span><br><span class="line"></span><br><span class="line">-- Already unlocked --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">OK! All cases for Problem 11 unlocked.</span><br></pre></td></tr></table></figure><p><strong>scheme/scheme_forms.py</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">def do_mu_form(expressions, env):</span><br><span class="line">    &quot;&quot;&quot;Evaluate a mu form.&quot;&quot;&quot;</span><br><span class="line">    validate_form(expressions, 2)</span><br><span class="line">    formals = expressions.first</span><br><span class="line">    validate_formals(formals)</span><br><span class="line">    # BEGIN PROBLEM 11</span><br><span class="line">    &quot;*** YOUR CODE HERE ***&quot;</span><br><span class="line">    return MuProcedure(formals, expressions.rest)</span><br><span class="line">    # END PROBLEM 11</span><br></pre></td></tr></table></figure><p><strong>scheme/scheme_eval_apply.py</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">def scheme_apply(procedure, args, env):</span><br><span class="line">    &quot;&quot;&quot;Apply Scheme PROCEDURE to argument values ARGS (a Scheme list) in</span><br><span class="line">    Frame ENV, the current environment.&quot;&quot;&quot;</span><br><span class="line">    validate_procedure(procedure)</span><br><span class="line">    if isinstance(procedure, BuiltinProcedure):</span><br><span class="line">        # BEGIN PROBLEM 2</span><br><span class="line">        &quot;*** YOUR CODE HERE ***&quot;</span><br><span class="line">        args_list = pair_to_list(args)</span><br><span class="line">        if procedure.expect_env:</span><br><span class="line">            args_list.append(env)</span><br><span class="line">        try:</span><br><span class="line">            return procedure.py_func(*args_list)</span><br><span class="line">        except TypeError:</span><br><span class="line">            raise SchemeError(&#x27;incorrect number of arguments&#x27;)</span><br><span class="line">        # END PROBLEM 2</span><br><span class="line">    elif isinstance(procedure, LambdaProcedure):</span><br><span class="line">        # BEGIN PROBLEM 9</span><br><span class="line">        &quot;*** YOUR CODE HERE ***&quot;</span><br><span class="line">        child_frame = procedure.env.make_child_frame(procedure.formals, args)</span><br><span class="line">        return eval_all(procedure.body, child_frame)</span><br><span class="line">        # END PROBLEM 9</span><br><span class="line">    elif isinstance(procedure, MuProcedure):</span><br><span class="line">        # BEGIN PROBLEM 11</span><br><span class="line">        &quot;*** YOUR CODE HERE ***&quot;</span><br><span class="line">        child_frame = env.make_child_frame(procedure.formals, args)</span><br><span class="line">        return eval_all(procedure.body, child_frame)</span><br><span class="line">        # END PROBLEM 11</span><br><span class="line">    else:</span><br><span class="line">        assert False, &quot;Unexpected procedure: &#123;&#125;&quot;.format(procedure)</span><br></pre></td></tr></table></figure><h2 id="Problem-12-2-pt-2">Problem 12 (2 pt)</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line">$ python3 ok -q 12 -u</span><br><span class="line">=====================================================================</span><br><span class="line">Assignment: Project 4: Scheme Interpreter</span><br><span class="line">OK, version v1.18.1</span><br><span class="line">=====================================================================</span><br><span class="line"></span><br><span class="line">~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br><span class="line">Unlocking tests</span><br><span class="line"></span><br><span class="line">At each &quot;? &quot;, type what you would expect the output to be.</span><br><span class="line">Type exit() to quit</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Problem 12 &gt; Suite 1 &gt; Case 1</span><br><span class="line">(cases remaining: 9)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">scm&gt; (and)</span><br><span class="line">Choose the number of the correct choice:</span><br><span class="line">0) #f</span><br><span class="line">1) SchemeError</span><br><span class="line">2) #t</span><br><span class="line">? 2</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">scm&gt; (and 1 #f)</span><br><span class="line">Choose the number of the correct choice:</span><br><span class="line">0) #t</span><br><span class="line">1) #f</span><br><span class="line">2) 1</span><br><span class="line">? 1</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">scm&gt; (and (+ 1 1) 1)</span><br><span class="line">? 1</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">scm&gt; (and #f 5)</span><br><span class="line">? #f</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">scm&gt; (and 4 5 (+ 3 3))</span><br><span class="line">? 6</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">scm&gt; (not (and #t #f 42 (/ 1 0)))</span><br><span class="line">? #t</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Problem 12 &gt; Suite 1 &gt; Case 2</span><br><span class="line">(cases remaining: 8)</span><br><span class="line"></span><br><span class="line">-- Already unlocked --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Problem 12 &gt; Suite 1 &gt; Case 3</span><br><span class="line">(cases remaining: 7)</span><br><span class="line"></span><br><span class="line">-- Already unlocked --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Problem 12 &gt; Suite 1 &gt; Case 4</span><br><span class="line">(cases remaining: 6)</span><br><span class="line"></span><br><span class="line">-- Already unlocked --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Problem 12 &gt; Suite 2 &gt; Case 1</span><br><span class="line">(cases remaining: 5)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">scm&gt; (or)</span><br><span class="line">? #f</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">scm&gt; (or (+ 1 1))</span><br><span class="line">? 2</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">scm&gt; (not (or #f))</span><br><span class="line">? #t</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">scm&gt; (define (zero) 0)</span><br><span class="line">? zero</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">scm&gt; (or (zero) 3)</span><br><span class="line">? 0</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">scm&gt; (or 4 #t (/ 1 0))</span><br><span class="line">? 4</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Problem 12 &gt; Suite 2 &gt; Case 2</span><br><span class="line">(cases remaining: 4)</span><br><span class="line"></span><br><span class="line">-- Already unlocked --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Problem 12 &gt; Suite 2 &gt; Case 3</span><br><span class="line">(cases remaining: 3)</span><br><span class="line"></span><br><span class="line">-- Already unlocked --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Problem 12 &gt; Suite 2 &gt; Case 4</span><br><span class="line">(cases remaining: 2)</span><br><span class="line"></span><br><span class="line">-- Already unlocked --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Problem 12 &gt; Suite 2 &gt; Case 5</span><br><span class="line">(cases remaining: 1)</span><br><span class="line"></span><br><span class="line">-- Already unlocked --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">OK! All cases for Problem 12 unlocked.</span><br></pre></td></tr></table></figure><p><strong>scheme/scheme_forms.py</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">def do_and_form(expressions, env):</span><br><span class="line">    &quot;&quot;&quot;Evaluate a (short-circuited) and form.</span><br><span class="line"></span><br><span class="line">    &gt;&gt;&gt; env = create_global_frame()</span><br><span class="line">    &gt;&gt;&gt; do_and_form(read_line(&quot;(#f (print 1))&quot;), env) # evaluating (and #f (print 1))</span><br><span class="line">    False</span><br><span class="line">    &gt;&gt;&gt; # evaluating (and (print 1) (print 2) (print 4) 3 #f)</span><br><span class="line">    &gt;&gt;&gt; do_and_form(read_line(&quot;((print 1) (print 2) (print 3) (print 4) 3 #f)&quot;), env)</span><br><span class="line">    1</span><br><span class="line">    2</span><br><span class="line">    3</span><br><span class="line">    4</span><br><span class="line">    False</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    # BEGIN PROBLEM 12</span><br><span class="line">    &quot;*** YOUR CODE HERE ***&quot;</span><br><span class="line">    if expressions is nil:</span><br><span class="line">        return True</span><br><span class="line">    val = scheme_eval(expressions.first, env)</span><br><span class="line">    if is_scheme_true(val):</span><br><span class="line">        if expressions.rest is nil:</span><br><span class="line">            return val</span><br><span class="line">        else:</span><br><span class="line">            return do_and_form(expressions.rest, env)</span><br><span class="line">    else:</span><br><span class="line">        return False</span><br><span class="line">    # END PROBLEM 12</span><br><span class="line"></span><br><span class="line">def do_or_form(expressions, env):</span><br><span class="line">    &quot;&quot;&quot;Evaluate a (short-circuited) or form.</span><br><span class="line"></span><br><span class="line">    &gt;&gt;&gt; env = create_global_frame()</span><br><span class="line">    &gt;&gt;&gt; do_or_form(read_line(&quot;(10 (print 1))&quot;), env) # evaluating (or 10 (print 1))</span><br><span class="line">    10</span><br><span class="line">    &gt;&gt;&gt; do_or_form(read_line(&quot;(#f 2 3 #t #f)&quot;), env) # evaluating (or #f 2 3 #t #f)</span><br><span class="line">    2</span><br><span class="line">    &gt;&gt;&gt; # evaluating (or (begin (print 1) #f) (begin (print 2) #f) 6 (begin (print 3) 7))</span><br><span class="line">    &gt;&gt;&gt; do_or_form(read_line(&quot;((begin (print 1) #f) (begin (print 2) #f) 6 (begin (print 3) 7))&quot;), env)</span><br><span class="line">    1</span><br><span class="line">    2</span><br><span class="line">    6</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    # BEGIN PROBLEM 12</span><br><span class="line">    &quot;*** YOUR CODE HERE ***&quot;</span><br><span class="line">    if expressions is nil:</span><br><span class="line">        return False</span><br><span class="line">    val = scheme_eval(expressions.first, env)</span><br><span class="line">    if is_scheme_true(val):</span><br><span class="line">        return val</span><br><span class="line">    else:</span><br><span class="line">        return do_or_form(expressions.rest, env)</span><br><span class="line">    # END PROBLEM 12</span><br></pre></td></tr></table></figure><h2 id="Problem-13-2-pt-2">Problem 13 (2 pt)</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">$ python3 ok -q 13 -u</span><br><span class="line">=====================================================================</span><br><span class="line">Assignment: Project 4: Scheme Interpreter</span><br><span class="line">OK, version v1.18.1</span><br><span class="line">=====================================================================</span><br><span class="line"></span><br><span class="line">~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br><span class="line">Unlocking tests</span><br><span class="line"></span><br><span class="line">At each &quot;? &quot;, type what you would expect the output to be.</span><br><span class="line">Type exit() to quit</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Problem 13 &gt; Suite 1 &gt; Case 1</span><br><span class="line">(cases remaining: 6)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">scm&gt; (cond ((&gt; 2 3) 5)</span><br><span class="line">....       ((&gt; 2 4) 6)</span><br><span class="line">....       ((&lt; 2 5) 7)</span><br><span class="line">....       (else 8))</span><br><span class="line">? 7</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">scm&gt; (cond ((&gt; 2 3) 5)</span><br><span class="line">....       ((&gt; 2 4) 6)</span><br><span class="line">....       (else 8))</span><br><span class="line">? 8</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">scm&gt; (cond ((= 1 1))</span><br><span class="line">....       ((= 4 4) &#x27;huh)</span><br><span class="line">....       (else &#x27;no))</span><br><span class="line">? #t</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Problem 13 &gt; Suite 2 &gt; Case 1</span><br><span class="line">(cases remaining: 5)</span><br><span class="line"></span><br><span class="line">-- Already unlocked --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Problem 13 &gt; Suite 2 &gt; Case 2</span><br><span class="line">(cases remaining: 4)</span><br><span class="line"></span><br><span class="line">-- Already unlocked --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Problem 13 &gt; Suite 2 &gt; Case 3</span><br><span class="line">(cases remaining: 3)</span><br><span class="line"></span><br><span class="line">-- Already unlocked --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Problem 13 &gt; Suite 2 &gt; Case 4</span><br><span class="line">(cases remaining: 2)</span><br><span class="line"></span><br><span class="line">-- Already unlocked --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Problem 13 &gt; Suite 2 &gt; Case 5</span><br><span class="line">(cases remaining: 1)</span><br><span class="line"></span><br><span class="line">-- Already unlocked --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">OK! All cases for Problem 13 unlocked.</span><br></pre></td></tr></table></figure><p><strong>scheme/scheme_forms.py</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">def do_cond_form(expressions, env):</span><br><span class="line">    &quot;&quot;&quot;Evaluate a cond form.</span><br><span class="line"></span><br><span class="line">    &gt;&gt;&gt; do_cond_form(read_line(&quot;((#f (print 2)) (#t 3))&quot;), create_global_frame())</span><br><span class="line">    3</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    while expressions is not nil:</span><br><span class="line">        clause = expressions.first</span><br><span class="line">        validate_form(clause, 1)</span><br><span class="line">        if clause.first == &#x27;else&#x27;:</span><br><span class="line">            test = True</span><br><span class="line">            if expressions.rest != nil:</span><br><span class="line">                raise SchemeError(&#x27;else must be last&#x27;)</span><br><span class="line">        else:</span><br><span class="line">            test = scheme_eval(clause.first, env)</span><br><span class="line">        if is_scheme_true(test):</span><br><span class="line">            # BEGIN PROBLEM 13</span><br><span class="line">            &quot;*** YOUR CODE HERE ***&quot;</span><br><span class="line">            if clause.rest is nil:</span><br><span class="line">                return test</span><br><span class="line">            else:</span><br><span class="line">                return eval_all(clause.rest, env)</span><br><span class="line">            # END PROBLEM 13</span><br><span class="line">        expressions = expressions.rest</span><br></pre></td></tr></table></figure><h2 id="Problem-14-2-pt-2">Problem 14 (2 pt)</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line">$ python3 ok -q 14 -u</span><br><span class="line">=====================================================================</span><br><span class="line">Assignment: Project 4: Scheme Interpreter</span><br><span class="line">OK, version v1.18.1</span><br><span class="line">=====================================================================</span><br><span class="line"></span><br><span class="line">~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br><span class="line">Unlocking tests</span><br><span class="line"></span><br><span class="line">At each &quot;? &quot;, type what you would expect the output to be.</span><br><span class="line">Type exit() to quit</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Problem 14 &gt; Suite 1 &gt; Case 1</span><br><span class="line">(cases remaining: 9)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">scm&gt; (define x 1)</span><br><span class="line">? x</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">scm&gt; (let ((x 5))</span><br><span class="line">....    (+ x 3))</span><br><span class="line">? 8</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">scm&gt; x</span><br><span class="line">? 1</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Problem 14 &gt; Suite 1 &gt; Case 2</span><br><span class="line">(cases remaining: 8)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">scm&gt; (let ((a 1) (b a)) b)</span><br><span class="line">Choose the number of the correct choice:</span><br><span class="line">0) y</span><br><span class="line">1) 1</span><br><span class="line">2) SchemeError</span><br><span class="line">3) x</span><br><span class="line">? 2</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Problem 14 &gt; Suite 1 &gt; Case 3</span><br><span class="line">(cases remaining: 7)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">scm&gt; (let ((x 5))</span><br><span class="line">....    (let ((x 2)</span><br><span class="line">....          (y x))</span><br><span class="line">....        (+ y (* x 2))))</span><br><span class="line">? 9</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Problem 14 &gt; Suite 1 &gt; Case 4</span><br><span class="line">(cases remaining: 6)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">scm&gt; (let ((a 2) (a 3)) (+ a a)) ; how should we catch something like this?</span><br><span class="line">? SchemeError</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">scm&gt; (let ((y 2 3)) (+ y y)) ; should this be an allowable form?</span><br><span class="line">? SchemeError</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Problem 14 &gt; Suite 1 &gt; Case 5</span><br><span class="line">(cases remaining: 5)</span><br><span class="line"></span><br><span class="line">-- Already unlocked --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Problem 14 &gt; Suite 2 &gt; Case 1</span><br><span class="line">(cases remaining: 4)</span><br><span class="line"></span><br><span class="line">-- Already unlocked --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Problem 14 &gt; Suite 2 &gt; Case 2</span><br><span class="line">(cases remaining: 3)</span><br><span class="line"></span><br><span class="line">-- Already unlocked --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Problem 14 &gt; Suite 2 &gt; Case 3</span><br><span class="line">(cases remaining: 2)</span><br><span class="line"></span><br><span class="line">-- Already unlocked --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Problem 14 &gt; Suite 3 &gt; Case 1</span><br><span class="line">(cases remaining: 1)</span><br><span class="line"></span><br><span class="line">-- Already unlocked --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">OK! All cases for Problem 14 unlocked.</span><br></pre></td></tr></table></figure><p><strong>scheme/scheme_forms.py</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">def make_let_frame(bindings, env):</span><br><span class="line">    &quot;&quot;&quot;Create a child frame of Frame ENV that contains the definitions given in</span><br><span class="line">    BINDINGS. The Scheme list BINDINGS must have the form of a proper bindings</span><br><span class="line">    list in a let expression: each item must be a list containing a symbol</span><br><span class="line">    and a Scheme expression.&quot;&quot;&quot;</span><br><span class="line">    if not scheme_listp(bindings):</span><br><span class="line">        raise SchemeError(&#x27;bad bindings list in let form&#x27;)</span><br><span class="line">    names = vals = nil</span><br><span class="line">    # BEGIN PROBLEM 14</span><br><span class="line">    &quot;*** YOUR CODE HERE ***&quot;</span><br><span class="line">    while bindings is not nil:</span><br><span class="line">        validate_form(bindings.first, 2, 2)</span><br><span class="line">        name = (bindings.first.first)</span><br><span class="line">        val = (scheme_eval(bindings.first.rest.first, env))</span><br><span class="line"></span><br><span class="line">        if names is nil:</span><br><span class="line">            names = Pair(name, nil)</span><br><span class="line">            name_tmp = names</span><br><span class="line">        else:</span><br><span class="line">            name_tmp.rest = Pair(name, nil)</span><br><span class="line">            name_tmp = name_tmp.rest</span><br><span class="line">        if vals is nil:</span><br><span class="line">            vals = Pair(val, nil)</span><br><span class="line">            val_tmp = vals</span><br><span class="line">        else:</span><br><span class="line">            val_tmp.rest = Pair(val, nil)</span><br><span class="line">            val_tmp = val_tmp.rest</span><br><span class="line">        bindings = bindings.rest</span><br><span class="line"></span><br><span class="line">    validate_formals(names)</span><br><span class="line">    # END PROBLEM 14</span><br><span class="line">    return env.make_child_frame(names, vals)</span><br></pre></td></tr></table></figure><h2 id="Problem-15-2-pt-2">Problem 15 (2 pt)</h2><p><strong>scheme/questions.scm</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">;; Problem 15</span><br><span class="line">;; Returns a list of two-element lists</span><br><span class="line">(define (enumerate s)</span><br><span class="line">  ; BEGIN PROBLEM 15</span><br><span class="line">  &#x27;replace-this-line</span><br><span class="line">  (define (help idx ele)</span><br><span class="line">      (if (null? ele) nil</span><br><span class="line">          (cons (list idx (car ele)) (help (+ idx 1) (cdr ele))))) (help 0 s)</span><br><span class="line">  )</span><br><span class="line">  ; END PROBLEM 15</span><br></pre></td></tr></table></figure><h2 id="Problem-16-2-pt-2">Problem 16 (2 pt)</h2><p><strong>scheme/questions.scm</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">;; Problem 16</span><br><span class="line"></span><br><span class="line">;; Merge two lists LIST1 and LIST2 according to INORDER? and return</span><br><span class="line">;; the merged lists.</span><br><span class="line">(define (merge inorder? list1 list2)</span><br><span class="line">  ; BEGIN PROBLEM 16</span><br><span class="line">  &#x27;replace-this-line</span><br><span class="line">  (cond ((null? list1) list2)</span><br><span class="line">       ((null? list2) list1)</span><br><span class="line">       (else</span><br><span class="line">            (if (inorder? (car list1) (car list2))</span><br><span class="line">                (cons (car list1) (merge inorder? (cdr list1) list2))</span><br><span class="line">                (cons (car list2) (merge inorder? list1 (cdr list2)))</span><br><span class="line">            )</span><br><span class="line">        )</span><br><span class="line">  )</span><br><span class="line">  )</span><br><span class="line">  ; END PROBLEM 16</span><br></pre></td></tr></table></figure><h2 id="Problem-EC-1-2-pt-2">Problem EC 1 (2 pt)</h2><p><strong>scheme/scheme_eval_apply.py</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">def optimize_tail_calls(unoptimized_scheme_eval):</span><br><span class="line">    &quot;&quot;&quot;Return a properly tail recursive version of an eval function.&quot;&quot;&quot;</span><br><span class="line">    def optimized_eval(expr, env, tail=False):</span><br><span class="line">        &quot;&quot;&quot;Evaluate Scheme expression EXPR in Frame ENV. If TAIL,</span><br><span class="line">        return an Unevaluated containing an expression for further evaluation.</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        if tail and not scheme_symbolp(expr) and not self_evaluating(expr):</span><br><span class="line">            return Unevaluated(expr, env)</span><br><span class="line"></span><br><span class="line">        result = Unevaluated(expr, env)</span><br><span class="line">        # BEGIN PROBLEM EC</span><br><span class="line">        &quot;*** YOUR CODE HERE ***&quot;</span><br><span class="line">        while isinstance(result, Unevaluated):</span><br><span class="line">            result = unoptimized_scheme_eval(result.expr, result.env)</span><br><span class="line">        return result</span><br><span class="line">        # END PROBLEM EC</span><br><span class="line">    return optimized_eval</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="CS61A" scheme="http://www.misaka-9982.com/tags/CS61A/"/>
    
  </entry>
  
  <entry>
    <title>CS188 Proj 2</title>
    <link href="http://www.misaka-9982.com/2022/12/16/CS188-Proj-2/"/>
    <id>http://www.misaka-9982.com/2022/12/16/CS188-Proj-2/</id>
    <published>2022-12-16T13:21:03.000Z</published>
    <updated>2022-12-20T10:31:00.869Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1>Project 2: Multi-Agent Search</h1><p>Due: <strong>Thursday, September 22, 11:59 PM PT</strong>.</p><hr><p><img src="https://cdn.jsdelivr.net/gh/Misaka-9982-coder/img_hosting/img/pacman_multi_agent-20221216212121291.png" alt="img"></p><p>Pacman, now with ghosts.<br>Minimax, Expectimax,<br>Evaluation</p><hr><h2 id="TABLE-OF-CONTENTS">TABLE OF CONTENTS</h2><p>TABLE OF CONTENTS</p><ul><li>Introduction</li><li>Welcome to Multi-Agent Pacman</li><li>Q1 (4 pts): Reflex Agent</li><li>Q2 (5 pts): Minimax<ul><li>Hints and Observations</li></ul></li><li>Q3 (5 pts): Alpha-Beta Pruning</li><li>Q4 (5 pts): Expectimax</li><li>Q5 (6 pts): Evaluation Function</li></ul><hr><h2 id="Introduction">Introduction</h2><p>In this project, you will design agents for the classic version of Pacman, including ghosts. Along the way, you will implement both minimax and expectimax search and try your hand at evaluation function design.</p><p>The code base has not changed much from the previous project, but please start with a fresh installation, rather than intermingling files from project 1.</p><p>As in project 1, this project includes an autograder for you to grade your answers on your machine. This can be run on all questions with the command:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python autograder.py</span><br></pre></td></tr></table></figure><p>It can be run for one particular question, such as q2, by:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python autograder.py -q q2</span><br></pre></td></tr></table></figure><p>It can be run for one particular test by commands of the form:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python autograder.py -t test_cases/q2/0-small-tree</span><br></pre></td></tr></table></figure><p>By default, the autograder displays graphics with the <code>-t</code> option, but doesn’t with the <code>-q</code> option. You can force graphics by using the <code>--graphics</code> flag, or force no graphics by using the <code>--no-graphics</code> flag.</p><p>See the autograder tutorial in Project 0 for more information about using the autograder.</p><p>The code for this project contains the following files, available as a <a href="https://inst.eecs.berkeley.edu/~cs188/fa22/assets/projects/multiagent.zip">zip archive</a>.</p><table><thead><tr><th><strong>Files you’ll edit:</strong></th><th></th></tr></thead><tbody><tr><td><code>multiAgents.py</code></td><td>Where all of your multi-agent search agents will reside.</td></tr><tr><td><strong>Files you might want to look at:</strong></td><td></td></tr><tr><td><code>pacman.py</code></td><td>The main file that runs Pacman games. This file also describes a Pacman GameState type, which you will use extensively in this project.</td></tr><tr><td><code>game.py</code></td><td>The logic behind how the Pacman world works. This file describes several supporting types like AgentState, Agent, Direction, and Grid.</td></tr><tr><td><code>util.py</code></td><td>Useful data structures for implementing search algorithms. You don’t need to use these for this project, but may find other functions defined here to be useful.</td></tr><tr><td><strong>Supporting files you can ignore:</strong></td><td></td></tr><tr><td><code>graphicsDisplay.py</code></td><td>Graphics for Pacman</td></tr><tr><td><code>graphicsUtils.py</code></td><td>Support for Pacman graphics</td></tr><tr><td><code>textDisplay.py</code></td><td>ASCII graphics for Pacman</td></tr><tr><td><code>ghostAgents.py</code></td><td>Agents to control ghosts</td></tr><tr><td><code>keyboardAgents.py</code></td><td>Keyboard interfaces to control Pacman</td></tr><tr><td><code>layout.py</code></td><td>Code for reading layout files and storing their contents</td></tr><tr><td><code>autograder.py</code></td><td>Project autograder</td></tr><tr><td><code>testParser.py</code></td><td>Parses autograder test and solution files</td></tr><tr><td><code>testClasses.py</code></td><td>General autograding test classes</td></tr><tr><td><code>test_cases/</code></td><td>Directory containing the test cases for each question</td></tr><tr><td><code>multiagentTestClasses.py</code></td><td>Project 2 specific autograding test classes</td></tr></tbody></table><p><strong>Files to Edit and Submit</strong>: You will fill in portions of <a href="http://multiAgents.py">multiAgents.py</a> during the assignment. Once you have completed the assignment, you will submit a token generated by submission_autograder.py. Please do not change the other files in this distribution or submit any of our original files other than this file.</p><p><strong>Evaluation</strong>: Your code will be autograded for technical correctness. Please do not change the names of any provided functions or classes within the code, or you will wreak havoc on the autograder. However, the correctness of your implementation – not the autograder’s judgements – will be the final judge of your score. If necessary, we will review and grade assignments individually to ensure that you receive due credit for your work.</p><p><strong>Academic Dishonesty</strong>: We will be checking your code against other submissions in the class for logical redundancy. If you copy someone else’s code and submit it with minor changes, we will know. These cheat detectors are quite hard to fool, so please don’t try. We trust you all to submit your own work only; please don’t let us down. If you do, we will pursue the strongest consequences available to us.</p><p><strong>Getting Help</strong>: You are not alone! If you find yourself stuck on something, contact the course staff for help. Office hours, section, and the discussion forum are there for your support; please use them. If you can’t make our office hours, let us know and we will schedule more. We want these projects to be rewarding and instructional, not frustrating and demoralizing. But, we don’t know when or how to help unless you ask.</p><p><strong>Discussion</strong>: Please be careful not to post spoilers.</p><hr><h2 id="Welcome-to-Multi-Agent-Pacman">Welcome to Multi-Agent Pacman</h2><p>First, play a game of classic Pacman by running the following command:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python pacman.py</span><br></pre></td></tr></table></figure><p>and using the arrow keys to move. Now, run the provided ReflexAgent in <a href="http://multiAgents.py">multiAgents.py</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python pacman.py -p ReflexAgent</span><br></pre></td></tr></table></figure><p>Note that it plays quite poorly even on simple layouts:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python pacman.py -p ReflexAgent -l testClassic</span><br></pre></td></tr></table></figure><p>Inspect its code (in <code>multiAgents.py</code>) and make sure you understand what it’s doing.</p><hr><h2 id="Q1-4-pts-Reflex-Agent">Q1 (4 pts): Reflex Agent</h2><p>Improve the <code>ReflexAgent</code> in <code>multiAgents.py</code> to play respectably. The provided reflex agent code provides some helpful examples of methods that query the <code>GameState</code> for information. A capable reflex agent will have to consider both food locations and ghost locations to perform well. Your agent should easily and reliably clear the <code>testClassic</code> layout:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python pacman.py -p ReflexAgent -l testClassic</span><br></pre></td></tr></table></figure><p>Try out your reflex agent on the default <code>mediumClassic</code> layout with one ghost or two (and animation off to speed up the display):</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python pacman.py --frameTime 0 -p ReflexAgent -k 1</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python pacman.py --frameTime 0 -p ReflexAgent -k 2</span><br></pre></td></tr></table></figure><p>How does your agent fare? It will likely often die with 2 ghosts on the default board, unless your evaluation function is quite good.</p><p><em>Note</em>: Remember that <code>newFood</code> has the function <code>asList()</code></p><p><em>Note</em>: As features, try the reciprocal of important values (such as distance to food) rather than just the values themselves.</p><p><em>Note</em>: The evaluation function you’re writing is evaluating state-action pairs; in later parts of the project, you’ll be evaluating states.</p><p><em>Note</em>: You may find it useful to view the internal contents of various objects for debugging. You can do this by printing the objects’ string representations. For example, you can print <code>newGhostStates</code> with <code>print(newGhostStates)</code>.</p><p>Options: Default ghosts are random; you can also play for fun with slightly smarter directional ghosts using <code>-g DirectionalGhost</code>. If the randomness is preventing you from telling whether your agent is improving, you can use <code>-f</code> to run with a fixed random seed (same random choices every game). You can also play multiple games in a row with <code>-n</code>. Turn off graphics with <code>-q</code> to run lots of games quickly.</p><p><em>Grading</em>: We will run your agent on the <code>openClassic</code> layout 10 times. You will receive 0 points if your agent times out, or never wins. You will receive 1 point if your agent wins at least 5 times, or 2 points if your agent wins all 10 games. You will receive an additional 1 point if your agent’s average score is greater than 500, or 2 points if it is greater than 1000. You can try your agent out under these conditions with</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python autograder.py -q q1</span><br></pre></td></tr></table></figure><p>To run it without graphics, use:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python autograder.py -q q1 --no-graphics</span><br></pre></td></tr></table></figure><p>Don’t spend too much time on this question, though, as the meat of the project lies ahead.</p><h3 id="Answer-3">Answer</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ReflexAgent</span>(<span class="params">Agent</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    A reflex agent chooses an action at each choice point by examining</span></span><br><span class="line"><span class="string">    its alternatives via a state evaluation function.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    The code below is provided as a guide.  You are welcome to change</span></span><br><span class="line"><span class="string">    it in any way you see fit, so long as you don&#x27;t touch our method</span></span><br><span class="line"><span class="string">    headers.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getAction</span>(<span class="params">self, gameState: GameState</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        You do not need to change this method, but you&#x27;re welcome to.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        getAction chooses among the best options according to the evaluation function.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Just like in the previous project, getAction takes a GameState and returns</span></span><br><span class="line"><span class="string">        some Directions.X for some X in the set &#123;NORTH, SOUTH, WEST, EAST, STOP&#125;</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># Collect legal moves and successor states</span></span><br><span class="line">        legalMoves = gameState.getLegalActions()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Choose one of the best actions</span></span><br><span class="line">        scores = [self.evaluationFunction(gameState, action) <span class="keyword">for</span> action <span class="keyword">in</span> legalMoves]</span><br><span class="line">        bestScore = <span class="built_in">max</span>(scores)</span><br><span class="line">        bestIndices = [index <span class="keyword">for</span> index <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(scores)) <span class="keyword">if</span> scores[index] == bestScore]</span><br><span class="line">        chosenIndex = random.choice(bestIndices) <span class="comment"># Pick randomly among the best</span></span><br><span class="line"></span><br><span class="line">        <span class="string">&quot;Add more of your code here if you want to&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> legalMoves[chosenIndex]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">evaluationFunction</span>(<span class="params">self, currentGameState: GameState, action</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Design a better evaluation function here.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        The evaluation function takes in the current and proposed successor</span></span><br><span class="line"><span class="string">        GameStates (pacman.py) and returns a number, where higher numbers are better.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        The code below extracts some useful information from the state, like the</span></span><br><span class="line"><span class="string">        remaining food (newFood) and Pacman position after moving (newPos).</span></span><br><span class="line"><span class="string">        newScaredTimes holds the number of moves that each ghost will remain</span></span><br><span class="line"><span class="string">        scared because of Pacman having eaten a power pellet.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Print out these variables to see what you&#x27;re getting, then combine them</span></span><br><span class="line"><span class="string">        to create a masterful evaluation function.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># Useful information you can extract from a GameState (pacman.py)</span></span><br><span class="line">        successorGameState = currentGameState.generatePacmanSuccessor(action)</span><br><span class="line">        newPos = successorGameState.getPacmanPosition()</span><br><span class="line">        newFood = successorGameState.getFood()</span><br><span class="line">        newGhostStates = successorGameState.getGhostStates()</span><br><span class="line">        newScaredTimes = [ghostState.scaredTimer <span class="keyword">for</span> ghostState <span class="keyword">in</span> newGhostStates]</span><br><span class="line"></span><br><span class="line">        <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">        distToPacman = partial(manhattanDistance, newPos)</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">ghostF</span>(<span class="params">ghost</span>):</span></span><br><span class="line">            dist = distToPacman(ghost.getPosition())</span><br><span class="line">            <span class="keyword">if</span> ghost.scaredTimer &gt; dist:</span><br><span class="line">                <span class="keyword">return</span> inf</span><br><span class="line">            <span class="keyword">if</span> dist &lt;= <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">return</span> -inf</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        ghostScore = <span class="built_in">min</span>(<span class="built_in">map</span>(ghostF, newGhostStates))</span><br><span class="line">        </span><br><span class="line">        distToClosestFood = <span class="built_in">min</span>(<span class="built_in">map</span>(distToPacman, newFood.asList()), default=inf)</span><br><span class="line">        closestFoodFeature = <span class="number">1.0</span> / (<span class="number">1.0</span> + distToClosestFood)</span><br><span class="line">        <span class="keyword">return</span> successorGameState.getScore() + closestFoodFeature + ghostScore</span><br></pre></td></tr></table></figure><hr><h2 id="Q2-5-pts-Minimax">Q2 (5 pts): Minimax</h2><p>Now you will write an adversarial search agent in the provided <code>MinimaxAgent</code> class stub in <code>multiAgents.py</code>. Your minimax agent should work with any number of ghosts, so you’ll have to write an algorithm that is slightly more general than what you’ve previously seen in lecture. In particular, your minimax tree will have multiple min layers (one for each ghost) for every max layer.</p><p>Your code should also expand the game tree to an arbitrary depth. Score the leaves of your minimax tree with the supplied <code>self.evaluationFunction</code>, which defaults to <code>scoreEvaluationFunction</code>. <code>MinimaxAgent</code> extends <code>MultiAgentSearchAgent</code>, which gives access to <code>self.depth</code> and <code>self.evaluationFunction</code>. Make sure your minimax code makes reference to these two variables where appropriate as these variables are populated in response to command line options.</p><p><em>Important</em>: A single search ply is considered to be one Pacman move and all the ghosts’ responses, so depth 2 search will involve Pacman and each ghost moving two times.</p><p><em>Grading</em>: We will be checking your code to determine whether it explores the correct number of game states. This is the only reliable way to detect some very subtle bugs in implementations of minimax. As a result, the autograder will be very picky about how many times you call <code>GameState.generateSuccessor</code>. If you call it any more or less than necessary, the autograder will complain. To test and debug your code, run</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python autograder.py -q q2</span><br></pre></td></tr></table></figure><p>This will show what your algorithm does on a number of small trees, as well as a pacman game. To run it without graphics, use:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python autograder.py -q q2 --no-graphics</span><br></pre></td></tr></table></figure><h3 id="Hints-and-Observations">Hints and Observations</h3><ul><li><p>Implement the algorithm recursively using helper function(s).</p></li><li><p>The correct implementation of minimax will lead to Pacman losing the game in some tests. This is not a problem: as it is correct behaviour, it will pass the tests.</p></li><li><p>The evaluation function for the Pacman test in this part is already written (<code>self.evaluationFunction</code>). You shouldn’t change this function, but recognize that now we’re evaluating states rather than actions, as we were for the reflex agent. Look-ahead agents evaluate future states whereas reflex agents evaluate actions from the current state.</p></li><li><p>The minimax values of the initial state in the</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">minimaxClassic</span><br></pre></td></tr></table></figure><p>layout are 9, 8, 7, -492 for depths 1, 2, 3 and 4 respectively. Note that your minimax agent will often win (665/1000 games for us) despite the dire prediction of depth 4 minimax.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python pacman.py -p MinimaxAgent -l minimaxClassic -a depth=4</span><br></pre></td></tr></table></figure></li><li><p>Pacman is always agent 0, and the agents move in order of increasing agent index.</p></li><li><p>All states in minimax should be <code>GameStates</code>, either passed in to <code>getAction</code> or generated via <code>GameState.generateSuccessor</code>. In this project, you will not be abstracting to simplified states.</p></li><li><p>On larger boards such as <code>openClassic</code> and <code>mediumClassic</code> (the default), you’ll find Pacman to be good at not dying, but quite bad at winning. He’ll often thrash around without making progress. He might even thrash around right next to a dot without eating it because he doesn’t know where he’d go after eating that dot. Don’t worry if you see this behavior, question 5 will clean up all of these issues.</p></li><li><p>When Pacman believes that his death is unavoidable, he will try to end the game as soon as possible because of the constant penalty for living. Sometimes, this is the wrong thing to do with random ghosts, but minimax agents always assume the worst:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python pacman.py -p MinimaxAgent -l trappedClassic -a depth=3</span><br></pre></td></tr></table></figure><p>Make sure you understand why Pacman rushes the closest ghost in this case.</p></li></ul><h3 id="Answer-4">Answer</h3><p>Get all the ghosts’ index number</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ghostIdx = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, gameState.getNumAgents())]</span><br></pre></td></tr></table></figure><p>Set terminal conditions</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">term</span>(<span class="params">state, depth</span>):</span></span><br><span class="line">  <span class="keyword">return</span> state.isWin() <span class="keyword">or</span> state.isLose() <span class="keyword">or</span> depth == self.depth</span><br></pre></td></tr></table></figure><p>Search for all the ghosts’ actions that lead to the Pacman’s benefit value minimum, if the current ghost is the last one, then we need to search for the Pacman at the next level to generate the maximum value for itself, otherwise, we just need to search for the next ghost’s action and find out the minimum.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">minValue</span>(<span class="params">state, depth, ghost</span>):</span></span><br><span class="line">  <span class="keyword">if</span> term(state, depth):</span><br><span class="line">    <span class="keyword">return</span> self.evaluationFunction(state)</span><br><span class="line"></span><br><span class="line">  value = <span class="number">1e9</span></span><br><span class="line">  <span class="keyword">for</span> action <span class="keyword">in</span> state.getLegalActions(ghost):</span><br><span class="line">    <span class="keyword">if</span> ghost == ghostIdx[-<span class="number">1</span>]:</span><br><span class="line">      value = <span class="built_in">min</span>(value, maxValue(state.generateSuccessor(ghost, action), depth + <span class="number">1</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">      value = <span class="built_in">min</span>(value, minValue(state.generateSuccessor(ghost, action), depth, ghost + <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> value</span><br></pre></td></tr></table></figure><p>Search for the action that leads to the maximum value that the Pacman can get.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">maxValue</span>(<span class="params">state, depth</span>):</span></span><br><span class="line">  <span class="keyword">if</span> term(state, depth):</span><br><span class="line">    <span class="keyword">return</span> self.evaluationFunction(state)</span><br><span class="line"></span><br><span class="line">  value = -<span class="number">1e9</span></span><br><span class="line">  <span class="keyword">for</span> action <span class="keyword">in</span> state.getLegalActions(<span class="number">0</span>):</span><br><span class="line">    value = <span class="built_in">max</span>(value, minValue(state.generateSuccessor(<span class="number">0</span>, action), depth, ghostIdx[<span class="number">0</span>]))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> value</span><br></pre></td></tr></table></figure><p>Bind the action and the value that the action generated, then sort the array by the value, return the maximum.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">res = [(action, minValue(gameState.generateSuccessor(<span class="number">0</span>, action), <span class="number">0</span>, ghostIdx[<span class="number">0</span>])) <span class="keyword">for</span> action <span class="keyword">in</span> gameState.getLegalActions(<span class="number">0</span>)]</span><br><span class="line">res.sort(key=<span class="keyword">lambda</span> k: k[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> res[-<span class="number">1</span>][<span class="number">0</span>]</span><br></pre></td></tr></table></figure><p>The full version of the code.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MinimaxAgent</span>(<span class="params">MultiAgentSearchAgent</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Your minimax agent (question 2)</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getAction</span>(<span class="params">self, gameState: GameState</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Returns the minimax action from the current gameState using self.depth</span></span><br><span class="line"><span class="string">        and self.evaluationFunction.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Here are some method calls that might be useful when implementing minimax.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        gameState.getLegalActions(agentIndex):</span></span><br><span class="line"><span class="string">        Returns a list of legal actions for an agent</span></span><br><span class="line"><span class="string">        agentIndex=0 means Pacman, ghosts are &gt;= 1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        gameState.generateSuccessor(agentIndex, action):</span></span><br><span class="line"><span class="string">        Returns the successor game state after an agent takes an action</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        gameState.getNumAgents():</span></span><br><span class="line"><span class="string">        Returns the total number of agents in the game</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        gameState.isWin():</span></span><br><span class="line"><span class="string">        Returns whether or not the game state is a winning state</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        gameState.isLose():</span></span><br><span class="line"><span class="string">        Returns whether or not the game state is a losing state</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">        <span class="comment"># util.raiseNotDefined()</span></span><br><span class="line">        ghostIdx = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, gameState.getNumAgents())]</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">term</span>(<span class="params">state, depth</span>):</span></span><br><span class="line">            <span class="keyword">return</span> state.isWin() <span class="keyword">or</span> state.isLose() <span class="keyword">or</span> depth == self.depth</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">minValue</span>(<span class="params">state, depth, ghost</span>):</span></span><br><span class="line">            <span class="keyword">if</span> term(state, depth):</span><br><span class="line">                <span class="keyword">return</span> self.evaluationFunction(state)</span><br><span class="line"></span><br><span class="line">            value = <span class="number">1e9</span></span><br><span class="line">            <span class="keyword">for</span> action <span class="keyword">in</span> state.getLegalActions(ghost):</span><br><span class="line">                <span class="keyword">if</span> ghost == ghostIdx[-<span class="number">1</span>]:</span><br><span class="line">                    value = <span class="built_in">min</span>(value, maxValue(state.generateSuccessor(ghost, action), depth + <span class="number">1</span>))</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    value = <span class="built_in">min</span>(value, minValue(state.generateSuccessor(ghost, action), depth, ghost + <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> value</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">maxValue</span>(<span class="params">state, depth</span>):</span></span><br><span class="line">            <span class="keyword">if</span> term(state, depth):</span><br><span class="line">                <span class="keyword">return</span> self.evaluationFunction(state)</span><br><span class="line"></span><br><span class="line">            value = -<span class="number">1e9</span></span><br><span class="line">            <span class="keyword">for</span> action <span class="keyword">in</span> state.getLegalActions(<span class="number">0</span>):</span><br><span class="line">                value = <span class="built_in">max</span>(value, minValue(state.generateSuccessor(<span class="number">0</span>, action), depth, ghostIdx[<span class="number">0</span>]))</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> value</span><br><span class="line"></span><br><span class="line">        res = [(action, minValue(gameState.generateSuccessor(<span class="number">0</span>, action), <span class="number">0</span>, ghostIdx[<span class="number">0</span>])) \</span><br><span class="line">            <span class="keyword">for</span> action <span class="keyword">in</span> gameState.getLegalActions(<span class="number">0</span>)]</span><br><span class="line">        res.sort(key=<span class="keyword">lambda</span> k: k[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res[-<span class="number">1</span>][<span class="number">0</span>]</span><br></pre></td></tr></table></figure><hr><h2 id="Q3-5-pts-Alpha-Beta-Pruning">Q3 (5 pts): Alpha-Beta Pruning</h2><p>Make a new agent that uses alpha-beta pruning to more efficiently explore the minimax tree, in <code>AlphaBetaAgent</code>. Again, your algorithm will be slightly more general than the pseudocode from lecture, so part of the challenge is to extend the alpha-beta pruning logic appropriately to multiple minimizer agents.</p><p>You should see a speed-up (perhaps depth 3 alpha-beta will run as fast as depth 2 minimax). Ideally, depth 3 on <code>smallClassic</code> should run in just a few seconds per move or faster.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python pacman.py -p AlphaBetaAgent -a depth=3 -l smallClassic</span><br></pre></td></tr></table></figure><p>The <code>AlphaBetaAgent</code> minimax values should be identical to the <code>MinimaxAgent</code> minimax values, although the actions it selects can vary because of different tie-breaking behavior. Again, the minimax values of the initial state in the <code>minimaxClassic</code> layout are 9, 8, 7 and -492 for depths 1, 2, 3 and 4 respectively.</p><p><em>Grading</em>: Because we check your code to determine whether it explores the correct number of states, it is important that you perform alpha-beta pruning without reordering children. In other words, successor states should always be processed in the order returned by <code>GameState.getLegalActions</code>. Again, do not call <code>GameState.generateSuccessor</code> more than necessary.</p><p><strong>You must not prune on equality in order to match the set of states explored by our autograder.</strong> (Indeed, alternatively, but incompatible with our autograder, would be to also allow for pruning on equality and invoke alpha-beta once on each child of the root node, but this will not match the autograder.)</p><p>The pseudo-code below represents the algorithm you should implement for this question.</p><p><img src="https://cdn.jsdelivr.net/gh/Misaka-9982-coder/img_hosting/img/alpha_beta_impl-20221216212122466.png" alt="Alpha-Beta Implementation"></p><p>To test and debug your code, run</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python autograder.py -q q3</span><br></pre></td></tr></table></figure><p>This will show what your algorithm does on a number of small trees, as well as a pacman game. To run it without graphics, use:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python autograder.py -q q3 --no-graphics</span><br></pre></td></tr></table></figure><p>The correct implementation of alpha-beta pruning will lead to Pacman losing some of the tests. This is not a problem: as it is correct behaviour, it will pass the tests.</p><h3 id="Answer-5">Answer</h3><ol><li>Using self-defined function, <code>alphaValue()</code>, <code>betaValue()</code> to choose the most appropriate action</li><li>Only when it’s the final state, can we get the value of each node, using the <code>self.evaluationFunction(gameState)</code></li><li>Otherwise, we just get the alpha/beta value we defined here.</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getNodeValue</span>(<span class="params">self, gameState, depth = <span class="number">0</span>, agentIdx = <span class="number">0</span>, alpha = -<span class="number">1e9</span>, beta = <span class="number">1e9</span></span>):</span></span><br><span class="line">  maxParty = [<span class="number">0</span>, ]</span><br><span class="line">  minParty = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">1</span>, gameState.getNumAgents()))</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> depth == self.depth <span class="keyword">or</span> gameState.isLose() <span class="keyword">or</span> gameState.isWin():</span><br><span class="line">    <span class="keyword">return</span> self.evaluationFunction(gameState)</span><br><span class="line">  <span class="keyword">elif</span> agentIdx <span class="keyword">in</span> maxParty:</span><br><span class="line">    <span class="keyword">return</span> self.alphaValue(gameState, depth, agentIdx, alpha, beta)</span><br><span class="line">  <span class="keyword">elif</span> agentIdx <span class="keyword">in</span> minParty:</span><br><span class="line">    <span class="keyword">return</span> self.betaValue(gameState, depth, agentIdx, alpha, beta)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">alphaValue</span>(<span class="params">self, gameState, depth, agentIdx, alpha = -<span class="number">1e9</span>, beta = <span class="number">1e9</span></span>):</span></span><br><span class="line">  <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">  maxParty, search for maximums</span></span><br><span class="line"><span class="string">  &quot;&quot;&quot;</span></span><br><span class="line">  value = -<span class="number">1e9</span></span><br><span class="line">  legalActions = gameState.getLegalActions(agentIdx)</span><br><span class="line">  <span class="keyword">for</span> index, action <span class="keyword">in</span> <span class="built_in">enumerate</span>(legalActions):</span><br><span class="line">    nextValue = self.getNodeValue(gameState.generateSuccessor(agentIdx, action), \</span><br><span class="line">                                  depth, agentIdx + <span class="number">1</span>, alpha, beta)</span><br><span class="line">    value = <span class="built_in">max</span>(value, nextValue)</span><br><span class="line">    <span class="keyword">if</span> value &gt; beta:  <span class="comment"># next_agent in which party</span></span><br><span class="line">      <span class="keyword">return</span> value</span><br><span class="line">    alpha = <span class="built_in">max</span>(alpha, value)</span><br><span class="line">    <span class="keyword">return</span> value</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">betaValue</span>(<span class="params">self, gameState, depth, agentIdx, alpha = -<span class="number">1e9</span>, beta = <span class="number">1e9</span></span>):</span></span><br><span class="line">  <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">  minParty, search for minimums</span></span><br><span class="line"><span class="string">  &quot;&quot;&quot;</span></span><br><span class="line">  value = <span class="number">1e9</span></span><br><span class="line">  legalActions = gameState.getLegalActions(agentIdx)</span><br><span class="line">  <span class="keyword">for</span> index, action <span class="keyword">in</span> <span class="built_in">enumerate</span>(legalActions):</span><br><span class="line">    <span class="keyword">if</span> agentIdx == gameState.getNumAgents() - <span class="number">1</span>:</span><br><span class="line">      nextValue = self.getNodeValue(gameState.generateSuccessor(agentIdx, action), \</span><br><span class="line">                                    depth + <span class="number">1</span>, <span class="number">0</span>, alpha, beta)</span><br><span class="line">      value = <span class="built_in">min</span>(value, nextValue)  <span class="comment"># begin next depth</span></span><br><span class="line">      <span class="keyword">if</span> value &lt; alpha:</span><br><span class="line">        <span class="keyword">return</span> value</span><br><span class="line">      <span class="keyword">else</span>:</span><br><span class="line">        nextValue = self.getNodeValue(gameState.generateSuccessor(agentIdx, action), \</span><br><span class="line">                                      depth, agentIdx + <span class="number">1</span>, alpha, beta)</span><br><span class="line">        value = <span class="built_in">min</span>(value, nextValue)  <span class="comment"># begin next depth</span></span><br><span class="line">        <span class="keyword">if</span> value &lt; alpha:  <span class="comment"># next agent goes on at the same depth</span></span><br><span class="line">          <span class="keyword">return</span> value</span><br><span class="line">        beta = <span class="built_in">min</span>(beta, value)</span><br><span class="line">        <span class="keyword">return</span> value</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AlphaBetaAgent</span>(<span class="params">MultiAgentSearchAgent</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Your minimax agent with alpha-beta pruning (question 3)</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getAction</span>(<span class="params">self, gameState: GameState</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Returns the minimax action using self.depth and self.evaluationFunction</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">        <span class="comment"># util.raiseNotDefined()</span></span><br><span class="line">        curValue, alpha, beta = -<span class="number">1e9</span>, -<span class="number">1e9</span>, <span class="number">1e9</span></span><br><span class="line">        nextPacmanAction = Directions.STOP</span><br><span class="line">        legalActions = gameState.getLegalActions(<span class="number">0</span>).copy()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> nextAction <span class="keyword">in</span> legalActions:</span><br><span class="line">            nextState = gameState.generateSuccessor(<span class="number">0</span>, nextAction)</span><br><span class="line">            nextValue = self.getNodeValue(nextState, <span class="number">0</span>, <span class="number">1</span>, alpha, beta)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> nextValue &gt; curValue:</span><br><span class="line">                curValue, nextPacmanAction = nextValue, nextAction</span><br><span class="line"></span><br><span class="line">            alpha = <span class="built_in">max</span>(alpha, curValue)</span><br><span class="line">        <span class="keyword">return</span> nextPacmanAction</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getNodeValue</span>(<span class="params">self, gameState, depth = <span class="number">0</span>, agentIdx = <span class="number">0</span>, alpha = -<span class="number">1e9</span>, beta = <span class="number">1e9</span></span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Using self-defined function, alphaValue(), betaValue() to choose the most appropriate action</span></span><br><span class="line"><span class="string">        Only when it&#x27;s the final state, can we get the value of each node, using the self.evaluationFunction(gameState)</span></span><br><span class="line"><span class="string">        Otherwise we just get the alpha/beta value we defined here.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        maxParty = [<span class="number">0</span>, ]</span><br><span class="line">        minParty = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">1</span>, gameState.getNumAgents()))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> depth == self.depth <span class="keyword">or</span> gameState.isLose() <span class="keyword">or</span> gameState.isWin():</span><br><span class="line">            <span class="keyword">return</span> self.evaluationFunction(gameState)</span><br><span class="line">        <span class="keyword">elif</span> agentIdx <span class="keyword">in</span> maxParty:</span><br><span class="line">            <span class="keyword">return</span> self.alphaValue(gameState, depth, agentIdx, alpha, beta)</span><br><span class="line">        <span class="keyword">elif</span> agentIdx <span class="keyword">in</span> minParty:</span><br><span class="line">            <span class="keyword">return</span> self.betaValue(gameState, depth, agentIdx, alpha, beta)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">alphaValue</span>(<span class="params">self, gameState, depth, agentIdx, alpha = -<span class="number">1e9</span>, beta = <span class="number">1e9</span></span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        maxParty, search for maximums</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        value = -<span class="number">1e9</span></span><br><span class="line">        legalActions = gameState.getLegalActions(agentIdx)</span><br><span class="line">        <span class="keyword">for</span> index, action <span class="keyword">in</span> <span class="built_in">enumerate</span>(legalActions):</span><br><span class="line">            nextValue = self.getNodeValue(gameState.generateSuccessor(agentIdx, action), \</span><br><span class="line">                depth, agentIdx + <span class="number">1</span>, alpha, beta)</span><br><span class="line">            value = <span class="built_in">max</span>(value, nextValue)</span><br><span class="line">            <span class="keyword">if</span> value &gt; beta:  <span class="comment"># next_agent in which party</span></span><br><span class="line">                <span class="keyword">return</span> value</span><br><span class="line">            alpha = <span class="built_in">max</span>(alpha, value)</span><br><span class="line">        <span class="keyword">return</span> value</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">betaValue</span>(<span class="params">self, gameState, depth, agentIdx, alpha = -<span class="number">1e9</span>, beta = <span class="number">1e9</span></span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        minParty, search for minimums</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        value = <span class="number">1e9</span></span><br><span class="line">        legalActions = gameState.getLegalActions(agentIdx)</span><br><span class="line">        <span class="keyword">for</span> index, action <span class="keyword">in</span> <span class="built_in">enumerate</span>(legalActions):</span><br><span class="line">            <span class="keyword">if</span> agentIdx == gameState.getNumAgents() - <span class="number">1</span>:</span><br><span class="line">                nextValue = self.getNodeValue(gameState.generateSuccessor(agentIdx, action), \</span><br><span class="line">                    depth + <span class="number">1</span>, <span class="number">0</span>, alpha, beta)</span><br><span class="line">                value = <span class="built_in">min</span>(value, nextValue)  <span class="comment"># begin next depth</span></span><br><span class="line">                <span class="keyword">if</span> value &lt; alpha:</span><br><span class="line">                    <span class="keyword">return</span> value</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                nextValue = self.getNodeValue(gameState.generateSuccessor(agentIdx, action), \</span><br><span class="line">                    depth, agentIdx + <span class="number">1</span>, alpha, beta)</span><br><span class="line">                value = <span class="built_in">min</span>(value, nextValue)  <span class="comment"># begin next depth</span></span><br><span class="line">                <span class="keyword">if</span> value &lt; alpha:  <span class="comment"># next agent goes on at the same depth</span></span><br><span class="line">                    <span class="keyword">return</span> value</span><br><span class="line">            beta = <span class="built_in">min</span>(beta, value)</span><br><span class="line">        <span class="keyword">return</span> value</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="Q4-5-pts-Expectimax">Q4 (5 pts): Expectimax</h2><p>Minimax and alpha-beta are great, but they both assume that you are playing against an adversary who makes optimal decisions. As anyone who has ever won tic-tac-toe can tell you, this is not always the case. In this question you will implement the <code>ExpectimaxAgent</code>, which is useful for modeling probabilistic behavior of agents who may make suboptimal choices.</p><p>As with the search and problems yet to be covered in this class, the beauty of these algorithms is their general applicability. To expedite your own development, we’ve supplied some test cases based on generic trees. You can debug your implementation on small the game trees using the command:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python autograder.py -q q4</span><br></pre></td></tr></table></figure><p>Debugging on these small and manageable test cases is recommended and will help you to find bugs quickly.</p><p>Once your algorithm is working on small trees, you can observe its success in Pacman. Random ghosts are of course not optimal minimax agents, and so modeling them with minimax search may not be appropriate. <code>ExpectimaxAgent</code> will no longer take the min over all ghost actions, but the expectation according to your agent’s model of how the ghosts act. To simplify your code, assume you will only be running against an adversary which chooses amongst their <code>getLegalActions</code> uniformly at random.</p><p>To see how the ExpectimaxAgent behaves in Pacman, run:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python pacman.py -p ExpectimaxAgent -l minimaxClassic -a depth=3</span><br></pre></td></tr></table></figure><p>You should now observe a more cavalier approach in close quarters with ghosts. In particular, if Pacman perceives that he could be trapped but might escape to grab a few more pieces of food, he’ll at least try. Investigate the results of these two scenarios:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python pacman.py -p AlphaBetaAgent -l trappedClassic -a depth=3 -q -n 10</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python pacman.py -p ExpectimaxAgent -l trappedClassic -a depth=3 -q -n 10</span><br></pre></td></tr></table></figure><p>You should find that your <code>ExpectimaxAgent</code> wins about half the time, while your <code>AlphaBetaAgent</code> always loses. Make sure you understand why the behavior here differs from the minimax case.</p><p>The correct implementation of expectimax will lead to Pacman losing some of the tests. This is not a problem: as it is correct behaviour, it will pass the tests.</p><h3 id="Answer-6">Answer</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">maxValue = -<span class="number">1e9</span></span><br><span class="line">maxAction = Directions.STOP</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> action <span class="keyword">in</span> gameState.getLegalActions(<span class="number">0</span>):</span><br><span class="line">  sucState = gameState.generateSuccessor(<span class="number">0</span>, action)</span><br><span class="line">  sucValue = self.getNodeValue(sucState, <span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">  <span class="keyword">if</span> sucValue &gt; maxValue:</span><br><span class="line">    maxValue, maxAction = sucValue, action</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> maxAction</span><br></pre></td></tr></table></figure><p>If the game state is the terminated, return the evaluation of the current state. Return the maximum value if the agent is the paceman, otherwise, return the expected value.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getNodeValue</span>(<span class="params">self, gameState, curDepth, agentIndex</span>):</span></span><br><span class="line">  <span class="keyword">if</span> curDepth == self.depth <span class="keyword">or</span> gameState.isWin() <span class="keyword">or</span> gameState.isLose():</span><br><span class="line">    <span class="keyword">return</span> self.evaluationFunction(gameState)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> agentIndex == <span class="number">0</span>:</span><br><span class="line">    <span class="keyword">return</span> self.maxValue(gameState, curDepth)</span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">return</span> self.expValue(gameState, curDepth, agentIndex)</span><br></pre></td></tr></table></figure><p>Search for the ghosts’ maximum value.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">maxValue</span>(<span class="params">self, gameState, curDepth</span>):</span></span><br><span class="line">  maxValue = -<span class="number">1e9</span></span><br><span class="line">  <span class="keyword">for</span> action <span class="keyword">in</span> gameState.getLegalActions(<span class="number">0</span>):</span><br><span class="line">    sucState = gameState.generateSuccessor(<span class="number">0</span>, action)</span><br><span class="line">    sucValue = self.getNodeValue(sucState, curDepth, <span class="number">1</span>)</span><br><span class="line">    maxValue = <span class="built_in">max</span>(maxValue, sucValue)</span><br><span class="line">  <span class="keyword">return</span> maxValue</span><br></pre></td></tr></table></figure><p>If the agent is the last ghost, enter the next depth and search for the Pacman’s maximum value, otherwise, search for the ghosts’ EXP value.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">expValue</span>(<span class="params">self, gameState, curDepth, agentIdx</span>):</span></span><br><span class="line">  totalValue = <span class="number">0.0</span></span><br><span class="line">  numAgent = gameState.getNumAgents()</span><br><span class="line">  <span class="keyword">for</span> action <span class="keyword">in</span> gameState.getLegalActions(agentIdx):</span><br><span class="line">    sucState = gameState.generateSuccessor(agentIdx, action)</span><br><span class="line">    <span class="keyword">if</span> agentIdx == numAgent - <span class="number">1</span>:</span><br><span class="line">      sucValue = self.getNodeValue(sucState, curDepth + <span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">      sucValue = self.getNodeValue(sucState, curDepth, agentIdx + <span class="number">1</span>)</span><br><span class="line">    totalValue += sucValue</span><br><span class="line"></span><br><span class="line">  numAction = <span class="built_in">len</span>(gameState.getLegalActions(agentIdx))</span><br><span class="line">  <span class="keyword">return</span> totalValue / numAction</span><br></pre></td></tr></table></figure><p>Complete code</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExpectimaxAgent</span>(<span class="params">MultiAgentSearchAgent</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">      Your expectimax agent (question 4)</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getAction</span>(<span class="params">self, gameState: GameState</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Returns the expectimax action using self.depth and self.evaluationFunction</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        All ghosts should be modeled as choosing uniformly at random from their</span></span><br><span class="line"><span class="string">        legal moves.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">        <span class="comment"># util.raiseNotDefined()</span></span><br><span class="line">        maxValue = -<span class="number">1e9</span></span><br><span class="line">        maxAction = Directions.STOP</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> action <span class="keyword">in</span> gameState.getLegalActions(<span class="number">0</span>):</span><br><span class="line">            sucState = gameState.generateSuccessor(<span class="number">0</span>, action)</span><br><span class="line">            sucValue = self.getNodeValue(sucState, <span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">if</span> sucValue &gt; maxValue:</span><br><span class="line">                maxValue, maxAction = sucValue, action</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> maxAction</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getNodeValue</span>(<span class="params">self, gameState, curDepth, agentIndex</span>):</span></span><br><span class="line">        <span class="keyword">if</span> curDepth == self.depth <span class="keyword">or</span> gameState.isWin() <span class="keyword">or</span> gameState.isLose():</span><br><span class="line">            <span class="keyword">return</span> self.evaluationFunction(gameState)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> agentIndex == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> self.maxValue(gameState, curDepth)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> self.expValue(gameState, curDepth, agentIndex)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxValue</span>(<span class="params">self, gameState, curDepth</span>):</span></span><br><span class="line">        maxValue = -<span class="number">1e9</span></span><br><span class="line">        <span class="keyword">for</span> action <span class="keyword">in</span> gameState.getLegalActions(<span class="number">0</span>):</span><br><span class="line">            sucState = gameState.generateSuccessor(<span class="number">0</span>, action)</span><br><span class="line">            sucValue = self.getNodeValue(sucState, curDepth, <span class="number">1</span>)</span><br><span class="line">            maxValue = <span class="built_in">max</span>(maxValue, sucValue)</span><br><span class="line">        <span class="keyword">return</span> maxValue</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">expValue</span>(<span class="params">self, gameState, curDepth, agentIndex</span>):</span></span><br><span class="line">        totalValue = <span class="number">0.0</span></span><br><span class="line">        numAgent = gameState.getNumAgents()</span><br><span class="line">        <span class="keyword">for</span> action <span class="keyword">in</span> gameState.getLegalActions(agentIndex):</span><br><span class="line">            sucState = gameState.generateSuccessor(agentIndex, action)</span><br><span class="line">            <span class="keyword">if</span> agentIndex == numAgent - <span class="number">1</span>:</span><br><span class="line">                sucValue = self.getNodeValue(sucState, curDepth + <span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                sucValue = self.getNodeValue(sucState, curDepth, agentIndex + <span class="number">1</span>)</span><br><span class="line">            totalValue += sucValue</span><br><span class="line"></span><br><span class="line">        numAction = <span class="built_in">len</span>(gameState.getLegalActions(agentIndex))</span><br><span class="line">        <span class="keyword">return</span> totalValue / numAction</span><br></pre></td></tr></table></figure><hr><h2 id="Q5-6-pts-Evaluation-Function">Q5 (6 pts): Evaluation Function</h2><p>Write a better evaluation function for Pacman in the provided function <code>betterEvaluationFunction</code>. The evaluation function should evaluate states, rather than actions like your reflex agent evaluation function did. With depth 2 search, your evaluation function should clear the <code>smallClassic</code> layout with one random ghost more than half the time and still run at a reasonable rate (to get full credit, Pacman should be averaging around 1000 points when he’s winning).</p><p><em>Grading</em>: the autograder will run your agent on the smallClassic layout 10 times. We will assign points to your evaluation function in the following way:</p><ul><li>If you win at least once without timing out the autograder, you receive 1 points. Any agent not satisfying these criteria will receive 0 points.</li><li>+1 for winning at least 5 times, +2 for winning all 10 times</li><li>+1 for an average score of at least 500, +2 for an average score of at least 1000 (including scores on lost games)</li><li>+1 if your games take on average less than 30 seconds on the autograder machine, when run with <code>--no-graphics</code>.</li><li>The additional points for average score and computation time will only be awarded if you win at least 5 times.</li><li>Please do not copy any files from Project 1, as it will not pass the autograder on Gradescope.</li></ul><p>You can try your agent out under these conditions with</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python autograder.py -q q5</span><br></pre></td></tr></table></figure><p>To run it without graphics, use:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python autograder.py -q q5 --no-graphics</span><br></pre></td></tr></table></figure><h3 id="Answer-7">Answer</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">betterEvaluationFunction</span>(<span class="params">currentGameState: GameState</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Your extreme ghost-hunting, pellet-nabbing, food-gobbling, unstoppable</span></span><br><span class="line"><span class="string">    evaluation function (question 5).</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    DESCRIPTION: &lt;write something here so we know what you did&gt;</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="comment"># util.raiseNotDefined()</span></span><br><span class="line">    newPos = currentGameState.getPacmanPosition()</span><br><span class="line">    newFood = currentGameState.getFood()</span><br><span class="line">    newGhostStates = currentGameState.getGhostStates()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Consts</span></span><br><span class="line">    INF = <span class="number">100000000.0</span>  <span class="comment"># Infinite value</span></span><br><span class="line">    WEIGHT_FOOD = <span class="number">10.0</span>  <span class="comment"># Food base value</span></span><br><span class="line">    WEIGHT_GHOST = -<span class="number">10.0</span>  <span class="comment"># Ghost base value</span></span><br><span class="line">    WEIGHT_SCARED_GHOST = <span class="number">100.0</span>  <span class="comment"># Scared ghost base value</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Base on gameState.getScore()</span></span><br><span class="line">    score = currentGameState.getScore()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Evaluate the distance to the closest food</span></span><br><span class="line">    distancesToFoodList = [util.manhattanDistance(newPos, foodPos) <span class="keyword">for</span> foodPos <span class="keyword">in</span> newFood.asList()]</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(distancesToFoodList) &gt; <span class="number">0</span>:</span><br><span class="line">        score += WEIGHT_FOOD / <span class="built_in">min</span>(distancesToFoodList)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        score += WEIGHT_FOOD</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Evaluate the distance to ghosts</span></span><br><span class="line">    <span class="keyword">for</span> ghost <span class="keyword">in</span> newGhostStates:</span><br><span class="line">        distance = manhattanDistance(newPos, ghost.getPosition())</span><br><span class="line">        <span class="keyword">if</span> distance &gt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> ghost.scaredTimer &gt; <span class="number">0</span>:  <span class="comment"># If scared, add points</span></span><br><span class="line">                score += WEIGHT_SCARED_GHOST / distance</span><br><span class="line">            <span class="keyword">else</span>:  <span class="comment"># If not, decrease points</span></span><br><span class="line">                score += WEIGHT_GHOST / distance</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> -INF  <span class="comment"># Pacman is dead at this point</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> score</span><br></pre></td></tr></table></figure><hr><h2 id="Autograder-Report">Autograder Report</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br></pre></td><td class="code"><pre><span class="line">Starting on 12-20 at 18:23:38</span><br><span class="line"></span><br><span class="line">Question q1</span><br><span class="line">===========</span><br><span class="line"></span><br><span class="line">Pacman emerges victorious! Score: 1238</span><br><span class="line">Pacman emerges victorious! Score: 1244</span><br><span class="line">Pacman emerges victorious! Score: 1239</span><br><span class="line">Pacman emerges victorious! Score: 1235</span><br><span class="line">Pacman emerges victorious! Score: 1233</span><br><span class="line">Pacman emerges victorious! Score: 1241</span><br><span class="line">Pacman emerges victorious! Score: 1246</span><br><span class="line">Pacman emerges victorious! Score: 1242</span><br><span class="line">Pacman emerges victorious! Score: 1239</span><br><span class="line">Pacman emerges victorious! Score: 1242</span><br><span class="line">Average Score: 1239.9</span><br><span class="line">Scores:        1238.0, 1244.0, 1239.0, 1235.0, 1233.0, 1241.0, 1246.0, 1242.0, 1239.0, 1242.0</span><br><span class="line">Win Rate:      10/10 (1.00)</span><br><span class="line">Record:        Win, Win, Win, Win, Win, Win, Win, Win, Win, Win</span><br><span class="line">*** PASS: test_cases/q1/grade-agent.test (4 of 4 points)</span><br><span class="line">***     1239.9 average score (2 of 2 points)</span><br><span class="line">***         Grading scheme:</span><br><span class="line">***          &lt; 500:  0 points</span><br><span class="line">***         &gt;= 500:  1 points</span><br><span class="line">***         &gt;= 1000:  2 points</span><br><span class="line">***     10 games not timed out (0 of 0 points)</span><br><span class="line">***         Grading scheme:</span><br><span class="line">***          &lt; 10:  fail</span><br><span class="line">***         &gt;= 10:  0 points</span><br><span class="line">***     10 wins (2 of 2 points)</span><br><span class="line">***         Grading scheme:</span><br><span class="line">***          &lt; 1:  fail</span><br><span class="line">***         &gt;= 1:  0 points</span><br><span class="line">***         &gt;= 5:  1 points</span><br><span class="line">***         &gt;= 10:  2 points</span><br><span class="line"></span><br><span class="line">### Question q1: 4/4 ###</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Question q2</span><br><span class="line">===========</span><br><span class="line"></span><br><span class="line">*** PASS: test_cases/q2/0-eval-function-lose-states-1.test</span><br><span class="line">*** PASS: test_cases/q2/0-eval-function-lose-states-2.test</span><br><span class="line">*** PASS: test_cases/q2/0-eval-function-win-states-1.test</span><br><span class="line">*** PASS: test_cases/q2/0-eval-function-win-states-2.test</span><br><span class="line">*** PASS: test_cases/q2/0-lecture-6-tree.test</span><br><span class="line">*** PASS: test_cases/q2/0-small-tree.test</span><br><span class="line">*** PASS: test_cases/q2/1-1-minmax.test</span><br><span class="line">*** PASS: test_cases/q2/1-2-minmax.test</span><br><span class="line">*** PASS: test_cases/q2/1-3-minmax.test</span><br><span class="line">*** PASS: test_cases/q2/1-4-minmax.test</span><br><span class="line">*** PASS: test_cases/q2/1-5-minmax.test</span><br><span class="line">*** PASS: test_cases/q2/1-6-minmax.test</span><br><span class="line">*** PASS: test_cases/q2/1-7-minmax.test</span><br><span class="line">*** PASS: test_cases/q2/1-8-minmax.test</span><br><span class="line">*** PASS: test_cases/q2/2-1a-vary-depth.test</span><br><span class="line">*** PASS: test_cases/q2/2-1b-vary-depth.test</span><br><span class="line">*** PASS: test_cases/q2/2-2a-vary-depth.test</span><br><span class="line">*** PASS: test_cases/q2/2-2b-vary-depth.test</span><br><span class="line">*** PASS: test_cases/q2/2-3a-vary-depth.test</span><br><span class="line">*** PASS: test_cases/q2/2-3b-vary-depth.test</span><br><span class="line">*** PASS: test_cases/q2/2-4a-vary-depth.test</span><br><span class="line">*** PASS: test_cases/q2/2-4b-vary-depth.test</span><br><span class="line">*** PASS: test_cases/q2/2-one-ghost-3level.test</span><br><span class="line">*** PASS: test_cases/q2/3-one-ghost-4level.test</span><br><span class="line">*** PASS: test_cases/q2/4-two-ghosts-3level.test</span><br><span class="line">*** PASS: test_cases/q2/5-two-ghosts-4level.test</span><br><span class="line">*** PASS: test_cases/q2/6-tied-root.test</span><br><span class="line">*** PASS: test_cases/q2/7-1a-check-depth-one-ghost.test</span><br><span class="line">*** PASS: test_cases/q2/7-1b-check-depth-one-ghost.test</span><br><span class="line">*** PASS: test_cases/q2/7-1c-check-depth-one-ghost.test</span><br><span class="line">*** PASS: test_cases/q2/7-2a-check-depth-two-ghosts.test</span><br><span class="line">*** PASS: test_cases/q2/7-2b-check-depth-two-ghosts.test</span><br><span class="line">*** PASS: test_cases/q2/7-2c-check-depth-two-ghosts.test</span><br><span class="line">*** Running MinimaxAgent on smallClassic 1 time(s).</span><br><span class="line">Pacman died! Score: 84</span><br><span class="line">Average Score: 84.0</span><br><span class="line">Scores:        84.0</span><br><span class="line">Win Rate:      0/1 (0.00)</span><br><span class="line">Record:        Loss</span><br><span class="line">*** Finished running MinimaxAgent on smallClassic after 0 seconds.</span><br><span class="line">*** Won 0 out of 1 games. Average score: 84.000000 ***</span><br><span class="line">*** PASS: test_cases/q2/8-pacman-game.test</span><br><span class="line"></span><br><span class="line">### Question q2: 5/5 ###</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Question q3</span><br><span class="line">===========</span><br><span class="line"></span><br><span class="line">*** PASS: test_cases/q3/0-eval-function-lose-states-1.test</span><br><span class="line">*** PASS: test_cases/q3/0-eval-function-lose-states-2.test</span><br><span class="line">*** PASS: test_cases/q3/0-eval-function-win-states-1.test</span><br><span class="line">*** PASS: test_cases/q3/0-eval-function-win-states-2.test</span><br><span class="line">*** PASS: test_cases/q3/0-lecture-6-tree.test</span><br><span class="line">*** PASS: test_cases/q3/0-small-tree.test</span><br><span class="line">*** PASS: test_cases/q3/1-1-minmax.test</span><br><span class="line">*** PASS: test_cases/q3/1-2-minmax.test</span><br><span class="line">*** PASS: test_cases/q3/1-3-minmax.test</span><br><span class="line">*** PASS: test_cases/q3/1-4-minmax.test</span><br><span class="line">*** PASS: test_cases/q3/1-5-minmax.test</span><br><span class="line">*** PASS: test_cases/q3/1-6-minmax.test</span><br><span class="line">*** PASS: test_cases/q3/1-7-minmax.test</span><br><span class="line">*** PASS: test_cases/q3/1-8-minmax.test</span><br><span class="line">*** PASS: test_cases/q3/2-1a-vary-depth.test</span><br><span class="line">*** PASS: test_cases/q3/2-1b-vary-depth.test</span><br><span class="line">*** PASS: test_cases/q3/2-2a-vary-depth.test</span><br><span class="line">*** PASS: test_cases/q3/2-2b-vary-depth.test</span><br><span class="line">*** PASS: test_cases/q3/2-3a-vary-depth.test</span><br><span class="line">*** PASS: test_cases/q3/2-3b-vary-depth.test</span><br><span class="line">*** PASS: test_cases/q3/2-4a-vary-depth.test</span><br><span class="line">*** PASS: test_cases/q3/2-4b-vary-depth.test</span><br><span class="line">*** PASS: test_cases/q3/2-one-ghost-3level.test</span><br><span class="line">*** PASS: test_cases/q3/3-one-ghost-4level.test</span><br><span class="line">*** PASS: test_cases/q3/4-two-ghosts-3level.test</span><br><span class="line">*** PASS: test_cases/q3/5-two-ghosts-4level.test</span><br><span class="line">*** PASS: test_cases/q3/6-tied-root.test</span><br><span class="line">*** PASS: test_cases/q3/7-1a-check-depth-one-ghost.test</span><br><span class="line">*** PASS: test_cases/q3/7-1b-check-depth-one-ghost.test</span><br><span class="line">*** PASS: test_cases/q3/7-1c-check-depth-one-ghost.test</span><br><span class="line">*** PASS: test_cases/q3/7-2a-check-depth-two-ghosts.test</span><br><span class="line">*** PASS: test_cases/q3/7-2b-check-depth-two-ghosts.test</span><br><span class="line">*** PASS: test_cases/q3/7-2c-check-depth-two-ghosts.test</span><br><span class="line">*** Running AlphaBetaAgent on smallClassic 1 time(s).</span><br><span class="line">Pacman died! Score: 84</span><br><span class="line">Average Score: 84.0</span><br><span class="line">Scores:        84.0</span><br><span class="line">Win Rate:      0/1 (0.00)</span><br><span class="line">Record:        Loss</span><br><span class="line">*** Finished running AlphaBetaAgent on smallClassic after 0 seconds.</span><br><span class="line">*** Won 0 out of 1 games. Average score: 84.000000 ***</span><br><span class="line">*** PASS: test_cases/q3/8-pacman-game.test</span><br><span class="line"></span><br><span class="line">### Question q3: 5/5 ###</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Question q4</span><br><span class="line">===========</span><br><span class="line"></span><br><span class="line">*** PASS: test_cases/q4/0-eval-function-lose-states-1.test</span><br><span class="line">*** PASS: test_cases/q4/0-eval-function-lose-states-2.test</span><br><span class="line">*** PASS: test_cases/q4/0-eval-function-win-states-1.test</span><br><span class="line">*** PASS: test_cases/q4/0-eval-function-win-states-2.test</span><br><span class="line">*** PASS: test_cases/q4/0-expectimax1.test</span><br><span class="line">*** PASS: test_cases/q4/1-expectimax2.test</span><br><span class="line">*** PASS: test_cases/q4/2-one-ghost-3level.test</span><br><span class="line">*** PASS: test_cases/q4/3-one-ghost-4level.test</span><br><span class="line">*** PASS: test_cases/q4/4-two-ghosts-3level.test</span><br><span class="line">*** PASS: test_cases/q4/5-two-ghosts-4level.test</span><br><span class="line">*** PASS: test_cases/q4/6-1a-check-depth-one-ghost.test</span><br><span class="line">*** PASS: test_cases/q4/6-1b-check-depth-one-ghost.test</span><br><span class="line">*** PASS: test_cases/q4/6-1c-check-depth-one-ghost.test</span><br><span class="line">*** PASS: test_cases/q4/6-2a-check-depth-two-ghosts.test</span><br><span class="line">*** PASS: test_cases/q4/6-2b-check-depth-two-ghosts.test</span><br><span class="line">*** PASS: test_cases/q4/6-2c-check-depth-two-ghosts.test</span><br><span class="line">*** Running ExpectimaxAgent on smallClassic 1 time(s).</span><br><span class="line">Pacman died! Score: 84</span><br><span class="line">Average Score: 84.0</span><br><span class="line">Scores:        84.0</span><br><span class="line">Win Rate:      0/1 (0.00)</span><br><span class="line">Record:        Loss</span><br><span class="line">*** Finished running ExpectimaxAgent on smallClassic after 0 seconds.</span><br><span class="line">*** Won 0 out of 1 games. Average score: 84.000000 ***</span><br><span class="line">*** PASS: test_cases/q4/7-pacman-game.test</span><br><span class="line"></span><br><span class="line">### Question q4: 5/5 ###</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Question q5</span><br><span class="line">===========</span><br><span class="line"></span><br><span class="line">Pacman emerges victorious! Score: 1373</span><br><span class="line">Pacman emerges victorious! Score: 1339</span><br><span class="line">Pacman emerges victorious! Score: 1032</span><br><span class="line">Pacman emerges victorious! Score: 1008</span><br><span class="line">Pacman emerges victorious! Score: 1344</span><br><span class="line">Pacman emerges victorious! Score: 1357</span><br><span class="line">Pacman emerges victorious! Score: 1322</span><br><span class="line">Pacman emerges victorious! Score: 1370</span><br><span class="line">Pacman emerges victorious! Score: 1288</span><br><span class="line">Pacman emerges victorious! Score: 1372</span><br><span class="line">Average Score: 1280.5</span><br><span class="line">Scores:        1373.0, 1339.0, 1032.0, 1008.0, 1344.0, 1357.0, 1322.0, 1370.0, 1288.0, 1372.0</span><br><span class="line">Win Rate:      10/10 (1.00)</span><br><span class="line">Record:        Win, Win, Win, Win, Win, Win, Win, Win, Win, Win</span><br><span class="line">*** PASS: test_cases/q5/grade-agent.test (6 of 6 points)</span><br><span class="line">***     1280.5 average score (2 of 2 points)</span><br><span class="line">***         Grading scheme:</span><br><span class="line">***          &lt; 500:  0 points</span><br><span class="line">***         &gt;= 500:  1 points</span><br><span class="line">***         &gt;= 1000:  2 points</span><br><span class="line">***     10 games not timed out (1 of 1 points)</span><br><span class="line">***         Grading scheme:</span><br><span class="line">***          &lt; 0:  fail</span><br><span class="line">***         &gt;= 0:  0 points</span><br><span class="line">***         &gt;= 10:  1 points</span><br><span class="line">***     10 wins (3 of 3 points)</span><br><span class="line">***         Grading scheme:</span><br><span class="line">***          &lt; 1:  fail</span><br><span class="line">***         &gt;= 1:  1 points</span><br><span class="line">***         &gt;= 5:  2 points</span><br><span class="line">***         &gt;= 10:  3 points</span><br><span class="line"></span><br><span class="line">### Question q5: 6/6 ###</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Finished at 18:23:47</span><br><span class="line"></span><br><span class="line">Provisional grades</span><br><span class="line">==================</span><br><span class="line">Question q1: 4/4</span><br><span class="line">Question q2: 5/5</span><br><span class="line">Question q3: 5/5</span><br><span class="line">Question q4: 5/5</span><br><span class="line">Question q5: 6/6</span><br><span class="line">------------------</span><br><span class="line">Total: 25/25</span><br><span class="line"></span><br><span class="line">Your grades are NOT yet registered.  To register your grades, make sure</span><br><span class="line">to follow your instructor&#x27;s guidelines to receive credit on your project.</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="CS188" scheme="http://www.misaka-9982.com/tags/CS188/"/>
    
    <category term="AI" scheme="http://www.misaka-9982.com/tags/AI/"/>
    
  </entry>
  
  <entry>
    <title>CS188 Proj 1</title>
    <link href="http://www.misaka-9982.com/2022/12/16/CS188-Proj-1/"/>
    <id>http://www.misaka-9982.com/2022/12/16/CS188-Proj-1/</id>
    <published>2022-12-16T05:23:14.000Z</published>
    <updated>2022-12-16T12:37:31.385Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1>Project 1: Search</h1><h2 id="Introduction-2">Introduction</h2><p>In this project, your Pacman agent will find paths through his maze world, both to reach a particular location and to collect food efficiently. You will build general search algorithms and apply them to Pacman scenarios.</p><p>As in Project 0, this project includes an autograder for you to grade your answers on your machine. This can be run with the command:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python autograder.py</span><br></pre></td></tr></table></figure><p>See the autograder tutorial in Project 0 for more information about using the autograder.</p><p>The code for this project consists of several Python files, some of which you will need to read and understand in order to complete the assignment, and some of which you can ignore. You can download all the code and supporting files as a <a href="https://inst.eecs.berkeley.edu/~cs188/fa22/assets/projects/search.zip">search.zip</a>.</p><table><thead><tr><th><strong>Files you’ll edit:</strong></th><th></th></tr></thead><tbody><tr><td><code>search.py</code></td><td>Where all of your search algorithms will reside.</td></tr><tr><td><code>searchAgents.py</code></td><td>Where all of your search-based agents will reside.</td></tr><tr><td><strong>Files you might want to look at:</strong></td><td></td></tr><tr><td><code>pacman.py</code></td><td>The main file that runs Pacman games. This file describes a Pacman GameState type, which you use in this project.</td></tr><tr><td><code>game.py</code></td><td>The logic behind how the Pacman world works. This file describes several supporting types like AgentState, Agent, Direction, and Grid.</td></tr><tr><td><code>util.py</code></td><td>Useful data structures for implementing search algorithms.</td></tr><tr><td><strong>Supporting files you can ignore:</strong></td><td></td></tr><tr><td><code>graphicsDisplay.py</code></td><td>Graphics for Pacman</td></tr><tr><td><code>graphicsUtils.py</code></td><td>Support for Pacman graphics</td></tr><tr><td><code>textDisplay.py</code></td><td>ASCII graphics for Pacman</td></tr><tr><td><code>ghostAgents.py</code></td><td>Agents to control ghosts</td></tr><tr><td><code>keyboardAgents.py</code></td><td>Keyboard interfaces to control Pacman</td></tr><tr><td><code>layout.py</code></td><td>Code for reading layout files and storing their contents</td></tr><tr><td><code>autograder.py</code></td><td>Project autograder</td></tr><tr><td><code>testParser.py</code></td><td>Parses autograder test and solution files</td></tr><tr><td><code>testClasses.py</code></td><td>General autograding test classes</td></tr><tr><td><code>test_cases/</code></td><td>Directory containing the test cases for each question</td></tr><tr><td><code>searchTestClasses.py</code></td><td>Project 1 specific autograding test classes</td></tr></tbody></table><p><strong>Files to Edit and Submit:</strong> You will fill in portions of <a href="http://search.py">search.py</a> and <a href="http://searchAgents.py">searchAgents.py</a> during the assignment. Once you have completed the assignment, you will submit a token generated by submission_autograder.py. Please do not change the other files in this distribution or submit any of our original files other than these files.</p><p><strong>Evaluation:</strong> Your code will be autograded for technical correctness. Please do not change the names of any provided functions or classes within the code, or you will wreak havoc on the autograder. However, the correctness of your implementation – not the autograder’s judgements – will be the final judge of your score. If necessary, we will review and grade assignments individually to ensure that you receive due credit for your work.</p><p><strong>Academic Dishonesty:</strong> We will be checking your code against other submissions in the class for logical redundancy. If you copy someone else’s code and submit it with minor changes, we will know. These cheat detectors are quite hard to fool, so please don’t try. We trust you all to submit your own work only; please don’t let us down. If you do, we will pursue the strongest consequences available to us.</p><p><strong>Getting Help:</strong> You are not alone! If you find yourself stuck on something, contact the course staff for help. Office hours, section, and the discussion forum are there for your support; please use them. If you can’t make our office hours, let us know and we will schedule more. We want these projects to be rewarding and instructional, not frustrating and demoralizing. But, we don’t know when or how to help unless you ask.</p><p><strong>Discussion:</strong> Please be careful not to post spoilers.</p><hr><h2 id="Welcome-to-Pacman">Welcome to Pacman</h2><p>After downloading the code, unzipping it, and changing to the directory, you should be able to play a game of Pacman by typing the following at the command line:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python pacman.py</span><br></pre></td></tr></table></figure><p>Pacman lives in a shiny blue world of twisting corridors and tasty round treats. Navigating this world efficiently will be Pacman’s first step in mastering his domain.</p><p>The simplest agent in <code>searchAgents.py</code> is called the <code>GoWestAgent</code>, which always goes West (a trivial reflex agent). This agent can occasionally win:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python pacman.py --layout testMaze --pacman GoWestAgent</span><br></pre></td></tr></table></figure><p>But, things get ugly for this agent when turning is required:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python pacman.py --layout tinyMaze --pacman GoWestAgent</span><br></pre></td></tr></table></figure><p>If Pacman gets stuck, you can exit the game by typing CTRL-c into your terminal.</p><p>Soon, your agent will solve not only <code>tinyMaze</code>, but any maze you want.</p><p>Note that <code>pacman.py</code> supports a number of options that can each be expressed in a long way (e.g., <code>--layout</code>) or a short way (e.g., <code>-l</code>). You can see the list of all options and their default values via:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python pacman.py -h</span><br></pre></td></tr></table></figure><p>Also, all of the commands that appear in this project also appear in <code>commands.txt</code>, for easy copying and pasting. In UNIX/Mac OS X, you can even run all these commands in order with <code>bash commands.txt</code>.</p><hr><h2 id="New-Syntax">New Syntax</h2><p>You may not have seen this syntax before:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">def my_function(a: int, b: Tuple[int, int], c: List[List], d: Any, e: float=1.0):</span><br></pre></td></tr></table></figure><p>Copy</p><p>This is annotating the type of the arguments that Python should expect for this function. In the example below, <code>a</code> should be an <code>int</code> – integer, <code>b</code> should be a <code>tuple</code> of 2 <code>int</code>s, <code>c</code> should be a <code>List</code> of <code>Lists</code> of anything – therefore a 2D array of anything, <code>d</code> is essentially the same as not annotated and can by anything, and <code>e</code> should be a <code>float</code>. <code>e</code> is also set to 1.0 if nothing is passed in for it, i.e.:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">my_function(1, (2, 3), [[&#x27;a&#x27;, &#x27;b&#x27;], [None, my_class], [[]]], (&#x27;h&#x27;, 1))</span><br></pre></td></tr></table></figure><p>The above call fits the type annotations, and doesn’t pass anything in for e. Type annotations are meant to be an adddition to the docstrings to help you know what the functions are working with. Python itself doesn’t enforce these. When writing your own functions, it is up to you if you want to annotate your types; they may be helpful to keep organized or not something you want to spend time on.</p><hr><h2 id="Q1-3-pts-Finding-a-Fixed-Food-Dot-using-Depth-First-Search">Q1 (3 pts): Finding a Fixed Food Dot using Depth First Search</h2><p>In <code>searchAgents.py</code>, you’ll find a fully implemented <code>SearchAgent</code>, which plans out a path through Pacman’s world and then executes that path step-by-step. The search algorithms for formulating a plan are not implemented – that’s your job.</p><p>First, test that the <code>SearchAgent</code> is working correctly by running:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python pacman.py -l tinyMaze -p SearchAgent -a fn=tinyMazeSearch</span><br></pre></td></tr></table></figure><p>The command above tells the <code>SearchAgent</code> to use <code>tinyMazeSearch</code> as its search algorithm, which is implemented in <code>search.py</code>. Pacman should navigate the maze successfully.</p><p>Now it’s time to write full-fledged generic search functions to help Pacman plan routes! Pseudocode for the search algorithms you’ll write can be found in the lecture slides. Remember that a search node must contain not only a state but also the information necessary to reconstruct the path (plan) which gets to that state.</p><p><strong>Important note</strong>: All of your search functions need to return a list of actions that will lead the agent from the start to the goal. These actions all have to be legal moves (valid directions, no moving through walls).</p><p><strong>Important note</strong>: Make sure to use the <code>Stack</code>, <code>Queue</code> and <code>PriorityQueue</code> data structures provided to you in <code>util.py</code>! These data structure implementations have particular properties which are required for compatibility with the autograder.</p><p><em>Hint</em>: Each algorithm is very similar. Algorithms for DFS, BFS, UCS, and A* differ only in the details of how the fringe is managed. So, concentrate on getting DFS right and the rest should be relatively straightforward. Indeed, one possible implementation requires only a single generic search method which is configured with an algorithm-specific queuing strategy. (Your implementation need not be of this form to receive full credit).</p><p>Implement the depth-first search (DFS) algorithm in the <code>depthFirstSearch</code> function in <code>search.py</code>. To make your algorithm complete, write the graph search version of DFS, which avoids expanding any already visited states.</p><p>Your code should quickly find a solution for:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">python pacman.py -l tinyMaze -p SearchAgent</span><br><span class="line">python pacman.py -l mediumMaze -p SearchAgent</span><br><span class="line">python pacman.py -l bigMaze -z .5 -p SearchAgent</span><br></pre></td></tr></table></figure><p>The Pacman board will show an overlay of the states explored, and the order in which they were explored (brighter red means earlier exploration). Is the exploration order what you would have expected? Does Pacman actually go to all the explored squares on his way to the goal?</p><p>Hint: If you use a <code>Stack</code> as your data structure, the solution found by your DFS algorithm for <code>mediumMaze</code> should have a length of 130 (provided you push successors onto the fringe in the order provided by getSuccessors; you might get 246 if you push them in the reverse order). Is this a least cost solution? If not, think about what depth-first search is doing wrong.</p><p><em>Grading</em>: Please run the below command to see if your implementation passes all the autograder test cases.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python autograder.py -q q1</span><br></pre></td></tr></table></figure><h3 id="Answer-8">Answer</h3><p>The following code uses the <code>Stack</code> as frontier, which means that the node pushed into it first will be dealt with last, and when a node <code>n</code> is pop out, it will push all of its successors on the frontier to be dealt with before other nodes as the same depth with <code>n</code> have been processed</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">depthFirstSearch</span>(<span class="params">problem: SearchProblem</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Search the deepest nodes in the search tree first.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Your search algorithm needs to return a list of actions that reaches the</span></span><br><span class="line"><span class="string">    goal. Make sure to implement a graph search algorithm.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    To get started, you might want to try some of these simple commands to</span></span><br><span class="line"><span class="string">    understand the search problem that is being passed in:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    print(&quot;Start:&quot;, problem.getStartState())</span></span><br><span class="line"><span class="string">    print(&quot;Is the start a goal?&quot;, problem.isGoalState(problem.getStartState()))</span></span><br><span class="line"><span class="string">    print(&quot;Start&#x27;s successors:&quot;, problem.getSuccessors(problem.getStartState()))</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">from</span> util <span class="keyword">import</span> Stack</span><br><span class="line">    frontier = Stack()</span><br><span class="line">    visited = <span class="built_in">set</span>()</span><br><span class="line"></span><br><span class="line">    frontier.push((problem.getStartState(), []))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> frontier.isEmpty():</span><br><span class="line">        node, path = frontier.pop()</span><br><span class="line">        <span class="keyword">if</span> problem.isGoalState(node):</span><br><span class="line">            <span class="keyword">return</span> path</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> node <span class="keyword">not</span> <span class="keyword">in</span> visited:</span><br><span class="line">            visited.add(node)</span><br><span class="line">            <span class="keyword">for</span> successor <span class="keyword">in</span> problem.getSuccessors(node):</span><br><span class="line">                frontier.push((successor[<span class="number">0</span>], path + [successor[<span class="number">1</span>]]))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> []</span><br></pre></td></tr></table></figure><hr><h2 id="Q2-3-pts-Breadth-First-Search">Q2 (3 pts): Breadth First Search</h2><p>Implement the breadth-first search (BFS) algorithm in the <code>breadthFirstSearch</code> function in <code>search.py</code>. Again, write a graph search algorithm that avoids expanding any already visited states. Test your code the same way you did for depth-first search.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python pacman.py -l mediumMaze -p SearchAgent -a fn=bfs</span><br><span class="line">python pacman.py -l bigMaze -p SearchAgent -a fn=bfs -z .5</span><br></pre></td></tr></table></figure><p>Does BFS find a least cost solution? If not, check your implementation.</p><p><em>Hint</em>: If Pacman moves too slowly for you, try the option –frameTime 0.</p><p><em>Note</em>: If you’ve written your search code generically, your code should work equally well for the eight-puzzle search problem without any changes.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python eightpuzzle.py</span><br></pre></td></tr></table></figure><p>Grading: Please run the below command to see if your implementation passes all the autograder test cases.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python autograder.py -q q2</span><br></pre></td></tr></table></figure><h3 id="Answer-9">Answer</h3><p>The following code uses the <code>Queue</code> as frontier, which means that the node pushed into it first will be dealt with first, and when a node <code>n</code> is pop out, it will push all of its successors on the frontier to be dealt with after other nodes as the same depth with <code>n</code> have been processed</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">breadthFirstSearch</span>(<span class="params">problem: SearchProblem</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Search the shallowest nodes in the search tree first.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">from</span> util <span class="keyword">import</span> Queue</span><br><span class="line">    frontier = Queue()</span><br><span class="line">    visited = <span class="built_in">set</span>()</span><br><span class="line"></span><br><span class="line">    frontier.push((problem.getStartState(), []))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> frontier.isEmpty():</span><br><span class="line">        node, path = frontier.pop()</span><br><span class="line">        <span class="keyword">if</span> problem.isGoalState(node):</span><br><span class="line">            <span class="keyword">return</span> path</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> node <span class="keyword">not</span> <span class="keyword">in</span> visited:</span><br><span class="line">            visited.add(node)</span><br><span class="line">            <span class="keyword">for</span> successor <span class="keyword">in</span> problem.getSuccessors(node):</span><br><span class="line">                frontier.push((successor[<span class="number">0</span>], path + [successor[<span class="number">1</span>]]))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> []</span><br></pre></td></tr></table></figure><hr><h2 id="Q3-3-pts-Varying-the-Cost-Function">Q3 (3 pts): Varying the Cost Function</h2><p>While BFS will find a fewest-actions path to the goal, we might want to find paths that are “best” in other senses. Consider <code>mediumDottedMaze</code> and <code>mediumScaryMaze</code>.</p><p>By changing the cost function, we can encourage Pacman to find different paths. For example, we can charge more for dangerous steps in ghost-ridden areas or less for steps in food-rich areas, and a rational Pacman agent should adjust its behavior in response.</p><p>Implement the uniform-cost graph search algorithm in the <code>uniformCostSearch</code> function in <code>search.py</code>. We encourage you to look through <code>util.py</code> for some data structures that may be useful in your implementation. You should now observe successful behavior in all three of the following layouts, where the agents below are all UCS agents that differ only in the cost function they use (the agents and cost functions are written for you):</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">python pacman.py -l mediumMaze -p SearchAgent -a fn=ucs</span><br><span class="line">python pacman.py -l mediumDottedMaze -p StayEastSearchAgent</span><br><span class="line">python pacman.py -l mediumScaryMaze -p StayWestSearchAgent</span><br></pre></td></tr></table></figure><p><em>Note</em>: You should get very low and very high path costs for the <code>StayEastSearchAgent</code> and <code>StayWestSearchAgent</code> respectively, due to their exponential cost functions (see <code>searchAgents.py</code> for details).</p><p>Grading: Please run the below command to see if your implementation passes all the autograder test cases.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python autograder.py -q q3</span><br></pre></td></tr></table></figure><h3 id="Answer-10">Answer</h3><p>The following code uses the <code>PriorityQueue</code> as frontier, which means that the node pushed into it will be dealt with by the order of priority. Each node’s priority is equal to the cost of the last node to this node add the priority of the last node. The start state’s priority is equal to 0.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">uniformCostSearch</span>(<span class="params">problem: SearchProblem</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Search the node of least total cost first.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="comment"># util.raiseNotDefined()</span></span><br><span class="line">    <span class="keyword">from</span> util <span class="keyword">import</span> PriorityQueue</span><br><span class="line">    frontier = PriorityQueue()</span><br><span class="line">    visited = <span class="built_in">set</span>()</span><br><span class="line"></span><br><span class="line">    frontier.push((problem.getStartState(), [], <span class="number">0</span>), <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> frontier.isEmpty():</span><br><span class="line">        node, path, priority = frontier.pop()</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> problem.isGoalState(node):</span><br><span class="line">            <span class="keyword">return</span> path</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> node <span class="keyword">not</span> <span class="keyword">in</span> visited:</span><br><span class="line">            visited.add(node)</span><br><span class="line">            <span class="keyword">for</span> successor <span class="keyword">in</span> problem.getSuccessors(node):</span><br><span class="line">                frontier.push((successor[<span class="number">0</span>], path + [successor[<span class="number">1</span>]], successor[<span class="number">2</span>] + priority),\</span><br><span class="line">                    successor[<span class="number">2</span>] + priority)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> []</span><br></pre></td></tr></table></figure><hr><h2 id="Q4-3-pts-A-search">Q4 (3 pts): A* search</h2><p>Implement A* graph search in the empty function <code>aStarSearch</code> in <code>search.py</code>. A* takes a heuristic function as an argument. Heuristics take two arguments: a state in the search problem (the main argument), and the problem itself (for reference information). The <code>nullHeuristic</code> heuristic function in <code>search.py</code> is a trivial example.</p><p>You can test your A* implementation on the original problem of finding a path through a maze to a fixed position using the Manhattan distance heuristic (implemented already as <code>manhattanHeuristic</code> in <code>searchAgents.py</code>).</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python pacman.py -l bigMaze -z .5 -p SearchAgent -a fn=astar,heuristic=manhattanHeuristic</span><br></pre></td></tr></table></figure><p>You should see that A* finds the optimal solution slightly faster than uniform cost search (about 549 vs. 620 search nodes expanded in our implementation, but ties in priority may make your numbers differ slightly). What happens on <code>openMaze</code> for the various search strategies?</p><p><em>Grading</em>: Please run the below command to see if your implementation passes all the autograder test cases.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python autograder.py -q q4</span><br></pre></td></tr></table></figure><h3 id="Answer-11">Answer</h3><p>$ g(n) = successor[2] + priority,\ h(n) = heuristic,\ f(n) = g(n) + h(n)$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">aStarSearch</span>(<span class="params">problem: SearchProblem, heuristic=nullHeuristic</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Search the node that has the lowest combined cost and heuristic first.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="comment"># util.raiseNotDefined()</span></span><br><span class="line">    <span class="keyword">from</span> util <span class="keyword">import</span> PriorityQueue</span><br><span class="line">    frontier = PriorityQueue()</span><br><span class="line">    visited = <span class="built_in">set</span>()</span><br><span class="line"></span><br><span class="line">    frontier.push((problem.getStartState(), [], <span class="number">0</span>), <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> frontier.isEmpty():</span><br><span class="line">        node, path, priority = frontier.pop()</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> problem.isGoalState(node):</span><br><span class="line">            <span class="keyword">return</span> path</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> node <span class="keyword">not</span> <span class="keyword">in</span> visited:</span><br><span class="line">            visited.add(node)</span><br><span class="line">            <span class="keyword">for</span> successor <span class="keyword">in</span> problem.getSuccessors(node):</span><br><span class="line">                frontier.push((successor[<span class="number">0</span>], path + [successor[<span class="number">1</span>]], successor[<span class="number">2</span>] + priority),\</span><br><span class="line">                    successor[<span class="number">2</span>] + priority + heuristic(successor[<span class="number">0</span>], problem))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> []</span><br></pre></td></tr></table></figure><hr><h2 id="Q5-3-pts-Finding-All-the-Corners">Q5 (3 pts): Finding All the Corners</h2><p>The real power of A* will only be apparent with a more challenging search problem. Now, it’s time to formulate a new problem and design a heuristic for it.</p><p>In corner mazes, there are four dots, one in each corner. Our new search problem is to find the shortest path through the maze that touches all four corners (whether the maze actually has food there or not). Note that for some mazes like <code>tinyCorners</code>, the shortest path does not always go to the closest food first! Hint: the shortest path through <code>tinyCorners</code> takes 28 steps.</p><p><em>Note</em>: Make sure to complete Question 2 before working on Question 5, because Question 5 builds upon your answer for Question 2.</p><p>Implement the <code>CornersProblem</code> search problem in <code>searchAgents.py</code>. You will need to choose a state representation that encodes all the information necessary to detect whether all four corners have been reached. Now, your search agent should solve:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python pacman.py -l tinyCorners -p SearchAgent -a fn=bfs,prob=CornersProblem</span><br><span class="line">python pacman.py -l mediumCorners -p SearchAgent -a fn=bfs,prob=CornersProblem</span><br></pre></td></tr></table></figure><p>To receive full credit, you need to define an abstract state representation that does not encode irrelevant information (like the position of ghosts, where extra food is, etc.). In particular, do not use a Pacman <code>GameState</code> as a search state. Your code will be very, very slow if you do (and also wrong).</p><p><em>Hint 1</em>: The only parts of the game state you need to reference in your implementation are the starting Pacman position and the location of the four corners.</p><p><em>Hint 2</em>: When coding up <code>getSuccessors</code>, make sure to add children to your successors list with a cost of 1.</p><p>Our implementation of <code>breadthFirstSearch</code> expands just under 2000 search nodes on <code>mediumCorners</code>. However, heuristics (used with A* search) can reduce the amount of searching required.</p><p>Grading: Please run the below command to see if your implementation passes all the autograder test cases.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python autograder.py -q q5</span><br></pre></td></tr></table></figure><h3 id="Answer-simple">Answer(simple)</h3><p>The following code uses a Tuple to store the state of the food in each corners</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getStartState</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Returns the start state (in your state space, not the full Pacman state</span></span><br><span class="line"><span class="string">        space)</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">        <span class="comment"># util.raiseNotDefined()</span></span><br><span class="line">        res = (self.startingPosition, <span class="literal">False</span>, <span class="literal">False</span>, <span class="literal">False</span>, <span class="literal">False</span>)</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><p>The following code uses a for loop to confirm whether the current state is the goal state.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isGoalState</span>(<span class="params">self, state: <span class="type">Any</span></span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Returns whether this search state is a goal state of the problem.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">        <span class="comment"># util.raiseNotDefined()</span></span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> state[<span class="number">1</span>:]:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> item:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getSuccessors</span>(<span class="params">self, state: <span class="type">Any</span></span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Returns successor states, the actions they require, and a cost of 1.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">         As noted in search.py:</span></span><br><span class="line"><span class="string">            For a given state, this should return a list of triples, (successor,</span></span><br><span class="line"><span class="string">            action, stepCost), where &#x27;successor&#x27; is a successor to the current</span></span><br><span class="line"><span class="string">            state, &#x27;action&#x27; is the action required to get there, and &#x27;stepCost&#x27;</span></span><br><span class="line"><span class="string">            is the incremental cost of expanding to that successor</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        successors = []</span><br><span class="line">        <span class="keyword">for</span> action <span class="keyword">in</span> [Directions.NORTH, Directions.SOUTH, Directions.EAST, Directions.WEST]:</span><br><span class="line">            <span class="comment"># Add a successor state to the successor list if the action is legal</span></span><br><span class="line">            <span class="comment"># Here&#x27;s a code snippet for figuring out whether a new position hits a wall:</span></span><br><span class="line">            <span class="comment">#   x,y = currentPosition</span></span><br><span class="line">            <span class="comment">#   dx, dy = Actions.directionToVector(action)</span></span><br><span class="line">            <span class="comment">#   nextx, nexty = int(x + dx), int(y + dy)</span></span><br><span class="line">            <span class="comment">#   hitsWall = self.walls[nextx][nexty]</span></span><br><span class="line"></span><br><span class="line">            <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">            x, y = state[<span class="number">0</span>]</span><br><span class="line">            dx, dy = Actions.directionToVector(action)</span><br><span class="line">            nextx, nexty = <span class="built_in">int</span>(x + dx), <span class="built_in">int</span>(y + dy)</span><br><span class="line">            hitsWall = self.walls[nextx][nexty]</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> hitsWall:</span><br><span class="line">                nextState = (nextx, nexty)</span><br><span class="line">                corners = state[<span class="number">1</span>:]</span><br><span class="line">                <span class="keyword">if</span> nextState <span class="keyword">in</span> self.corners:</span><br><span class="line">                    corners = <span class="built_in">list</span>(corners)</span><br><span class="line">                    corners[self.corners.index(nextState)] = <span class="literal">True</span></span><br><span class="line">                    corners = <span class="built_in">tuple</span>(corners)</span><br><span class="line">                successors.append(((nextState, *corners), action, <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">        self._expanded += <span class="number">1</span> <span class="comment"># DO NOT CHANGE</span></span><br><span class="line">        <span class="keyword">return</span> successors</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CornersProblem</span>(<span class="params">search.SearchProblem</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    This search problem finds paths through all four corners of a layout.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    You must select a suitable state space and successor function</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, startingGameState: pacman.GameState</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Stores the walls, pacman&#x27;s starting position and corners.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.walls = startingGameState.getWalls()</span><br><span class="line">        self.startingPosition = startingGameState.getPacmanPosition()</span><br><span class="line">        top, right = self.walls.height-<span class="number">2</span>, self.walls.width-<span class="number">2</span></span><br><span class="line">        self.corners = ((<span class="number">1</span>,<span class="number">1</span>), (<span class="number">1</span>,top), (right, <span class="number">1</span>), (right, top))</span><br><span class="line">        <span class="keyword">for</span> corner <span class="keyword">in</span> self.corners:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> startingGameState.hasFood(*corner):</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;Warning: no food in corner &#x27;</span> + <span class="built_in">str</span>(corner))</span><br><span class="line">        self._expanded = <span class="number">0</span> <span class="comment"># DO NOT CHANGE; Number of search nodes expanded</span></span><br><span class="line">        <span class="comment"># Please add any code here which you would like to use</span></span><br><span class="line">        <span class="comment"># in initializing the problem</span></span><br><span class="line">        <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getStartState</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Returns the start state (in your state space, not the full Pacman state</span></span><br><span class="line"><span class="string">        space)</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">        <span class="comment"># util.raiseNotDefined()</span></span><br><span class="line">        res = (self.startingPosition, <span class="literal">False</span>, <span class="literal">False</span>, <span class="literal">False</span>, <span class="literal">False</span>)</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isGoalState</span>(<span class="params">self, state: <span class="type">Any</span></span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Returns whether this search state is a goal state of the problem.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">        <span class="comment"># util.raiseNotDefined()</span></span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> state[<span class="number">1</span>:]:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> item:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getSuccessors</span>(<span class="params">self, state: <span class="type">Any</span></span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Returns successor states, the actions they require, and a cost of 1.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">         As noted in search.py:</span></span><br><span class="line"><span class="string">            For a given state, this should return a list of triples, (successor,</span></span><br><span class="line"><span class="string">            action, stepCost), where &#x27;successor&#x27; is a successor to the current</span></span><br><span class="line"><span class="string">            state, &#x27;action&#x27; is the action required to get there, and &#x27;stepCost&#x27;</span></span><br><span class="line"><span class="string">            is the incremental cost of expanding to that successor</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        successors = []</span><br><span class="line">        <span class="keyword">for</span> action <span class="keyword">in</span> [Directions.NORTH, Directions.SOUTH, Directions.EAST, Directions.WEST]:</span><br><span class="line">            <span class="comment"># Add a successor state to the successor list if the action is legal</span></span><br><span class="line">            <span class="comment"># Here&#x27;s a code snippet for figuring out whether a new position hits a wall:</span></span><br><span class="line">            <span class="comment">#   x,y = currentPosition</span></span><br><span class="line">            <span class="comment">#   dx, dy = Actions.directionToVector(action)</span></span><br><span class="line">            <span class="comment">#   nextx, nexty = int(x + dx), int(y + dy)</span></span><br><span class="line">            <span class="comment">#   hitsWall = self.walls[nextx][nexty]</span></span><br><span class="line"></span><br><span class="line">            <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">            x, y = state[<span class="number">0</span>]</span><br><span class="line">            dx, dy = Actions.directionToVector(action)</span><br><span class="line">            nextx, nexty = <span class="built_in">int</span>(x + dx), <span class="built_in">int</span>(y + dy)</span><br><span class="line">            hitsWall = self.walls[nextx][nexty]</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> hitsWall:</span><br><span class="line">                nextState = (nextx, nexty)</span><br><span class="line">                corners = state[<span class="number">1</span>:]</span><br><span class="line">                <span class="keyword">if</span> nextState <span class="keyword">in</span> self.corners:</span><br><span class="line">                    corners = <span class="built_in">list</span>(corners)</span><br><span class="line">                    corners[self.corners.index(nextState)] = <span class="literal">True</span></span><br><span class="line">                    corners = <span class="built_in">tuple</span>(corners)</span><br><span class="line">                successors.append(((nextState, *corners), action, <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">        self._expanded += <span class="number">1</span> <span class="comment"># DO NOT CHANGE</span></span><br><span class="line">        <span class="keyword">return</span> successors</span><br></pre></td></tr></table></figure><h3 id="Answer-optimize">Answer (optimize)</h3><p>The following code use a tuple to store position and corners as a state</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getStartState</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Returns the start state (in your state space, not the full Pacman state</span></span><br><span class="line"><span class="string">        space)</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">        <span class="comment"># util.raiseNotDefined()</span></span><br><span class="line">        <span class="keyword">return</span> (self.startingPosition, self.corners)</span><br></pre></td></tr></table></figure><p>The problem is solved when Pacman’s position is equal to the only remaining unvisited corner.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isGoalState</span>(<span class="params">self, state: <span class="type">Any</span></span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Returns whether this search state is a goal state of the problem.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">        <span class="comment"># util.raiseNotDefined()</span></span><br><span class="line">        pacmanPos, unvisitedCorners = state</span><br><span class="line">        <span class="keyword">return</span> unvisitedCorners == (pacmanPos,)</span><br></pre></td></tr></table></figure><p>The successors are computed by filtering illegal locations and then constructing the next state by filtering the unvisited corners to ensure that none is Pacman’s current position.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getSuccessors</span>(<span class="params">self, state: <span class="type">Any</span></span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Returns successor states, the actions they require, and a cost of 1.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">         As noted in search.py:</span></span><br><span class="line"><span class="string">            For a given state, this should return a list of triples, (successor,</span></span><br><span class="line"><span class="string">            action, stepCost), where &#x27;successor&#x27; is a successor to the current</span></span><br><span class="line"><span class="string">            state, &#x27;action&#x27; is the action required to get there, and &#x27;stepCost&#x27;</span></span><br><span class="line"><span class="string">            is the incremental cost of expanding to that successor</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        pacmanPos, unvisitedCorners = state</span><br><span class="line"></span><br><span class="line">        successors = []</span><br><span class="line">        <span class="keyword">for</span> action <span class="keyword">in</span> [Directions.NORTH, Directions.SOUTH, Directions.EAST, Directions.WEST]:</span><br><span class="line">            <span class="comment"># Add a successor state to the successor list if the action is legal</span></span><br><span class="line">            <span class="comment"># Here&#x27;s a code snippet for figuring out whether a new position hits a wall:</span></span><br><span class="line">            <span class="comment">#   x,y = currentPosition</span></span><br><span class="line">            <span class="comment">#   dx, dy = Actions.directionToVector(action)</span></span><br><span class="line">            <span class="comment">#   nextx, nexty = int(x + dx), int(y + dy)</span></span><br><span class="line">            <span class="comment">#   hitsWall = self.walls[nextx][nexty]</span></span><br><span class="line"></span><br><span class="line">            <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">            x, y = state[<span class="number">0</span>]</span><br><span class="line">            dx, dy = Actions.directionToVector(action)</span><br><span class="line">            nextx, nexty = <span class="built_in">int</span>(x + dx), <span class="built_in">int</span>(y + dy)</span><br><span class="line">            hitsWall = self.walls[nextx][nexty]</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> hitsWall:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            </span><br><span class="line">            nextPacmanPos = (nextx, nexty)</span><br><span class="line">            nextUnvisitedCorners = <span class="built_in">tuple</span>(</span><br><span class="line">                corner <span class="keyword">for</span> corner <span class="keyword">in</span> unvisitedCorners <span class="keyword">if</span> corner != pacmanPos</span><br><span class="line">            )</span><br><span class="line">            nextState = (nextPacmanPos, nextUnvisitedCorners)</span><br><span class="line">            successors.append((nextState, action, <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">        self._expanded += <span class="number">1</span> <span class="comment"># DO NOT CHANGE</span></span><br><span class="line">        <span class="keyword">return</span> successors</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getStartState</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Returns the start state (in your state space, not the full Pacman state</span></span><br><span class="line"><span class="string">        space)</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">        <span class="comment"># util.raiseNotDefined()</span></span><br><span class="line">        <span class="keyword">return</span> (self.startingPosition, self.corners)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isGoalState</span>(<span class="params">self, state: <span class="type">Any</span></span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Returns whether this search state is a goal state of the problem.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">        <span class="comment"># util.raiseNotDefined()</span></span><br><span class="line">        pacmanPos, unvisitedCorners = state</span><br><span class="line">        <span class="keyword">return</span> unvisitedCorners == (pacmanPos,)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getSuccessors</span>(<span class="params">self, state: <span class="type">Any</span></span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Returns successor states, the actions they require, and a cost of 1.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">         As noted in search.py:</span></span><br><span class="line"><span class="string">            For a given state, this should return a list of triples, (successor,</span></span><br><span class="line"><span class="string">            action, stepCost), where &#x27;successor&#x27; is a successor to the current</span></span><br><span class="line"><span class="string">            state, &#x27;action&#x27; is the action required to get there, and &#x27;stepCost&#x27;</span></span><br><span class="line"><span class="string">            is the incremental cost of expanding to that successor</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        pacmanPos, unvisitedCorners = state</span><br><span class="line"></span><br><span class="line">        successors = []</span><br><span class="line">        <span class="keyword">for</span> action <span class="keyword">in</span> [Directions.NORTH, Directions.SOUTH, Directions.EAST, Directions.WEST]:</span><br><span class="line">            <span class="comment"># Add a successor state to the successor list if the action is legal</span></span><br><span class="line">            <span class="comment"># Here&#x27;s a code snippet for figuring out whether a new position hits a wall:</span></span><br><span class="line">            <span class="comment">#   x,y = currentPosition</span></span><br><span class="line">            <span class="comment">#   dx, dy = Actions.directionToVector(action)</span></span><br><span class="line">            <span class="comment">#   nextx, nexty = int(x + dx), int(y + dy)</span></span><br><span class="line">            <span class="comment">#   hitsWall = self.walls[nextx][nexty]</span></span><br><span class="line"></span><br><span class="line">            <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">            x, y = state[<span class="number">0</span>]</span><br><span class="line">            dx, dy = Actions.directionToVector(action)</span><br><span class="line">            nextx, nexty = <span class="built_in">int</span>(x + dx), <span class="built_in">int</span>(y + dy)</span><br><span class="line">            hitsWall = self.walls[nextx][nexty]</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> hitsWall:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            </span><br><span class="line">            nextPacmanPos = (nextx, nexty)</span><br><span class="line">            nextUnvisitedCorners = <span class="built_in">tuple</span>(</span><br><span class="line">                corner <span class="keyword">for</span> corner <span class="keyword">in</span> unvisitedCorners <span class="keyword">if</span> corner != pacmanPos</span><br><span class="line">            )</span><br><span class="line">            nextState = (nextPacmanPos, nextUnvisitedCorners)</span><br><span class="line">            successors.append((nextState, action, <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">        self._expanded += <span class="number">1</span> <span class="comment"># DO NOT CHANGE</span></span><br><span class="line">        <span class="keyword">return</span> successors</span><br></pre></td></tr></table></figure><hr><h2 id="Q6-3-pts-Corners-Problem-Heuristic">Q6 (3 pts): Corners Problem: Heuristic</h2><p><em>Note</em>: Make sure to complete Question 4 before working on Question 6, because Question 6 builds upon your answer for Question 4.</p><p>Implement a non-trivial, consistent heuristic for the <code>CornersProblem</code> in <code>cornersHeuristic</code>.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python pacman.py -l mediumCorners -p AStarCornersAgent -z 0.5</span><br></pre></td></tr></table></figure><p>Note: <code>AStarCornersAgent</code> is a shortcut for</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-p SearchAgent -a fn=aStarSearch,prob=CornersProblem,heuristic=cornersHeuristic</span><br></pre></td></tr></table></figure><p><strong>Admissibility vs. Consistency</strong>: Remember, heuristics are just functions that take search states and return numbers that estimate the cost to a nearest goal. More effective heuristics will return values closer to the actual goal costs. To be <em>admissible</em>, the heuristic values must be lower bounds on the actual shortest path cost to the nearest goal (and non-negative). To be <em>consistent</em>, it must additionally hold that if an action has cost c, then taking that action can only cause a drop in heuristic of at most c.</p><p>Remember that admissibility isn’t enough to guarantee correctness in graph search – you need the stronger condition of consistency. However, admissible heuristics are usually also consistent, especially if they are derived from problem relaxations. Therefore it is usually easiest to start out by brainstorming admissible heuristics. Once you have an admissible heuristic that works well, you can check whether it is indeed consistent, too. The only way to guarantee consistency is with a proof. However, inconsistency can often be detected by verifying that for each node you expand, its successor nodes are equal or higher in in f-value. Moreover, if UCS and A* ever return paths of different lengths, your heuristic is inconsistent. This stuff is tricky!</p><p><strong>Non-Trivial Heuristics</strong>: The trivial heuristics are the ones that return zero everywhere (UCS) and the heuristic which computes the true completion cost. The former won’t save you any time, while the latter will timeout the autograder. You want a heuristic which reduces total compute time, though for this assignment the autograder will only check node counts (aside from enforcing a reasonable time limit).</p><p><strong>Grading</strong>: Your heuristic must be a non-trivial non-negative consistent heuristic to receive any points. Make sure that your heuristic returns 0 at every goal state and never returns a negative value. Depending on how few nodes your heuristic expands, you’ll be graded:</p><table><thead><tr><th>Number of nodes expanded</th><th>Grade</th></tr></thead><tbody><tr><td>more than 2000</td><td>0/3</td></tr><tr><td>at most 2000</td><td>1/3</td></tr><tr><td>at most 1600</td><td>2/3</td></tr><tr><td>at most 1200</td><td>3/3</td></tr></tbody></table><p>Remember: If your heuristic is inconsistent, you will receive no credit, so be careful!</p><p>Grading: Please run the below command to see if your implementation passes all the autograder test cases.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python autograder.py -q q6</span><br></pre></td></tr></table></figure><h3 id="Answer-simple-2">Answer(simple)</h3><p>The following code uses the manhattan distance between Pacman’s position and the corner as the corners Heuristic value. The heuristic resulted in the expansion of <strong>1136</strong> nodes.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cornersHeuristic</span>(<span class="params">state: <span class="type">Any</span>, problem: CornersProblem</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    A heuristic for the CornersProblem that you defined.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">      state:   The current search state</span></span><br><span class="line"><span class="string">               (a data structure you chose in your search problem)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">      problem: The CornersProblem instance for this layout.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    This function should always return a number that is a lower bound on the</span></span><br><span class="line"><span class="string">    shortest path from the state to a goal of the problem; i.e.  it should be</span></span><br><span class="line"><span class="string">    admissible (as well as consistent).</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    corners = problem.corners <span class="comment"># These are the corner coordinates</span></span><br><span class="line">    walls = problem.walls <span class="comment"># These are the walls of the maze, as a Grid (game.py)</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    value = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> idx <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(corners)):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> state[idx + <span class="number">1</span>]:</span><br><span class="line">            value = <span class="built_in">max</span>(value, util.manhattanDistance(state[<span class="number">0</span>], corners[idx]))</span><br><span class="line">    <span class="keyword">return</span> value <span class="comment"># Default to trivial solution</span></span><br></pre></td></tr></table></figure><h3 id="Answer-optimize-2">Answer (optimize)</h3><p>This approach will be efficient. Consider an intermediate state which may have already visited any of the four corners. List out the unvisited corners and compute the Manhattan distance to each of them. Now select the corner with a minimum manhattan distance. Note down the distance. This is the minimum number of steps needed to reach the corner irrespective of the board. Update the current position of Pacman to this corner. Remove this corner from the unvisited corners list. Loop over until the unvisited corners are empty. The sum of these distances will be an Admissible and Consistent Heuristic. Furthermore, this heuristic solved the problem optimally by only expanding <strong>702</strong> nodes.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cornersHeuristic</span>(<span class="params">state: <span class="type">Any</span>, problem: CornersProblem</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    A heuristic for the CornersProblem that you defined.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">      state:   The current search state</span></span><br><span class="line"><span class="string">               (a data structure you chose in your search problem)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">      problem: The CornersProblem instance for this layout.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    This function should always return a number that is a lower bound on the</span></span><br><span class="line"><span class="string">    shortest path from the state to a goal of the problem; i.e.  it should be</span></span><br><span class="line"><span class="string">    admissible (as well as consistent).</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    corners = problem.corners <span class="comment"># These are the corner coordinates</span></span><br><span class="line">    walls = problem.walls <span class="comment"># These are the walls of the maze, as a Grid (game.py)</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">distanceArgmin</span>(<span class="params">pos, points</span>):</span></span><br><span class="line">        index, minDist = <span class="literal">None</span>, <span class="number">1e9</span></span><br><span class="line">        <span class="keyword">for</span> curIdx, curPoint <span class="keyword">in</span> <span class="built_in">enumerate</span>(points):</span><br><span class="line">            curDist = util.manhattanDistance(pos, curPoint)</span><br><span class="line">            <span class="comment"># curDist = mazeDistance(pos, curPoint, problem.startingGameState)</span></span><br><span class="line">            <span class="keyword">if</span> curDist &lt; minDist:</span><br><span class="line">                index, minDist = curIdx, curDist</span><br><span class="line">        <span class="keyword">return</span> index, minDist</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">optimalPathWithoutWalls</span>(<span class="params">fromPos, throughPoints</span>):</span></span><br><span class="line">        points = <span class="built_in">list</span>(throughPoints)</span><br><span class="line">        <span class="comment"># print(points)</span></span><br><span class="line">        pos, pathLength = fromPos, <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> points != []:</span><br><span class="line">            index, dist = distanceArgmin(pos, points)</span><br><span class="line">            pathLength += dist</span><br><span class="line">            pos = points[index]</span><br><span class="line">            points.pop(index)</span><br><span class="line">        <span class="keyword">return</span> pathLength</span><br><span class="line">    <span class="keyword">return</span> optimalPathWithoutWalls(*state)</span><br></pre></td></tr></table></figure><p>Another thought is to use the MazeDistance function to compute the heuristic value. This method will solve the medium search problem by only <strong>expanding 129 nodes</strong>. But it will  ***** FAIL: inconsistent heuristic ** in the 3rd test case. I don’t know how to fix it. Readers can try it if you are interested in it.</p><hr><h2 id="Q7-4-pts-Eating-All-The-Dots">Q7 (4 pts): Eating All The Dots</h2><p>Now we’ll solve a hard search problem: eating all the Pacman food in as few steps as possible. For this, we’ll need a new search problem definition which formalizes the food-clearing problem: <code>FoodSearchProblem</code> in <code>searchAgents.py</code> (implemented for you). A solution is defined to be a path that collects all of the food in the Pacman world. For the present project, solutions do not take into account any ghosts or power pellets; solutions only depend on the placement of walls, regular food and Pacman. (Of course ghosts can ruin the execution of a solution! We’ll get to that in the next project.) If you have written your general search methods correctly, A* with a null heuristic (equivalent to uniform-cost search) should quickly find an optimal solution to <code>testSearch</code> with no code change on your part (total cost of 7).</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python pacman.py -l testSearch -p AStarFoodSearchAgent</span><br></pre></td></tr></table></figure><p>Note: <code>AStarFoodSearchAgent</code> is a shortcut for</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-p SearchAgent -a fn=astar,prob=FoodSearchProblem,heuristic=foodHeuristic</span><br></pre></td></tr></table></figure><p>You should find that UCS starts to slow down even for the seemingly simple <code>tinySearch</code>. As a reference, our implementation takes 2.5 seconds to find a path of length 27 after expanding 5057 search nodes.</p><p><em>Note</em>: Make sure to complete Question 4 before working on Question 7, because Question 7 builds upon your answer for Question 4.</p><p>Fill in <code>foodHeuristic</code> in <code>searchAgents.py</code> with a <em>consistent</em> heuristic for the <code>FoodSearchProblem</code>. Try your agent on the <code>trickySearch</code> board:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python pacman.py -l trickySearch -p AStarFoodSearchAgent</span><br></pre></td></tr></table></figure><p>Our UCS agent finds the optimal solution in about 13 seconds, exploring over 16,000 nodes.</p><p>Any non-trivial non-negative consistent heuristic will receive 1 point. Make sure that your heuristic returns 0 at every goal state and never returns a negative value. Depending on how few nodes your heuristic expands, you’ll get additional points:</p><table><thead><tr><th>Number of nodes expanded</th><th>Grade</th></tr></thead><tbody><tr><td>more than 15000</td><td>1/4</td></tr><tr><td>at most 15000</td><td>2/4</td></tr><tr><td>at most 12000</td><td>3/4</td></tr><tr><td>at most 9000</td><td>4/4 (full credit; medium)</td></tr><tr><td>at most 7000</td><td>5/4 (optional extra credit; hard)</td></tr></tbody></table><p>Remember: If your heuristic is inconsistent, you will receive no credit, so be careful! Can you solve <code>mediumSearch</code> in a short time? If so, we’re either very, very impressed, or your heuristic is inconsistent.</p><p>Grading: Please run the below command to see if your implementation passes all the autograder test cases.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python autograder.py -q q7</span><br></pre></td></tr></table></figure><h3 id="Answer-simple-3">Answer (simple)</h3><p>The following code uses the Maze Distance between the Pacman and the food closest to the Pacman as a heuristic value. This heuristic solved the problem optimally by expanding <strong>4137</strong> nodes.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foodHeuristic</span>(<span class="params">state: <span class="type">Tuple</span>[<span class="type">Tuple</span>, <span class="type">List</span>[<span class="type">List</span>]], problem: FoodSearchProblem</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Your heuristic for the FoodSearchProblem goes here.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    This heuristic must be consistent to ensure correctness.  First, try to come</span></span><br><span class="line"><span class="string">    up with an admissible heuristic; almost all admissible heuristics will be</span></span><br><span class="line"><span class="string">    consistent as well.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    If using A* ever finds a solution that is worse uniform cost search finds,</span></span><br><span class="line"><span class="string">    your heuristic is *not* consistent, and probably not admissible!  On the</span></span><br><span class="line"><span class="string">    other hand, inadmissible or inconsistent heuristics may find optimal</span></span><br><span class="line"><span class="string">    solutions, so be careful.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    The state is a tuple ( pacmanPosition, foodGrid ) where foodGrid is a Grid</span></span><br><span class="line"><span class="string">    (see game.py) of either True or False. You can call foodGrid.asList() to get</span></span><br><span class="line"><span class="string">    a list of food coordinates instead.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    If you want access to info like walls, capsules, etc., you can query the</span></span><br><span class="line"><span class="string">    problem.  For example, problem.walls gives you a Grid of where the walls</span></span><br><span class="line"><span class="string">    are.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    If you want to *store* information to be reused in other calls to the</span></span><br><span class="line"><span class="string">    heuristic, there is a dictionary called problem.heuristicInfo that you can</span></span><br><span class="line"><span class="string">    use. For example, if you only want to count the walls once and store that</span></span><br><span class="line"><span class="string">    value, try: problem.heuristicInfo[&#x27;wallCount&#x27;] = problem.walls.count()</span></span><br><span class="line"><span class="string">    Subsequent calls to this heuristic can access</span></span><br><span class="line"><span class="string">    problem.heuristicInfo[&#x27;wallCount&#x27;]</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    position, foodGrid = state</span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    value = <span class="number">0</span></span><br><span class="line">    foods = foodGrid.asList()</span><br><span class="line">    <span class="keyword">for</span> food <span class="keyword">in</span> foods:</span><br><span class="line">        value = <span class="built_in">max</span>(value, mazeDistance(food, position, problem.startingGameState))</span><br><span class="line">    <span class="keyword">return</span> value</span><br></pre></td></tr></table></figure><h3 id="Answer-optimize-3">Answer (optimize)</h3><p>The approach for this solution was construct a fully-connected graph between all the food items were the weight between two items was the distance between them within the maze (i.e. the maze distance). The was computed using a breadth-first search for each pair of points and storing the result in an adjacency matrix. The heuristic was constructed by taking the maze distance to the closest food item plus the total weight across the minimum spanning tree of uneaten food items. Computing the adjacency matrix was an expensive operation, and therefore the result was cached and variants on the matrix were constructed by zeroing out the rows and columns corresponding to already eaten food pellets. The figure below shows the full and partial adjacency matrices for the medium search problem.</p><p>This approach was graded 5/4 and <strong>expanded 255 nodes</strong>.</p><p><img src="https://cdn.jsdelivr.net/gh/Misaka-9982-coder/img_hosting/img/adj_mats.png" alt="adj_mats.png"></p><p>Experiments with Manhattan distance rather than maze distance yielded a grade of 4/4 and expanded 7137 nodes. Furthermore, this program version took significantly longer to run, confirming that computing the expensive adjacency matrix before searching for the solution reduced the overall cost.</p><p>However, the process of computing the initial adjacency matrix could be hugely optimized with more aggressive caching. The current solution independently computes the pairwise distances between food pellets, despite the computation for any given pair (that aren’t a distance=1 from each other) necessarily traversing over many intermediate food pellets. Given that BFS runs in <code>O(V+E)</code>, where <code>V</code> is the number of legal positions in the maze and <code>E</code> is the number of valid transitions between positions. Therefore, the current computation of the matrix is <code>O(F^2(V+E))</code> for <code>F</code> food pellets. As <code>F &lt;= V</code> and the grid structure of the graph restricts <code>E = cV, 1 &lt; c &lt; 4</code>, in the worst case this is becomes <code>O(V^3)</code>. An improvement to this algorithm would be to use Prim’s algorithm to construct a minimum spanning from each food pellet and record cumulative distances as the tree is built. Prim’s algorithm has time complexity <code>O(E ln V)</code>, therefore, this algorithm would be <code>O(FE ln V) = O(V^2 ln V)</code>.</p><p>The following is the core bits of code for the solution:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@lru_cache(<span class="params">maxsize=<span class="literal">None</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getFoodIndices</span>(<span class="params">gameState</span>):</span></span><br><span class="line">    <span class="keyword">return</span> &#123;f: i <span class="keyword">for</span> i, f <span class="keyword">in</span> <span class="built_in">enumerate</span>(gameState.getFood().asList())&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@lru_cache(<span class="params">maxsize=<span class="literal">None</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getFoodAdjacencyMatrix</span>(<span class="params">gameState</span>):</span></span><br><span class="line">    foodList = gameState.getFood().asList()</span><br><span class="line">    foodIndices = getFoodIndices(gameState)</span><br><span class="line">    numFood = <span class="built_in">len</span>(foodList)</span><br><span class="line">    adjM = np.zeros((numFood, numFood))</span><br><span class="line">    <span class="keyword">for</span> f1, f2 <span class="keyword">in</span> combinations(foodList, <span class="number">2</span>):</span><br><span class="line">        i, j = foodIndices[f1], foodIndices[f2]</span><br><span class="line">        adjM[i, j] = adjM[j, i] = mazeDistance(gameState, f1, f2)</span><br><span class="line">    <span class="keyword">return</span> adjM</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FoodSearchProblem</span>:</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    A search problem associated with finding the a path that collects all of the</span></span><br><span class="line"><span class="string">    food (dots) in a Pacman game.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    A search state in this problem is a tuple ( pacmanPosition, foodGrid ) where</span></span><br><span class="line"><span class="string">      pacmanPosition: a tuple (x,y) of integers specifying Pacman&#x27;s position</span></span><br><span class="line"><span class="string">      foodGrid:       a Grid (see game.py) of either True or False, specifying remaining food</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, startingGameState: pacman.GameState</span>):</span></span><br><span class="line">        self.start = (startingGameState.getPacmanPosition(), startingGameState.getFood())</span><br><span class="line">        self.walls = startingGameState.getWalls()</span><br><span class="line">        self.startingGameState = startingGameState</span><br><span class="line">        self._expanded = <span class="number">0</span> <span class="comment"># DO NOT CHANGE</span></span><br><span class="line">        self.heuristicInfo = &#123;</span><br><span class="line">            <span class="string">&#x27;initialFood&#x27;</span>: startingGameState.getFood().asList(),</span><br><span class="line">            <span class="string">&#x27;foodIndices&#x27;</span>: getFoodIndices(startingGameState),</span><br><span class="line">            <span class="string">&#x27;foodAdjMatrix&#x27;</span>: getFoodAdjacencyMatrix(startingGameState),</span><br><span class="line">            <span class="string">&#x27;mazeDistFn&#x27;</span>: partial(mazeDistance, startingGameState)</span><br><span class="line">        &#125; <span class="comment"># A dictionary for the heuristic to store information</span></span><br><span class="line">        </span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">minimumSpanningTreeTotalWeight</span>(<span class="params">adjM</span>):</span></span><br><span class="line">    g = nx.from_numpy_matrix(adjM)</span><br><span class="line">    mst = nx.minimum_spanning_tree(g)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span>(e[<span class="number">2</span>][<span class="string">&#x27;weight&#x27;</span>] <span class="keyword">for</span> e <span class="keyword">in</span> mst.edges(data=<span class="literal">True</span>))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foodAdjMatrixAfterEating</span>(<span class="params">problem, foodLeft</span>):</span></span><br><span class="line">    foodList = problem.heuristicInfo[<span class="string">&#x27;initialFood&#x27;</span>]</span><br><span class="line">    foodIndices = problem.heuristicInfo[<span class="string">&#x27;foodIndices&#x27;</span>]</span><br><span class="line">    M = problem.heuristicInfo[<span class="string">&#x27;foodAdjMatrix&#x27;</span>].copy()</span><br><span class="line">    <span class="keyword">for</span> f <span class="keyword">in</span> <span class="built_in">set</span>(foodList).difference(<span class="built_in">set</span>(foodLeft)):</span><br><span class="line">        i = foodIndices[f]</span><br><span class="line">        M[i, :] = M[:, i] = <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> M      </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foodHeuristic</span>(<span class="params">state: <span class="type">Tuple</span>[<span class="type">Tuple</span>, <span class="type">List</span>[<span class="type">List</span>]], problem: FoodSearchProblem</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Your heuristic for the FoodSearchProblem goes here.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    This heuristic must be consistent to ensure correctness.  First, try to come</span></span><br><span class="line"><span class="string">    up with an admissible heuristic; almost all admissible heuristics will be</span></span><br><span class="line"><span class="string">    consistent as well.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    If using A* ever finds a solution that is worse uniform cost search finds,</span></span><br><span class="line"><span class="string">    your heuristic is *not* consistent, and probably not admissible!  On the</span></span><br><span class="line"><span class="string">    other hand, inadmissible or inconsistent heuristics may find optimal</span></span><br><span class="line"><span class="string">    solutions, so be careful.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    The state is a tuple ( pacmanPosition, foodGrid ) where foodGrid is a Grid</span></span><br><span class="line"><span class="string">    (see game.py) of either True or False. You can call foodGrid.asList() to get</span></span><br><span class="line"><span class="string">    a list of food coordinates instead.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    If you want access to info like walls, capsules, etc., you can query the</span></span><br><span class="line"><span class="string">    problem.  For example, problem.walls gives you a Grid of where the walls</span></span><br><span class="line"><span class="string">    are.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    If you want to *store* information to be reused in other calls to the</span></span><br><span class="line"><span class="string">    heuristic, there is a dictionary called problem.heuristicInfo that you can</span></span><br><span class="line"><span class="string">    use. For example, if you only want to count the walls once and store that</span></span><br><span class="line"><span class="string">    value, try: problem.heuristicInfo[&#x27;wallCount&#x27;] = problem.walls.count()</span></span><br><span class="line"><span class="string">    Subsequent calls to this heuristic can access</span></span><br><span class="line"><span class="string">    problem.heuristicInfo[&#x27;wallCount&#x27;]</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    position, foodGrid = state</span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    foodLeft = foodGrid.asList()</span><br><span class="line">    adjM = foodAdjMatrixAfterEating(problem, foodLeft)</span><br><span class="line">    mstTotalW = minimumSpanningTreeTotalWeight(adjM)</span><br><span class="line">    distToPacman = partial(problem.heuristicInfo[<span class="string">&#x27;mazeDistFn&#x27;</span>], position)</span><br><span class="line">    closestFood = <span class="built_in">min</span>(<span class="built_in">map</span>(distToPacman, foodLeft), default=<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> closestFood + mstTotalW</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mazeDistance</span>(<span class="params">gameState: pacman.GameState, point1: <span class="type">Tuple</span>[<span class="built_in">int</span>, <span class="built_in">int</span>], point2: <span class="type">Tuple</span>[<span class="built_in">int</span>, <span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Returns the maze distance between any two points, using the search functions</span></span><br><span class="line"><span class="string">    you have already built. The gameState can be any game state -- Pacman&#x27;s</span></span><br><span class="line"><span class="string">    position in that state is ignored.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Example usage: mazeDistance( (2,4), (5,6), gameState)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    This might be a useful helper function for your ApproximateSearchAgent.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    x1, y1 = point1</span><br><span class="line">    x2, y2 = point2</span><br><span class="line">    walls = gameState.getWalls()</span><br><span class="line">    <span class="keyword">assert</span> <span class="keyword">not</span> walls[x1][y1], <span class="string">&#x27;point1 is a wall: &#x27;</span> + <span class="built_in">str</span>(point1)</span><br><span class="line">    <span class="keyword">assert</span> <span class="keyword">not</span> walls[x2][y2], <span class="string">&#x27;point2 is a wall: &#x27;</span> + <span class="built_in">str</span>(point2)</span><br><span class="line">    prob = PositionSearchProblem(gameState, start=point1, goal=point2, warn=<span class="literal">False</span>, visualize=<span class="literal">False</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">len</span>(search.bfs(prob))</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="Q8-3-pts-Suboptimal-Search">Q8 (3 pts): Suboptimal Search</h2><p>Sometimes, even with A* and a good heuristic, finding the optimal path through all the dots is hard. In these cases, we’d still like to find a reasonably good path, quickly. In this section, you’ll write an agent that always greedily eats the closest dot. <code>ClosestDotSearchAgent</code> is implemented for you in <code>searchAgents.py</code>, but it’s missing a key function that finds a path to the closest dot.</p><p>Implement the function <code>findPathToClosestDot</code> in <code>searchAgents.py</code>. Our agent solves this maze (suboptimally!) in under a second with a path cost of 350:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python pacman.py -l bigSearch -p ClosestDotSearchAgent -z .5</span><br></pre></td></tr></table></figure><p><em>Hint</em>: The quickest way to complete <code>findPathToClosestDot</code> is to fill in the <code>AnyFoodSearchProblem</code>, which is missing its goal test. Then, solve that problem with an appropriate search function. The solution should be very short!</p><p>Your <code>ClosestDotSearchAgent</code> won’t always find the shortest possible path through the maze. Make sure you understand why and try to come up with a small example where repeatedly going to the closest dot does not result in finding the shortest path for eating all the dots.</p><p>Grading: Please run the below command to see if your implementation passes all the autograder test cases.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python autograder.py -q q8</span><br></pre></td></tr></table></figure><h3 id="Answer-12">Answer</h3><p>Run the BFS to find the path to the closest dot.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">findPathToClosestDot</span>(<span class="params">self, gameState: pacman.GameState</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Returns a path (a list of actions) to the closest dot, starting from</span></span><br><span class="line"><span class="string">        gameState.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># Here are some useful elements of the startState</span></span><br><span class="line">        startPosition = gameState.getPacmanPosition()</span><br><span class="line">        food = gameState.getFood()</span><br><span class="line">        walls = gameState.getWalls()</span><br><span class="line">        problem = AnyFoodSearchProblem(gameState)</span><br><span class="line"></span><br><span class="line">        <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">        <span class="comment"># util.raiseNotDefined()</span></span><br><span class="line">        <span class="keyword">return</span> search.bfs(problem)</span><br><span class="line">      </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AnyFoodSearchProblem</span>(<span class="params">PositionSearchProblem</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    A search problem for finding a path to any food.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    This search problem is just like the PositionSearchProblem, but has a</span></span><br><span class="line"><span class="string">    different goal test, which you need to fill in below.  The state space and</span></span><br><span class="line"><span class="string">    successor function do not need to be changed.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    The class definition above, AnyFoodSearchProblem(PositionSearchProblem),</span></span><br><span class="line"><span class="string">    inherits the methods of the PositionSearchProblem.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    You can use this search problem to help you fill in the findPathToClosestDot</span></span><br><span class="line"><span class="string">    method.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, gameState</span>):</span></span><br><span class="line">        <span class="string">&quot;Stores information from the gameState.  You don&#x27;t need to change this.&quot;</span></span><br><span class="line">        <span class="comment"># Store the food for later reference</span></span><br><span class="line">        self.food = gameState.getFood()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Store info for the PositionSearchProblem (no need to change this)</span></span><br><span class="line">        self.walls = gameState.getWalls()</span><br><span class="line">        self.startState = gameState.getPacmanPosition()</span><br><span class="line">        self.costFn = <span class="keyword">lambda</span> x: <span class="number">1</span></span><br><span class="line">        self._visited, self._visitedlist, self._expanded = &#123;&#125;, [], <span class="number">0</span> <span class="comment"># DO NOT CHANGE</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isGoalState</span>(<span class="params">self, state: <span class="type">Tuple</span>[<span class="built_in">int</span>, <span class="built_in">int</span>]</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        The state is Pacman&#x27;s position. Fill this in with a goal test that will</span></span><br><span class="line"><span class="string">        complete the problem definition.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        x,y = state</span><br><span class="line"></span><br><span class="line">        <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">        <span class="comment"># util.raiseNotDefined()</span></span><br><span class="line">        <span class="keyword">return</span> self.food[x][y]</span><br></pre></td></tr></table></figure><hr><h2 id="Autograder-Report-2">Autograder Report</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br></pre></td><td class="code"><pre><span class="line">Starting on 12-16 at 20:28:47</span><br><span class="line"></span><br><span class="line">Question q1</span><br><span class="line">===========</span><br><span class="line">*** PASS: test_cases/q1/graph_backtrack.test</span><br><span class="line">*** solution:[&#x27;1:A-&gt;C&#x27;, &#x27;0:C-&gt;G&#x27;]</span><br><span class="line">*** expanded_states:[&#x27;A&#x27;, &#x27;D&#x27;, &#x27;C&#x27;]</span><br><span class="line">*** PASS: test_cases/q1/graph_bfs_vs_dfs.test</span><br><span class="line">*** solution:[&#x27;2:A-&gt;D&#x27;, &#x27;0:D-&gt;G&#x27;]</span><br><span class="line">*** expanded_states:[&#x27;A&#x27;, &#x27;D&#x27;]</span><br><span class="line">*** PASS: test_cases/q1/graph_infinite.test</span><br><span class="line">*** solution:[&#x27;0:A-&gt;B&#x27;, &#x27;1:B-&gt;C&#x27;, &#x27;1:C-&gt;G&#x27;]</span><br><span class="line">*** expanded_states:[&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;]</span><br><span class="line">*** PASS: test_cases/q1/graph_manypaths.test</span><br><span class="line">*** solution:[&#x27;2:A-&gt;B2&#x27;, &#x27;0:B2-&gt;C&#x27;, &#x27;0:C-&gt;D&#x27;, &#x27;2:D-&gt;E2&#x27;, &#x27;0:E2-&gt;F&#x27;, &#x27;0:F-&gt;G&#x27;]</span><br><span class="line">*** expanded_states:[&#x27;A&#x27;, &#x27;B2&#x27;, &#x27;C&#x27;, &#x27;D&#x27;, &#x27;E2&#x27;, &#x27;F&#x27;]</span><br><span class="line">*** PASS: test_cases/q1/pacman_1.test</span><br><span class="line">*** pacman layout:mediumMaze</span><br><span class="line">*** solution length: 130</span><br><span class="line">*** nodes expanded:146</span><br><span class="line"></span><br><span class="line">### Question q1: 3/3 ###</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Question q2</span><br><span class="line">===========</span><br><span class="line">*** PASS: test_cases/q2/graph_backtrack.test</span><br><span class="line">*** solution:[&#x27;1:A-&gt;C&#x27;, &#x27;0:C-&gt;G&#x27;]</span><br><span class="line">*** expanded_states:[&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;, &#x27;D&#x27;]</span><br><span class="line">*** PASS: test_cases/q2/graph_bfs_vs_dfs.test</span><br><span class="line">*** solution:[&#x27;1:A-&gt;G&#x27;]</span><br><span class="line">*** expanded_states:[&#x27;A&#x27;, &#x27;B&#x27;]</span><br><span class="line">*** PASS: test_cases/q2/graph_infinite.test</span><br><span class="line">*** solution:[&#x27;0:A-&gt;B&#x27;, &#x27;1:B-&gt;C&#x27;, &#x27;1:C-&gt;G&#x27;]</span><br><span class="line">*** expanded_states:[&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;]</span><br><span class="line">*** PASS: test_cases/q2/graph_manypaths.test</span><br><span class="line">*** solution:[&#x27;1:A-&gt;C&#x27;, &#x27;0:C-&gt;D&#x27;, &#x27;1:D-&gt;F&#x27;, &#x27;0:F-&gt;G&#x27;]</span><br><span class="line">*** expanded_states:[&#x27;A&#x27;, &#x27;B1&#x27;, &#x27;C&#x27;, &#x27;B2&#x27;, &#x27;D&#x27;, &#x27;E1&#x27;, &#x27;F&#x27;, &#x27;E2&#x27;]</span><br><span class="line">*** PASS: test_cases/q2/pacman_1.test</span><br><span class="line">*** pacman layout:mediumMaze</span><br><span class="line">*** solution length: 68</span><br><span class="line">*** nodes expanded:269</span><br><span class="line"></span><br><span class="line">### Question q2: 3/3 ###</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Question q3</span><br><span class="line">===========</span><br><span class="line">*** PASS: test_cases/q3/graph_backtrack.test</span><br><span class="line">*** solution:[&#x27;1:A-&gt;C&#x27;, &#x27;0:C-&gt;G&#x27;]</span><br><span class="line">*** expanded_states:[&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;, &#x27;D&#x27;]</span><br><span class="line">*** PASS: test_cases/q3/graph_bfs_vs_dfs.test</span><br><span class="line">*** solution:[&#x27;1:A-&gt;G&#x27;]</span><br><span class="line">*** expanded_states:[&#x27;A&#x27;, &#x27;B&#x27;]</span><br><span class="line">*** PASS: test_cases/q3/graph_infinite.test</span><br><span class="line">*** solution:[&#x27;0:A-&gt;B&#x27;, &#x27;1:B-&gt;C&#x27;, &#x27;1:C-&gt;G&#x27;]</span><br><span class="line">*** expanded_states:[&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;]</span><br><span class="line">*** PASS: test_cases/q3/graph_manypaths.test</span><br><span class="line">*** solution:[&#x27;1:A-&gt;C&#x27;, &#x27;0:C-&gt;D&#x27;, &#x27;1:D-&gt;F&#x27;, &#x27;0:F-&gt;G&#x27;]</span><br><span class="line">*** expanded_states:[&#x27;A&#x27;, &#x27;B1&#x27;, &#x27;C&#x27;, &#x27;B2&#x27;, &#x27;D&#x27;, &#x27;E1&#x27;, &#x27;F&#x27;, &#x27;E2&#x27;]</span><br><span class="line">*** PASS: test_cases/q3/ucs_0_graph.test</span><br><span class="line">*** solution:[&#x27;Right&#x27;, &#x27;Down&#x27;, &#x27;Down&#x27;]</span><br><span class="line">*** expanded_states:[&#x27;A&#x27;, &#x27;B&#x27;, &#x27;D&#x27;, &#x27;C&#x27;, &#x27;G&#x27;]</span><br><span class="line">*** PASS: test_cases/q3/ucs_1_problemC.test</span><br><span class="line">*** pacman layout:mediumMaze</span><br><span class="line">*** solution length: 68</span><br><span class="line">*** nodes expanded:269</span><br><span class="line">*** PASS: test_cases/q3/ucs_2_problemE.test</span><br><span class="line">*** pacman layout:mediumMaze</span><br><span class="line">*** solution length: 74</span><br><span class="line">*** nodes expanded:260</span><br><span class="line">*** PASS: test_cases/q3/ucs_3_problemW.test</span><br><span class="line">*** pacman layout:mediumMaze</span><br><span class="line">*** solution length: 152</span><br><span class="line">*** nodes expanded:173</span><br><span class="line">*** PASS: test_cases/q3/ucs_4_testSearch.test</span><br><span class="line">*** pacman layout:testSearch</span><br><span class="line">*** solution length: 7</span><br><span class="line">*** nodes expanded:14</span><br><span class="line">*** PASS: test_cases/q3/ucs_5_goalAtDequeue.test</span><br><span class="line">*** solution:[&#x27;1:A-&gt;B&#x27;, &#x27;0:B-&gt;C&#x27;, &#x27;0:C-&gt;G&#x27;]</span><br><span class="line">*** expanded_states:[&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;]</span><br><span class="line"></span><br><span class="line">### Question q3: 3/3 ###</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Question q4</span><br><span class="line">===========</span><br><span class="line">*** PASS: test_cases/q4/astar_0.test</span><br><span class="line">*** solution:[&#x27;Right&#x27;, &#x27;Down&#x27;, &#x27;Down&#x27;]</span><br><span class="line">*** expanded_states:[&#x27;A&#x27;, &#x27;B&#x27;, &#x27;D&#x27;, &#x27;C&#x27;, &#x27;G&#x27;]</span><br><span class="line">*** PASS: test_cases/q4/astar_1_graph_heuristic.test</span><br><span class="line">*** solution:[&#x27;0&#x27;, &#x27;0&#x27;, &#x27;2&#x27;]</span><br><span class="line">*** expanded_states:[&#x27;S&#x27;, &#x27;A&#x27;, &#x27;D&#x27;, &#x27;C&#x27;]</span><br><span class="line">*** PASS: test_cases/q4/astar_2_manhattan.test</span><br><span class="line">*** pacman layout:mediumMaze</span><br><span class="line">*** solution length: 68</span><br><span class="line">*** nodes expanded:221</span><br><span class="line">*** PASS: test_cases/q4/astar_3_goalAtDequeue.test</span><br><span class="line">*** solution:[&#x27;1:A-&gt;B&#x27;, &#x27;0:B-&gt;C&#x27;, &#x27;0:C-&gt;G&#x27;]</span><br><span class="line">*** expanded_states:[&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;]</span><br><span class="line">*** PASS: test_cases/q4/graph_backtrack.test</span><br><span class="line">*** solution:[&#x27;1:A-&gt;C&#x27;, &#x27;0:C-&gt;G&#x27;]</span><br><span class="line">*** expanded_states:[&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;, &#x27;D&#x27;]</span><br><span class="line">*** PASS: test_cases/q4/graph_manypaths.test</span><br><span class="line">*** solution:[&#x27;1:A-&gt;C&#x27;, &#x27;0:C-&gt;D&#x27;, &#x27;1:D-&gt;F&#x27;, &#x27;0:F-&gt;G&#x27;]</span><br><span class="line">*** expanded_states:[&#x27;A&#x27;, &#x27;B1&#x27;, &#x27;C&#x27;, &#x27;B2&#x27;, &#x27;D&#x27;, &#x27;E1&#x27;, &#x27;F&#x27;, &#x27;E2&#x27;]</span><br><span class="line"></span><br><span class="line">### Question q4: 3/3 ###</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Question q5</span><br><span class="line">===========</span><br><span class="line">*** PASS: test_cases/q5/corner_tiny_corner.test</span><br><span class="line">*** pacman layout:tinyCorner</span><br><span class="line">*** solution length:28</span><br><span class="line"></span><br><span class="line">### Question q5: 3/3 ###</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Question q6</span><br><span class="line">===========</span><br><span class="line">*** PASS: heuristic value less than true cost at start state</span><br><span class="line">*** PASS: heuristic value less than true cost at start state</span><br><span class="line">*** PASS: heuristic value less than true cost at start state</span><br><span class="line">path: [&#x27;North&#x27;, &#x27;East&#x27;, &#x27;East&#x27;, &#x27;East&#x27;, &#x27;East&#x27;, &#x27;North&#x27;, &#x27;North&#x27;, &#x27;West&#x27;, &#x27;West&#x27;, &#x27;West&#x27;, &#x27;West&#x27;, &#x27;North&#x27;, &#x27;North&#x27;, &#x27;North&#x27;, &#x27;North&#x27;, &#x27;North&#x27;, &#x27;North&#x27;, &#x27;North&#x27;, &#x27;North&#x27;, &#x27;West&#x27;, &#x27;West&#x27;, &#x27;West&#x27;, &#x27;West&#x27;, &#x27;South&#x27;, &#x27;South&#x27;, &#x27;East&#x27;, &#x27;East&#x27;, &#x27;East&#x27;, &#x27;East&#x27;, &#x27;South&#x27;, &#x27;South&#x27;, &#x27;South&#x27;, &#x27;South&#x27;, &#x27;South&#x27;, &#x27;South&#x27;, &#x27;West&#x27;, &#x27;West&#x27;, &#x27;South&#x27;, &#x27;South&#x27;, &#x27;South&#x27;, &#x27;West&#x27;, &#x27;West&#x27;, &#x27;East&#x27;, &#x27;East&#x27;, &#x27;North&#x27;, &#x27;North&#x27;, &#x27;North&#x27;, &#x27;East&#x27;, &#x27;East&#x27;, &#x27;East&#x27;, &#x27;East&#x27;, &#x27;East&#x27;, &#x27;East&#x27;, &#x27;East&#x27;, &#x27;East&#x27;, &#x27;South&#x27;, &#x27;South&#x27;, &#x27;East&#x27;, &#x27;East&#x27;, &#x27;East&#x27;, &#x27;East&#x27;, &#x27;East&#x27;, &#x27;North&#x27;, &#x27;North&#x27;, &#x27;East&#x27;, &#x27;East&#x27;, &#x27;North&#x27;, &#x27;North&#x27;, &#x27;East&#x27;, &#x27;East&#x27;, &#x27;North&#x27;, &#x27;North&#x27;, &#x27;East&#x27;, &#x27;East&#x27;, &#x27;East&#x27;, &#x27;East&#x27;, &#x27;South&#x27;, &#x27;South&#x27;, &#x27;South&#x27;, &#x27;South&#x27;, &#x27;East&#x27;, &#x27;East&#x27;, &#x27;North&#x27;, &#x27;North&#x27;, &#x27;East&#x27;, &#x27;East&#x27;, &#x27;South&#x27;, &#x27;South&#x27;, &#x27;South&#x27;, &#x27;South&#x27;, &#x27;South&#x27;, &#x27;North&#x27;, &#x27;North&#x27;, &#x27;North&#x27;, &#x27;North&#x27;, &#x27;North&#x27;, &#x27;North&#x27;, &#x27;North&#x27;, &#x27;West&#x27;, &#x27;West&#x27;, &#x27;North&#x27;, &#x27;North&#x27;, &#x27;East&#x27;, &#x27;East&#x27;, &#x27;North&#x27;, &#x27;North&#x27;]</span><br><span class="line">path length: 106</span><br><span class="line">*** PASS: Heuristic resulted in expansion of 702 nodes</span><br><span class="line"></span><br><span class="line">### Question q6: 3/3 ###</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Question q7</span><br><span class="line">===========</span><br><span class="line">*** PASS: test_cases/q7/food_heuristic_1.test</span><br><span class="line">*** PASS: test_cases/q7/food_heuristic_10.test</span><br><span class="line">*** PASS: test_cases/q7/food_heuristic_11.test</span><br><span class="line">*** PASS: test_cases/q7/food_heuristic_12.test</span><br><span class="line">*** PASS: test_cases/q7/food_heuristic_13.test</span><br><span class="line">*** PASS: test_cases/q7/food_heuristic_14.test</span><br><span class="line">*** PASS: test_cases/q7/food_heuristic_15.test</span><br><span class="line">*** PASS: test_cases/q7/food_heuristic_16.test</span><br><span class="line">*** PASS: test_cases/q7/food_heuristic_17.test</span><br><span class="line">*** PASS: test_cases/q7/food_heuristic_2.test</span><br><span class="line">*** PASS: test_cases/q7/food_heuristic_3.test</span><br><span class="line">*** PASS: test_cases/q7/food_heuristic_4.test</span><br><span class="line">*** PASS: test_cases/q7/food_heuristic_5.test</span><br><span class="line">*** PASS: test_cases/q7/food_heuristic_6.test</span><br><span class="line">*** PASS: test_cases/q7/food_heuristic_7.test</span><br><span class="line">*** PASS: test_cases/q7/food_heuristic_8.test</span><br><span class="line">*** PASS: test_cases/q7/food_heuristic_9.test</span><br><span class="line">*** PASS: test_cases/q7/food_heuristic_grade_tricky.test</span><br><span class="line">*** expanded nodes: 255</span><br><span class="line">*** thresholds: [15000, 12000, 9000, 7000]</span><br><span class="line"></span><br><span class="line">### Question q7: 5/4 ###</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Question q8</span><br><span class="line">===========</span><br><span class="line">[SearchAgent] using function depthFirstSearch</span><br><span class="line">[SearchAgent] using problem type PositionSearchProblem</span><br><span class="line">*** PASS: test_cases/q8/closest_dot_1.test</span><br><span class="line">*** pacman layout:Test 1</span><br><span class="line">*** solution length:1</span><br><span class="line">[SearchAgent] using function depthFirstSearch</span><br><span class="line">[SearchAgent] using problem type PositionSearchProblem</span><br><span class="line">*** PASS: test_cases/q8/closest_dot_10.test</span><br><span class="line">*** pacman layout:Test 10</span><br><span class="line">*** solution length:1</span><br><span class="line">[SearchAgent] using function depthFirstSearch</span><br><span class="line">[SearchAgent] using problem type PositionSearchProblem</span><br><span class="line">*** PASS: test_cases/q8/closest_dot_11.test</span><br><span class="line">*** pacman layout:Test 11</span><br><span class="line">*** solution length:2</span><br><span class="line">[SearchAgent] using function depthFirstSearch</span><br><span class="line">[SearchAgent] using problem type PositionSearchProblem</span><br><span class="line">*** PASS: test_cases/q8/closest_dot_12.test</span><br><span class="line">*** pacman layout:Test 12</span><br><span class="line">*** solution length:3</span><br><span class="line">[SearchAgent] using function depthFirstSearch</span><br><span class="line">[SearchAgent] using problem type PositionSearchProblem</span><br><span class="line">*** PASS: test_cases/q8/closest_dot_13.test</span><br><span class="line">*** pacman layout:Test 13</span><br><span class="line">*** solution length:1</span><br><span class="line">[SearchAgent] using function depthFirstSearch</span><br><span class="line">[SearchAgent] using problem type PositionSearchProblem</span><br><span class="line">*** PASS: test_cases/q8/closest_dot_2.test</span><br><span class="line">*** pacman layout:Test 2</span><br><span class="line">*** solution length:1</span><br><span class="line">[SearchAgent] using function depthFirstSearch</span><br><span class="line">[SearchAgent] using problem type PositionSearchProblem</span><br><span class="line">*** PASS: test_cases/q8/closest_dot_3.test</span><br><span class="line">*** pacman layout:Test 3</span><br><span class="line">*** solution length:1</span><br><span class="line">[SearchAgent] using function depthFirstSearch</span><br><span class="line">[SearchAgent] using problem type PositionSearchProblem</span><br><span class="line">*** PASS: test_cases/q8/closest_dot_4.test</span><br><span class="line">*** pacman layout:Test 4</span><br><span class="line">*** solution length:3</span><br><span class="line">[SearchAgent] using function depthFirstSearch</span><br><span class="line">[SearchAgent] using problem type PositionSearchProblem</span><br><span class="line">*** PASS: test_cases/q8/closest_dot_5.test</span><br><span class="line">*** pacman layout:Test 5</span><br><span class="line">*** solution length:1</span><br><span class="line">[SearchAgent] using function depthFirstSearch</span><br><span class="line">[SearchAgent] using problem type PositionSearchProblem</span><br><span class="line">*** PASS: test_cases/q8/closest_dot_6.test</span><br><span class="line">*** pacman layout:Test 6</span><br><span class="line">*** solution length:2</span><br><span class="line">[SearchAgent] using function depthFirstSearch</span><br><span class="line">[SearchAgent] using problem type PositionSearchProblem</span><br><span class="line">*** PASS: test_cases/q8/closest_dot_7.test</span><br><span class="line">*** pacman layout:Test 7</span><br><span class="line">*** solution length:1</span><br><span class="line">[SearchAgent] using function depthFirstSearch</span><br><span class="line">[SearchAgent] using problem type PositionSearchProblem</span><br><span class="line">*** PASS: test_cases/q8/closest_dot_8.test</span><br><span class="line">*** pacman layout:Test 8</span><br><span class="line">*** solution length:1</span><br><span class="line">[SearchAgent] using function depthFirstSearch</span><br><span class="line">[SearchAgent] using problem type PositionSearchProblem</span><br><span class="line">*** PASS: test_cases/q8/closest_dot_9.test</span><br><span class="line">*** pacman layout:Test 9</span><br><span class="line">*** solution length:1</span><br><span class="line"></span><br><span class="line">### Question q8: 3/3 ###</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Finished at 20:28:49</span><br><span class="line"></span><br><span class="line">Provisional grades</span><br><span class="line">==================</span><br><span class="line">Question q1: 3/3</span><br><span class="line">Question q2: 3/3</span><br><span class="line">Question q3: 3/3</span><br><span class="line">Question q4: 3/3</span><br><span class="line">Question q5: 3/3</span><br><span class="line">Question q6: 3/3</span><br><span class="line">Question q7: 5/4</span><br><span class="line">Question q8: 3/3</span><br><span class="line">------------------</span><br><span class="line">Total: 26/25</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="CS188" scheme="http://www.misaka-9982.com/tags/CS188/"/>
    
    <category term="AI" scheme="http://www.misaka-9982.com/tags/AI/"/>
    
  </entry>
  
  <entry>
    <title>Configure Kubernetes based on cri-dockerd</title>
    <link href="http://www.misaka-9982.com/2022/12/14/%E5%9F%BA%E4%BA%8Ecri-dockered-%E9%85%8D%E7%BD%AE-kubernetes/"/>
    <id>http://www.misaka-9982.com/2022/12/14/%E5%9F%BA%E4%BA%8Ecri-dockered-%E9%85%8D%E7%BD%AE-kubernetes/</id>
    <published>2022-12-14T06:19:02.000Z</published>
    <updated>2022-12-15T09:46:25.987Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1-Environment">1. Environment</h2><ol><li>Computer<ul><li>MacOS Monterey</li><li>Version 12.3.1  (21E258)</li><li>MacBook Air  (M1, 2020) Chip Apple M1</li><li>Memory 8 GB</li></ul></li><li>Virtual Machine<ul><li>Parallels Desktop 18 for Mac</li><li>Business Edition</li><li>Version 18.0.2  (53077)</li></ul></li><li>ISO file<ul><li>ubuntu-22.04.1-live-server-arm64.iso</li><li>download URL: <a href="https://cdimage.ubuntu.com/releases/22.04/release/ubuntu-22.04.1-live-server-arm64.iso">https://cdimage.ubuntu.com/releases/22.04/release/ubuntu-22.04.1-live-server-arm64.iso</a></li><li>NetWork: Bridged Network Default Adapter</li></ul></li><li>Software Version<ul><li>docker: 20.10.21</li><li>cri-dockerd: 0.2.6.arm64</li><li>kubeadm : 1.25</li><li>kubectl : 1.25</li><li>kubelet : 1.25</li></ul></li></ol><h2 id="2-Config-the-host">2. Config the host</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update &amp;&amp; sudo apt-get upgrade</span><br><span class="line">sudo <span class="built_in">echo</span> \</span><br><span class="line"><span class="string">&#x27;</span></span><br><span class="line"><span class="string">172.20.10.5  k8s-master</span></span><br><span class="line"><span class="string">172.20.10.6  k8s-node1</span></span><br><span class="line"><span class="string">172.20.10.3  k8s-node2</span></span><br><span class="line"><span class="string">&#x27;</span> &gt;&gt; /etc/hosts</span><br></pre></td></tr></table></figure><h2 id="3-Close-selinux">3. Close selinux</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo touch /etc/selinux/config</span><br><span class="line">sudo sed -i <span class="string">&#x27;s/SELINUX=enforcing/SELINUX=disabled/g&#x27;</span> /etc/selinux/config</span><br><span class="line"><span class="comment"># Restart the machine to take effect</span></span><br><span class="line">reboot</span><br></pre></td></tr></table></figure><h2 id="4-Close-the-Swap">4. Close the Swap</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo swapoff -a</span><br><span class="line">sudo sed -i <span class="string">&#x27;/swap/s/^/#/&#x27;</span> /etc/fstab </span><br></pre></td></tr></table></figure><h2 id="5-Enabling-IPv4-Forwarding">5. Enabling IPv4 Forwarding</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">sudo cat &lt;&lt;<span class="string">EOF | sudo tee /etc/modules-load.d/k8s.conf</span></span><br><span class="line"><span class="string">overlay</span></span><br><span class="line"><span class="string">br_netfilter</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line">sudo modprobe overlay</span><br><span class="line">sudo modprobe br_netfilter</span><br><span class="line">sudo cat &lt;&lt;<span class="string">EOF | sudo tee /etc/sysctl.d/k8s.conf</span></span><br><span class="line"><span class="string">net.bridge.bridge-nf-call-iptables  = 1</span></span><br><span class="line"><span class="string">net.bridge.bridge-nf-call-ip6tables = 1</span></span><br><span class="line"><span class="string">net.ipv4.ip_forward                 = 1</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line">sudo sysctl --system</span><br></pre></td></tr></table></figure><h2 id="6-Install-docker-and-configure-the-Cgroupdriver">6. Install docker and configure the Cgroupdriver</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install apt-transport-https ca-certificates curl software-properties-common gnupg lsb-release</span><br><span class="line">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;deb [arch=<span class="subst">$(dpkg --print-architecture)</span> signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu <span class="subst">$(lsb_release -cs)</span> stable&quot;</span> | sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null</span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install docker-ce docker-ce-cli containerd.io docker-compose-plugin</span><br><span class="line">sudo usermod -aG docker <span class="variable">$USER</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## Modify the docker process manager</span></span><br><span class="line">sudo cat &gt; /etc/docker/daemon.json &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">&quot;registry-mirrors&quot;: [</span></span><br><span class="line"><span class="string">&quot;https://docker.mirrors.ustc.edu.cn&quot;,</span></span><br><span class="line"><span class="string">&quot;https://hub-mirror.c.163.com&quot;,</span></span><br><span class="line"><span class="string">&quot;https://reg-mirror.qiniu.com&quot;,</span></span><br><span class="line"><span class="string">&quot;https://registry.docker-cn.com&quot;</span></span><br><span class="line"><span class="string">],</span></span><br><span class="line"><span class="string">&quot;exec-opts&quot;: [&quot;native.cgroupdriver=systemd&quot;]</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br><span class="line">sudo systemctl status docker</span><br></pre></td></tr></table></figure><h2 id="7-Install-the-cri-docker-and-start">7. Install the cri-docker and start</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/Mirantis/cri-dockerd/releases/download/v0.2.6/cri-dockerd-0.2.6.arm64.tgz</span><br><span class="line">tar -xf cri-dockerd-0.2.6.arm64.tgz</span><br><span class="line">cp cri-dockerd/cri-dockerd /usr/bin/</span><br><span class="line">chmod +x /usr/bin/cri-dockerd</span><br></pre></td></tr></table></figure><p>Configure the cri-dockerd</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">cat &lt;&lt;<span class="string">&quot;EOF&quot;</span> &gt; /usr/lib/systemd/system/cri-docker.service</span><br><span class="line">[Unit]</span><br><span class="line">Description=CRI Interface <span class="keyword">for</span> Docker Application Container Engine</span><br><span class="line">Documentation=https://docs.mirantis.com</span><br><span class="line">After=network-online.target firewalld.service docker.service</span><br><span class="line">Wants=network-online.target</span><br><span class="line">Requires=cri-docker.socket</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=notify</span><br><span class="line"></span><br><span class="line">ExecStart=/usr/bin/cri-dockerd --network-plugin=cni --pod-infra-container-image=registry.aliyuncs.com/google_containers/pause:3.7</span><br><span class="line"></span><br><span class="line">ExecReload=/bin/<span class="built_in">kill</span> -s HUP <span class="variable">$MAINPID</span></span><br><span class="line">TimeoutSec=0</span><br><span class="line">RestartSec=2</span><br><span class="line">Restart=always</span><br><span class="line"></span><br><span class="line">StartLimitBurst=3</span><br><span class="line"></span><br><span class="line">StartLimitInterval=60s</span><br><span class="line"></span><br><span class="line">LimitNOFILE=infinity</span><br><span class="line">LimitNPROC=infinity</span><br><span class="line">LimitCORE=infinity</span><br><span class="line"></span><br><span class="line">TasksMax=infinity</span><br><span class="line">Delegate=yes</span><br><span class="line">KillMode=process</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line"></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">cat &lt;&lt;<span class="string">&quot;EOF&quot;</span> &gt; /usr/lib/systemd/system/cri-docker.socket</span><br><span class="line">[Unit]</span><br><span class="line">Description=CRI Docker Socket <span class="keyword">for</span> the API</span><br><span class="line">PartOf=cri-docker.service</span><br><span class="line"></span><br><span class="line">[Socket]</span><br><span class="line">ListenStream=%t/cri-dockerd.sock</span><br><span class="line">SocketMode=0660</span><br><span class="line">SocketUser=root</span><br><span class="line">SocketGroup=docker</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=sockets.target</span><br><span class="line"></span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>Start the cri-docker</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl start cri-docker</span><br><span class="line">systemctl <span class="built_in">enable</span> cri-docker</span><br><span class="line">systemctl status cri-docker</span><br></pre></td></tr></table></figure><h2 id="8-Install-kubeadm-kubectl-kubelet-and-enable-it">8. Install kubeadm kubectl kubelet and enable it</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install -y apt-transport-https</span><br><span class="line">curl https://mirrors.aliyun.com/kubernetes/apt/doc/apt-key.gpg | apt-key add - </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;deb https://mirrors.aliyun.com/kubernetes/apt/ kubernetes-xenial main&#x27;</span> &gt;&gt; /etc/apt/sources.list</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install -y kubelet=1.25.0-00 kubeadm=1.25.0-00 kubectl=1.25.0-00</span><br></pre></td></tr></table></figure><h2 id="9-Configure-Master">9. Configure Master</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Master Node</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;</span></span><br><span class="line"><span class="string">apiVersion: kubeadm.k8s.io/v1beta3</span></span><br><span class="line"><span class="string">bootstrapTokens:</span></span><br><span class="line"><span class="string">- groups:</span></span><br><span class="line"><span class="string">  - system:bootstrappers:kubeadm:default-node-token</span></span><br><span class="line"><span class="string">  token: abcdef.0123456789abcdef</span></span><br><span class="line"><span class="string">  ttl: 24h0m0s</span></span><br><span class="line"><span class="string">  usages:</span></span><br><span class="line"><span class="string">  - signing</span></span><br><span class="line"><span class="string">  - authentication</span></span><br><span class="line"><span class="string">kind: InitConfiguration</span></span><br><span class="line"><span class="string">localAPIEndpoint:</span></span><br><span class="line"><span class="string">  advertiseAddress: [IP address of this machine]</span></span><br><span class="line"><span class="string">  bindPort: 6443</span></span><br><span class="line"><span class="string">nodeRegistration:</span></span><br><span class="line"><span class="string">  criSocket: unix:///var/run/cri-dockerd.sock</span></span><br><span class="line"><span class="string">  imagePullPolicy: IfNotPresent</span></span><br><span class="line"><span class="string">  name: [Host name of this machine]</span></span><br><span class="line"><span class="string">  taints: null</span></span><br><span class="line"><span class="string">---</span></span><br><span class="line"><span class="string">apiServer:</span></span><br><span class="line"><span class="string">  timeoutForControlPlane: 4m0s</span></span><br><span class="line"><span class="string">apiVersion: kubeadm.k8s.io/v1beta3</span></span><br><span class="line"><span class="string">certificatesDir: /etc/kubernetes/pki</span></span><br><span class="line"><span class="string">clusterName: kubernetes</span></span><br><span class="line"><span class="string">controllerManager: &#123;&#125;</span></span><br><span class="line"><span class="string">dns: &#123;&#125;</span></span><br><span class="line"><span class="string">etcd:</span></span><br><span class="line"><span class="string">  local:</span></span><br><span class="line"><span class="string">    dataDir: /var/lib/etcd</span></span><br><span class="line"><span class="string">imageRepository: registry.aliyuncs.com/google_containers</span></span><br><span class="line"><span class="string">kind: ClusterConfiguration</span></span><br><span class="line"><span class="string">kubernetesVersion: 1.25.0</span></span><br><span class="line"><span class="string">networking:</span></span><br><span class="line"><span class="string">  dnsDomain: cluster.local</span></span><br><span class="line"><span class="string">  serviceSubnet: 10.96.0.0/12 # Pod </span></span><br><span class="line"><span class="string">scheduler: &#123;&#125;</span></span><br><span class="line"><span class="string">---</span></span><br><span class="line"><span class="string">kind: KubeletConfiguration</span></span><br><span class="line"><span class="string">apiVersion: kubelet.config.k8s.io/v1beta1</span></span><br><span class="line"><span class="string">cgroupDriver: systemd   # Set it to systemd</span></span><br><span class="line"><span class="string">&#x27;</span> &gt; kubeadm-config.yaml</span><br><span class="line"></span><br><span class="line">sudo kubeadm init --config kubeadm-config.yaml</span><br></pre></td></tr></table></figure><p>To start using your cluster, you need to run the following as a regular user:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p <span class="variable">$HOME</span>/.kube</span><br><span class="line">sudo cp -i etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</span><br><span class="line">sudo chown $(id -u):$(id -g) <span class="variable">$HOME</span>/.kube/config</span><br></pre></td></tr></table></figure><h2 id="10-Configure-Node">10. Configure Node</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Node </span></span><br><span class="line">kubeadm join &lt;control-plane-endpoint&gt;:6443 --token &lt;token&gt; \</span><br><span class="line">--discovery-token-ca-cert-hash sha256:&lt;<span class="built_in">hash</span>&gt; \</span><br><span class="line">--cri-socket /run/containerd/containerd.sock \</span><br><span class="line">--node-name &lt;nodename&gt;</span><br></pre></td></tr></table></figure><h2 id="11-Installing-Network-Plugin">11. Installing Network Plugin</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## If the status of all nodes changes to ready after installation, it is a success</span></span><br><span class="line">wget https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml</span><br><span class="line">kubectl apply -f ./kube-flannel.yml</span><br><span class="line">kubectl get nodes</span><br></pre></td></tr></table></figure><p>If the network segment of the Pod CIDR is not 10.244.0.0/16, change the network segment in the flannel configuration to be the same as that in the Pod CIDR.</p><h2 id="12-reset-deployment">12. reset deployment</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env bash</span></span><br><span class="line"></span><br><span class="line">sudo kubeadm reset -f</span><br><span class="line"></span><br><span class="line"><span class="comment"># Clear the data directory</span></span><br><span class="line">sudo rm -fr /var/lib/etcd</span><br><span class="line">sudo rm -fr /etc/kubernetes</span><br><span class="line">sudo rm -fr ~/.kube/</span><br><span class="line"></span><br><span class="line"><span class="comment"># delete flannel</span></span><br><span class="line">ifconfig cni0 down</span><br><span class="line">ip link delete cni0</span><br><span class="line">ifconfig flannel.1 down</span><br><span class="line">ip link delete flannel.1</span><br><span class="line">sudo rm -rf /var/lib/cni/</span><br><span class="line">sudo rm -f /etc/cni/net.d/*</span><br><span class="line">kubectl delete -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml</span><br><span class="line"> </span><br><span class="line">systemctl restart docker</span><br><span class="line">systemctl restart kubelet</span><br></pre></td></tr></table></figure><h2 id="Reference-3">Reference</h2><ul><li><a href="https://k8s.huweihuang.com/project/setup/installer/install-k8s-by-kubeadm">使用kubeadm安装生产环境kubernetes</a></li><li><a href="https://www.modb.pro/db/475881">Centos7.9 arm架构 搭建 k8s v1.24.0 (超新)</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
</feed>
